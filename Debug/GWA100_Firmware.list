
GWA100_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000158ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  080159c0  080159c0  000259c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016558  08016558  000303c4  2**0
                  CONTENTS
  4 .ARM          00000000  08016558  08016558  000303c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016558  08016558  000303c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016558  08016558  00026558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801655c  0801655c  0002655c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c4  20000000  08016560  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004448  200003c4  08016924  000303c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000480c  08016924  0003480c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000303c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000303ed  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027269  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006fe5  00000000  00000000  00057699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002508  00000000  00000000  0005e680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d0a  00000000  00000000  00060b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223b2  00000000  00000000  00062892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031c3f  00000000  00000000  00084c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3dc8  00000000  00000000  000b6883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000aecc  00000000  00000000  0015a64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  00165518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003c4 	.word	0x200003c4
 800012c:	00000000 	.word	0x00000000
 8000130:	080159a4 	.word	0x080159a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003c8 	.word	0x200003c8
 800014c:	080159a4 	.word	0x080159a4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__aeabi_f2uiz>:
 8000f58:	0042      	lsls	r2, r0, #1
 8000f5a:	d20e      	bcs.n	8000f7a <__aeabi_f2uiz+0x22>
 8000f5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f60:	d30b      	bcc.n	8000f7a <__aeabi_f2uiz+0x22>
 8000f62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6a:	d409      	bmi.n	8000f80 <__aeabi_f2uiz+0x28>
 8000f6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f74:	fa23 f002 	lsr.w	r0, r3, r2
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr
 8000f80:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f84:	d101      	bne.n	8000f8a <__aeabi_f2uiz+0x32>
 8000f86:	0242      	lsls	r2, r0, #9
 8000f88:	d102      	bne.n	8000f90 <__aeabi_f2uiz+0x38>
 8000f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8e:	4770      	bx	lr
 8000f90:	f04f 0000 	mov.w	r0, #0
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <ledISR>:
//float tempture = 0.0f;
//uint32_t distance_ = 0.0f;


void ledISR(void *arg)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  //ledToggle(_DEF_CH1);
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <CheckRdy>:

bool CheckRdy(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
	bool ret = false;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		if(HAL_GPIO_ReadPin(Spi_Rdy_Port, Spi_Rdy) == 1)
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <CheckRdy+0x28>)
 8000fba:	f004 f999 	bl	80052f0 <HAL_GPIO_ReadPin>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d000      	beq.n	8000fc6 <CheckRdy+0x1a>
 8000fc4:	e7f7      	b.n	8000fb6 <CheckRdy+0xa>
		{
			break;
 8000fc6:	bf00      	nop
		}
	}


	return ret;
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40010c00 	.word	0x40010c00

08000fd8 <apInit>:

void apInit(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af02      	add	r7, sp, #8
//	uint8_t  data;
	HAL_Delay(35000);
 8000fde:	f648 00b8 	movw	r0, #35000	; 0x88b8
 8000fe2:	f003 f8f5 	bl	80041d0 <HAL_Delay>
#ifdef _USE_WDG_
	wdgInit();
	wdgBegin(4000);
#endif

	cliInit();
 8000fe6:	f001 f9c1 	bl	800236c <cliInit>
	swtimerInit();
 8000fea:	f001 fd01 	bl	80029f0 <swtimerInit>
	uartInit();
 8000fee:	f001 fe69 	bl	8002cc4 <uartInit>
	uartPrintf(_DEF_CH1,"\r\n[ Firmware Begin... ]\r\n");
 8000ff2:	4925      	ldr	r1, [pc, #148]	; (8001088 <apInit+0xb0>)
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f001 fef5 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1,"Booting..Name \t\t: %s\r\n", _DEF_BOARD_NAME);
 8000ffa:	4a24      	ldr	r2, [pc, #144]	; (800108c <apInit+0xb4>)
 8000ffc:	4924      	ldr	r1, [pc, #144]	; (8001090 <apInit+0xb8>)
 8000ffe:	2000      	movs	r0, #0
 8001000:	f001 fef0 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1,"Booting..Ver  \t\t: %s\r\n", _DEF_FIRMWATRE_VERSION);
 8001004:	4a23      	ldr	r2, [pc, #140]	; (8001094 <apInit+0xbc>)
 8001006:	4924      	ldr	r1, [pc, #144]	; (8001098 <apInit+0xc0>)
 8001008:	2000      	movs	r0, #0
 800100a:	f001 feeb 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1,"Booting..Clock\t\t: %d Mhz\r\n", (int)HAL_RCC_GetSysClockFreq()/1000000);
 800100e:	f006 ff03 	bl	8007e18 <HAL_RCC_GetSysClockFreq>
 8001012:	4603      	mov	r3, r0
 8001014:	4a21      	ldr	r2, [pc, #132]	; (800109c <apInit+0xc4>)
 8001016:	fb82 1203 	smull	r1, r2, r2, r3
 800101a:	1492      	asrs	r2, r2, #18
 800101c:	17db      	asrs	r3, r3, #31
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	461a      	mov	r2, r3
 8001022:	491f      	ldr	r1, [pc, #124]	; (80010a0 <apInit+0xc8>)
 8001024:	2000      	movs	r0, #0
 8001026:	f001 fedd 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1,"\n");
 800102a:	491e      	ldr	r1, [pc, #120]	; (80010a4 <apInit+0xcc>)
 800102c:	2000      	movs	r0, #0
 800102e:	f001 fed9 	bl	8002de4 <uartPrintf>
	adcInit();
 8001032:	f000 f937 	bl	80012a4 <adcInit>
	//eepromWriteByte(0x00, 0x11);
	//eepromReadByte(0x00, &data);
	//usbInit();
    //usbBegin(USB_CDC_MODE);
//	uartPrintf(_DEF_CH1, "addr : %d\t 0x%02X\n", 0x00, data);
	wizchip_reset();
 8001036:	f001 fcc1 	bl	80029bc <wizchip_reset>

	HAL_Delay(200);
 800103a:	20c8      	movs	r0, #200	; 0xc8
 800103c:	f003 f8c8 	bl	80041d0 <HAL_Delay>
	CheckRdy();
 8001040:	f7ff ffb4 	bl	8000fac <CheckRdy>

	HAL_Delay(20);
 8001044:	2014      	movs	r0, #20
 8001046:	f003 f8c3 	bl	80041d0 <HAL_Delay>
	w5500Init();
 800104a:	f001 ff6d 	bl	8002f28 <w5500Init>
//	uartPrintf(_DEF_CH1, "--test-----\r\n");
	cliAdd("info", infoCli);
 800104e:	4916      	ldr	r1, [pc, #88]	; (80010a8 <apInit+0xd0>)
 8001050:	4816      	ldr	r0, [pc, #88]	; (80010ac <apInit+0xd4>)
 8001052:	f001 f9b1 	bl	80023b8 <cliAdd>

	uint8_t timer_ch;

	if (swtimerGetCh(&timer_ch) == true)
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	4618      	mov	r0, r3
 800105a:	f001 fd09 	bl	8002a70 <swtimerGetCh>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00c      	beq.n	800107e <apInit+0xa6>
	{
		swtimerSet(timer_ch,
 8001064:	79f8      	ldrb	r0, [r7, #7]
 8001066:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2300      	movs	r3, #0
 800106e:	2200      	movs	r2, #0
 8001070:	490f      	ldr	r1, [pc, #60]	; (80010b0 <apInit+0xd8>)
 8001072:	f001 fd19 	bl	8002aa8 <swtimerSet>
				   ledISR,
				   NULL,
				   SWTIMER_LOOP,
				   500);
		swtimerStart(timer_ch);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	4618      	mov	r0, r3
 800107a:	f001 fd67 	bl	8002b4c <swtimerStart>
	}
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	080159c0 	.word	0x080159c0
 800108c:	080159dc 	.word	0x080159dc
 8001090:	080159e8 	.word	0x080159e8
 8001094:	08015a00 	.word	0x08015a00
 8001098:	08015a0c 	.word	0x08015a0c
 800109c:	431bde83 	.word	0x431bde83
 80010a0:	08015a24 	.word	0x08015a24
 80010a4:	08015a40 	.word	0x08015a40
 80010a8:	08001131 	.word	0x08001131
 80010ac:	08015a44 	.word	0x08015a44
 80010b0:	08000f99 	.word	0x08000f99

080010b4 <apMain>:

void apMain(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	uint32_t pre_time;

	uartPrintf(_DEF_CH1,"-------------------------------\r\n");
 80010ba:	4918      	ldr	r1, [pc, #96]	; (800111c <apMain+0x68>)
 80010bc:	2000      	movs	r0, #0
 80010be:	f001 fe91 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1,"[ Firmware Version %s ]\r\n", _DEF_FIRMWATRE_VERSION);
 80010c2:	4a17      	ldr	r2, [pc, #92]	; (8001120 <apMain+0x6c>)
 80010c4:	4917      	ldr	r1, [pc, #92]	; (8001124 <apMain+0x70>)
 80010c6:	2000      	movs	r0, #0
 80010c8:	f001 fe8c 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1,"[ Board Version %s    ]\r\n", _DEF_BOARD_NAME);
 80010cc:	4a16      	ldr	r2, [pc, #88]	; (8001128 <apMain+0x74>)
 80010ce:	4917      	ldr	r1, [pc, #92]	; (800112c <apMain+0x78>)
 80010d0:	2000      	movs	r0, #0
 80010d2:	f001 fe87 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1,"-------------------------------\r\n");
 80010d6:	4911      	ldr	r1, [pc, #68]	; (800111c <apMain+0x68>)
 80010d8:	2000      	movs	r0, #0
 80010da:	f001 fe83 	bl	8002de4 <uartPrintf>

    w5500Info();
 80010de:	f001 ffc9 	bl	8003074 <w5500Info>
	HAL_Delay(10);
 80010e2:	200a      	movs	r0, #10
 80010e4:	f003 f874 	bl	80041d0 <HAL_Delay>

	print_network_information();
 80010e8:	f001 ffce 	bl	8003088 <print_network_information>
	HAL_Delay(10);
 80010ec:	200a      	movs	r0, #10
 80010ee:	f003 f86f 	bl	80041d0 <HAL_Delay>
	DnsInit();
 80010f2:	f002 f861 	bl	80031b8 <DnsInit>

	HAL_Delay(10);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f003 f86a 	bl	80041d0 <HAL_Delay>
	MqttRun();
 80010fc:	f002 f8f8 	bl	80032f0 <MqttRun>

	while(1)
	{
		//Loopback_Test();

		if (millis()-pre_time >= 500)
 8001100:	f001 fef5 	bl	8002eee <millis>
 8001104:	4602      	mov	r2, r0
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800110e:	d302      	bcc.n	8001116 <apMain+0x62>
		{
		  pre_time = millis();
 8001110:	f001 feed 	bl	8002eee <millis>
 8001114:	6078      	str	r0, [r7, #4]
#ifdef _USE_DBG_
//		  uartPrintf(_DEF_CH1,"Distance: %d\r\n", distance_);
#endif
		}

		cliMain();
 8001116:	f001 f9eb 	bl	80024f0 <cliMain>
		if (millis()-pre_time >= 500)
 800111a:	e7f1      	b.n	8001100 <apMain+0x4c>
 800111c:	08015a4c 	.word	0x08015a4c
 8001120:	08015a00 	.word	0x08015a00
 8001124:	08015a70 	.word	0x08015a70
 8001128:	080159dc 	.word	0x080159dc
 800112c:	08015a8c 	.word	0x08015a8c

08001130 <infoCli>:
#endif
	}//end while
}

void infoCli(uint8_t argc, const char **argv)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800113c:	2300      	movs	r3, #0
 800113e:	75fb      	strb	r3, [r7, #23]


  if (argc == 1 && cliIsStr(argv[0], "test"))
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d10d      	bne.n	8001162 <infoCli+0x32>
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4948      	ldr	r1, [pc, #288]	; (800126c <infoCli+0x13c>)
 800114c:	4618      	mov	r0, r3
 800114e:	f001 f9ab 	bl	80024a8 <cliIsStr>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d004      	beq.n	8001162 <infoCli+0x32>
	{
		cliPrintf("infoCli run test\r\n");
 8001158:	4845      	ldr	r0, [pc, #276]	; (8001270 <infoCli+0x140>)
 800115a:	f001 f991 	bl	8002480 <cliPrintf>
		ret = true;
 800115e:	2301      	movs	r3, #1
 8001160:	75fb      	strb	r3, [r7, #23]
	}

  if (argc == 2 && cliIsStr(argv[0], "print"))
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d123      	bne.n	80011b0 <infoCli+0x80>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4941      	ldr	r1, [pc, #260]	; (8001274 <infoCli+0x144>)
 800116e:	4618      	mov	r0, r3
 8001170:	f001 f99a 	bl	80024a8 <cliIsStr>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d01a      	beq.n	80011b0 <infoCli+0x80>
	{
	  uint8_t count;

	count = (uint8_t)cliGetData(argv[1]);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	3304      	adds	r3, #4
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f001 f9a4 	bl	80024ce <cliGetData>
 8001186:	4603      	mov	r3, r0
 8001188:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<count; i++)
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	e009      	b.n	80011a4 <infoCli+0x74>
	{
	  cliPrintf("print %d/%d\r\n", i+1, count);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	3301      	adds	r3, #1
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	4619      	mov	r1, r3
 8001198:	4837      	ldr	r0, [pc, #220]	; (8001278 <infoCli+0x148>)
 800119a:	f001 f971 	bl	8002480 <cliPrintf>
	for (int i=0; i<count; i++)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	3301      	adds	r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	dbf1      	blt.n	8001190 <infoCli+0x60>
	}

		ret = true;
 80011ac:	2301      	movs	r3, #1
 80011ae:	75fb      	strb	r3, [r7, #23]
	}

  if (argc == 1 && cliIsStr(argv[0], "led_on"))
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d10d      	bne.n	80011d2 <infoCli+0xa2>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4930      	ldr	r1, [pc, #192]	; (800127c <infoCli+0x14c>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 f973 	bl	80024a8 <cliIsStr>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d004      	beq.n	80011d2 <infoCli+0xa2>
	{
		ledOn(_DEF_CH1);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f001 fa57 	bl	800267c <ledOn>
		ret = true;
 80011ce:	2301      	movs	r3, #1
 80011d0:	75fb      	strb	r3, [r7, #23]
	}

  if (argc == 1 && cliIsStr(argv[0], "led_off"))
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d10d      	bne.n	80011f4 <infoCli+0xc4>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4928      	ldr	r1, [pc, #160]	; (8001280 <infoCli+0x150>)
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 f962 	bl	80024a8 <cliIsStr>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d004      	beq.n	80011f4 <infoCli+0xc4>
	{
		ledOff(_DEF_CH1);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f001 fa56 	bl	800269c <ledOff>
		ret = true;
 80011f0:	2301      	movs	r3, #1
 80011f2:	75fb      	strb	r3, [r7, #23]
	}

  if (argc == 1 && cliIsStr(argv[0], "netinfo"))
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d10c      	bne.n	8001214 <infoCli+0xe4>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4921      	ldr	r1, [pc, #132]	; (8001284 <infoCli+0x154>)
 8001200:	4618      	mov	r0, r3
 8001202:	f001 f951 	bl	80024a8 <cliIsStr>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <infoCli+0xe4>
	{
		print_network_information();
 800120c:	f001 ff3c 	bl	8003088 <print_network_information>
		ret = true;
 8001210:	2301      	movs	r3, #1
 8001212:	75fb      	strb	r3, [r7, #23]
	}

  if (argc == 1 && cliIsStr(argv[0], "mqttrun"))
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10c      	bne.n	8001234 <infoCli+0x104>
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	491a      	ldr	r1, [pc, #104]	; (8001288 <infoCli+0x158>)
 8001220:	4618      	mov	r0, r3
 8001222:	f001 f941 	bl	80024a8 <cliIsStr>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <infoCli+0x104>
  	{
	    MqttRun();
 800122c:	f002 f860 	bl	80032f0 <MqttRun>
  		ret = true;
 8001230:	2301      	movs	r3, #1
 8001232:	75fb      	strb	r3, [r7, #23]
  	}

  if (ret == false)
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	f083 0301 	eor.w	r3, r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d011      	beq.n	8001264 <infoCli+0x134>
	{
		cliPrintf("info test\r\n");
 8001240:	4812      	ldr	r0, [pc, #72]	; (800128c <infoCli+0x15c>)
 8001242:	f001 f91d 	bl	8002480 <cliPrintf>
		cliPrintf("info print 0~10\r\n");
 8001246:	4812      	ldr	r0, [pc, #72]	; (8001290 <infoCli+0x160>)
 8001248:	f001 f91a 	bl	8002480 <cliPrintf>
		cliPrintf("info led_on\r\n");
 800124c:	4811      	ldr	r0, [pc, #68]	; (8001294 <infoCli+0x164>)
 800124e:	f001 f917 	bl	8002480 <cliPrintf>
		cliPrintf("info led_off\r\n");
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <infoCli+0x168>)
 8001254:	f001 f914 	bl	8002480 <cliPrintf>
		cliPrintf("info netinfo\r\n");
 8001258:	4810      	ldr	r0, [pc, #64]	; (800129c <infoCli+0x16c>)
 800125a:	f001 f911 	bl	8002480 <cliPrintf>
		cliPrintf("info MQTTRUN\r\n");
 800125e:	4810      	ldr	r0, [pc, #64]	; (80012a0 <infoCli+0x170>)
 8001260:	f001 f90e 	bl	8002480 <cliPrintf>
	}
}
 8001264:	bf00      	nop
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	08015aa8 	.word	0x08015aa8
 8001270:	08015ab0 	.word	0x08015ab0
 8001274:	08015ac4 	.word	0x08015ac4
 8001278:	08015acc 	.word	0x08015acc
 800127c:	08015adc 	.word	0x08015adc
 8001280:	08015ae4 	.word	0x08015ae4
 8001284:	08015aec 	.word	0x08015aec
 8001288:	08015af4 	.word	0x08015af4
 800128c:	08015afc 	.word	0x08015afc
 8001290:	08015b08 	.word	0x08015b08
 8001294:	08015b1c 	.word	0x08015b1c
 8001298:	08015b2c 	.word	0x08015b2c
 800129c:	08015b3c 	.word	0x08015b3c
 80012a0:	08015b4c 	.word	0x08015b4c

080012a4 <adcInit>:
extern ADC_HandleTypeDef hadc1;

uint16_t adc_data[3];

bool adcInit(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  HAL_ADCEx_Calibration_Start(&hadc1);
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <adcInit+0x1c>)
 80012aa:	f003 fb81 	bl	80049b0 <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 3);
 80012ae:	2203      	movs	r2, #3
 80012b0:	4904      	ldr	r1, [pc, #16]	; (80012c4 <adcInit+0x20>)
 80012b2:	4803      	ldr	r0, [pc, #12]	; (80012c0 <adcInit+0x1c>)
 80012b4:	f003 f888 	bl	80043c8 <HAL_ADC_Start_DMA>
  //HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *)adc_data, 3);

  return true;
 80012b8:	2301      	movs	r3, #1
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20003784 	.word	0x20003784
 80012c4:	20001240 	.word	0x20001240

080012c8 <adcRead>:


uint16_t adcRead(uint8_t ch)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	81fb      	strh	r3, [r7, #14]

  switch(ch)
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d105      	bne.n	80012e8 <adcRead+0x20>
  {
  case _DEF_CH1:
	  ret = adc_data[ch];
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <adcRead+0x2c>)
 80012e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e4:	81fb      	strh	r3, [r7, #14]
	  break;
 80012e6:	bf00      	nop
  }


  return ret;
 80012e8:	89fb      	ldrh	r3, [r7, #14]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	20001240 	.word	0x20001240

080012f8 <adcReadVoltage>:

uint32_t adcReadVoltage(uint8_t ch)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  uint32_t ret;
  uint32_t adc_data;


  adc_data = adcRead(ch);
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffdf 	bl	80012c8 <adcRead>
 800130a:	4603      	mov	r3, r0
 800130c:	60fb      	str	r3, [r7, #12]

  ret = (330 * adc_data) / 4096;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001314:	fb02 f303 	mul.w	r3, r2, r3
 8001318:	0b1b      	lsrs	r3, r3, #12
 800131a:	60bb      	str	r3, [r7, #8]

  return ret;
 800131c:	68bb      	ldr	r3, [r7, #8]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <cJSON_strdup+0x1c>
    {
        return NULL;
 800133e:	2300      	movs	r3, #0
 8001340:	e015      	b.n	800136e <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7fe ff0e 	bl	8000164 <strlen>
 8001348:	4603      	mov	r3, r0
 800134a:	3301      	adds	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	4798      	blx	r3
 8001356:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <cJSON_strdup+0x3c>
    {
        return NULL;
 800135e:	2300      	movs	r3, #0
 8001360:	e005      	b.n	800136e <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	68b8      	ldr	r0, [r7, #8]
 8001368:	f012 f8b5 	bl	80134d6 <memcpy>

    return copy;
 800136c:	68bb      	ldr	r3, [r7, #8]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2028      	movs	r0, #40	; 0x28
 8001384:	4798      	blx	r3
 8001386:	60f8      	str	r0, [r7, #12]
    if (node)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d004      	beq.n	8001398 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800138e:	2228      	movs	r2, #40	; 0x28
 8001390:	2100      	movs	r1, #0
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f011 ff9c 	bl	80132d0 <memset>
    }

    return node;
 8001398:	68fb      	ldr	r3, [r7, #12]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80013b0:	e037      	b.n	8001422 <cJSON_Delete+0x7e>
    {
        next = item->next;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d108      	bne.n	80013d6 <cJSON_Delete+0x32>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ffe7 	bl	80013a4 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d109      	bne.n	80013f6 <cJSON_Delete+0x52>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <cJSON_Delete+0x90>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6912      	ldr	r2, [r2, #16]
 80013f2:	4610      	mov	r0, r2
 80013f4:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d109      	bne.n	8001416 <cJSON_Delete+0x72>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <cJSON_Delete+0x90>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6a12      	ldr	r2, [r2, #32]
 8001412:	4610      	mov	r0, r2
 8001414:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <cJSON_Delete+0x90>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	4798      	blx	r3
        item = next;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1c4      	bne.n	80013b2 <cJSON_Delete+0xe>
    }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000000 	.word	0x20000000

08001438 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800143c:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <ensure+0x20>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <ensure+0x24>
    {
        return NULL;
 8001466:	2300      	movs	r3, #0
 8001468:	e083      	b.n	8001572 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <ensure+0x3c>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	d301      	bcc.n	8001482 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800147e:	2300      	movs	r3, #0
 8001480:	e077      	b.n	8001572 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	da01      	bge.n	800148c <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8001488:	2300      	movs	r3, #0
 800148a:	e072      	b.n	8001572 <ensure+0x12c>
    }

    needed += p->offset + 1;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	4413      	add	r3, r2
 8001494:	3301      	adds	r3, #1
 8001496:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d805      	bhi.n	80014ae <ensure+0x68>
    {
        return p->buffer + p->offset;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	4413      	add	r3, r2
 80014ac:	e061      	b.n	8001572 <ensure+0x12c>
    }

    if (p->noalloc) {
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <ensure+0x74>
        return NULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e05b      	b.n	8001572 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c0:	d308      	bcc.n	80014d4 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db03      	blt.n	80014d0 <ensure+0x8a>
        {
            newsize = INT_MAX;
 80014c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	e004      	b.n	80014da <ensure+0x94>
        }
        else
        {
            return NULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e04e      	b.n	8001572 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d018      	beq.n	8001514 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	4610      	mov	r0, r2
 80014ee:	4798      	blx	r3
 80014f0:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d132      	bne.n	800155e <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	4610      	mov	r0, r2
 8001502:	4798      	blx	r3
            p->length = 0;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

            return NULL;
 8001510:	2300      	movs	r3, #0
 8001512:	e02e      	b.n	8001572 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	68b8      	ldr	r0, [r7, #8]
 800151a:	4798      	blx	r3
 800151c:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10d      	bne.n	8001540 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	4610      	mov	r0, r2
 800152e:	4798      	blx	r3
            p->length = 0;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

            return NULL;
 800153c:	2300      	movs	r3, #0
 800153e:	e018      	b.n	8001572 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6819      	ldr	r1, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	3301      	adds	r3, #1
 800154a:	461a      	mov	r2, r3
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f011 ffc2 	bl	80134d6 <memcpy>
        p->hooks.deallocate(p->buffer);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	4610      	mov	r0, r2
 800155c:	4798      	blx	r3
    }
    p->length = newsize;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4413      	add	r3, r2
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800157a:	b590      	push	{r4, r7, lr}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <update_offset+0x3a>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00f      	beq.n	80015b4 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4413      	add	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689c      	ldr	r4, [r3, #8]
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f7fe fddd 	bl	8000164 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	18e2      	adds	r2, r4, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	e000      	b.n	80015b6 <update_offset+0x3c>
        return;
 80015b4:	bf00      	nop
}
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}

080015bc <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 80015bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015c0:	b08a      	sub	sp, #40	; 0x28
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80015c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015ec:	f7ff fa0e 	bl	8000a0c <__aeabi_dcmpgt>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d004      	beq.n	8001600 <compare_double+0x44>
 80015f6:	69bc      	ldr	r4, [r7, #24]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80015fe:	e003      	b.n	8001608 <compare_double+0x4c>
 8001600:	693c      	ldr	r4, [r7, #16]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001608:	e9c7 4508 	strd	r4, r5, [r7, #32]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800160c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001610:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001614:	f7fe fdb2 	bl	800017c <__aeabi_dsub>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4690      	mov	r8, r2
 800161e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <compare_double+0x9c>)
 8001628:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800162c:	f7fe ff5e 	bl	80004ec <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	2101      	movs	r1, #1
 8001636:	460c      	mov	r4, r1
 8001638:	4640      	mov	r0, r8
 800163a:	4649      	mov	r1, r9
 800163c:	f7ff f9d2 	bl	80009e4 <__aeabi_dcmple>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <compare_double+0x8e>
 8001646:	2300      	movs	r3, #0
 8001648:	461c      	mov	r4, r3
 800164a:	b2e3      	uxtb	r3, r4
}
 800164c:	4618      	mov	r0, r3
 800164e:	3728      	adds	r7, #40	; 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001656:	bf00      	nop
 8001658:	3cb00000 	.word	0x3cb00000

0800165c <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 800165c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165e:	b093      	sub	sp, #76	; 0x4c
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001666:	2300      	movs	r3, #0
 8001668:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001670:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	f107 0318 	add.w	r3, r7, #24
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
 8001690:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8001692:	f7ff fed1 	bl	8001438 <get_decimal_point>
 8001696:	4603      	mov	r3, r0
 8001698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <print_number+0x56>
    {
        return false;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e0b0      	b.n	8001814 <print_number+0x1b8>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 80016b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80016ba:	f7ff f9b1 	bl	8000a20 <__aeabi_dcmpun>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d121      	bne.n	8001708 <print_number+0xac>
 80016c4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80016c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80016cc:	2301      	movs	r3, #1
 80016ce:	461e      	mov	r6, r3
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295
 80016d4:	4b51      	ldr	r3, [pc, #324]	; (800181c <print_number+0x1c0>)
 80016d6:	4620      	mov	r0, r4
 80016d8:	4629      	mov	r1, r5
 80016da:	f7ff f9a1 	bl	8000a20 <__aeabi_dcmpun>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10b      	bne.n	80016fc <print_number+0xa0>
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	4b4c      	ldr	r3, [pc, #304]	; (800181c <print_number+0x1c0>)
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7ff f979 	bl	80009e4 <__aeabi_dcmple>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <print_number+0xa0>
 80016f8:	2300      	movs	r3, #0
 80016fa:	461e      	mov	r6, r3
 80016fc:	b2f3      	uxtb	r3, r6
 80016fe:	f083 0301 	eor.w	r3, r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d007      	beq.n	8001718 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4944      	ldr	r1, [pc, #272]	; (8001820 <print_number+0x1c4>)
 800170e:	4618      	mov	r0, r3
 8001710:	f011 fc80 	bl	8013014 <siprintf>
 8001714:	6478      	str	r0, [r7, #68]	; 0x44
 8001716:	e03b      	b.n	8001790 <print_number+0x134>
    }
	else if(d == (double)item->valueint)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fe7b 	bl	8000418 <__aeabi_i2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800172a:	f7ff f947 	bl	80009bc <__aeabi_dcmpeq>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d009      	beq.n	8001748 <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4939      	ldr	r1, [pc, #228]	; (8001824 <print_number+0x1c8>)
 800173e:	4618      	mov	r0, r3
 8001740:	f011 fc68 	bl	8013014 <siprintf>
 8001744:	6478      	str	r0, [r7, #68]	; 0x44
 8001746:	e023      	b.n	8001790 <print_number+0x134>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001748:	f107 0014 	add.w	r0, r7, #20
 800174c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001750:	4935      	ldr	r1, [pc, #212]	; (8001828 <print_number+0x1cc>)
 8001752:	f011 fc5f 	bl	8013014 <siprintf>
 8001756:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001758:	f107 0208 	add.w	r2, r7, #8
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4932      	ldr	r1, [pc, #200]	; (800182c <print_number+0x1d0>)
 8001762:	4618      	mov	r0, r3
 8001764:	f011 fc76 	bl	8013054 <siscanf>
 8001768:	4603      	mov	r3, r0
 800176a:	2b01      	cmp	r3, #1
 800176c:	d108      	bne.n	8001780 <print_number+0x124>
 800176e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001772:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001776:	f7ff ff21 	bl	80015bc <compare_double>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <print_number+0x134>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001780:	f107 0014 	add.w	r0, r7, #20
 8001784:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001788:	4929      	ldr	r1, [pc, #164]	; (8001830 <print_number+0x1d4>)
 800178a:	f011 fc43 	bl	8013014 <siprintf>
 800178e:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001792:	2b00      	cmp	r3, #0
 8001794:	db02      	blt.n	800179c <print_number+0x140>
 8001796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001798:	2b19      	cmp	r3, #25
 800179a:	dd01      	ble.n	80017a0 <print_number+0x144>
    {
        return false;
 800179c:	2300      	movs	r3, #0
 800179e:	e039      	b.n	8001814 <print_number+0x1b8>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 80017a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a2:	3301      	adds	r3, #1
 80017a4:	4619      	mov	r1, r3
 80017a6:	6838      	ldr	r0, [r7, #0]
 80017a8:	f7ff fe4d 	bl	8001446 <ensure>
 80017ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 80017ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <print_number+0x15c>
    {
        return false;
 80017b4:	2300      	movs	r3, #0
 80017b6:	e02d      	b.n	8001814 <print_number+0x1b8>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	643b      	str	r3, [r7, #64]	; 0x40
 80017bc:	e01a      	b.n	80017f4 <print_number+0x198>
    {
        if (number_buffer[i] == decimal_point)
 80017be:	f107 0214 	add.w	r2, r7, #20
 80017c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017c4:	4413      	add	r3, r2
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d105      	bne.n	80017dc <print_number+0x180>
        {
            output_pointer[i] = '.';
 80017d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d4:	4413      	add	r3, r2
 80017d6:	222e      	movs	r2, #46	; 0x2e
 80017d8:	701a      	strb	r2, [r3, #0]
            continue;
 80017da:	e008      	b.n	80017ee <print_number+0x192>
        }

        output_pointer[i] = number_buffer[i];
 80017dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e0:	4413      	add	r3, r2
 80017e2:	f107 0114 	add.w	r1, r7, #20
 80017e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017e8:	440a      	add	r2, r1
 80017ea:	7812      	ldrb	r2, [r2, #0]
 80017ec:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 80017ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017f0:	3301      	adds	r3, #1
 80017f2:	643b      	str	r3, [r7, #64]	; 0x40
 80017f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d3e0      	bcc.n	80017be <print_number+0x162>
    }
    output_pointer[i] = '\0';
 80017fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001800:	4413      	add	r3, r2
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800180c:	441a      	add	r2, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	609a      	str	r2, [r3, #8]

    return true;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	374c      	adds	r7, #76	; 0x4c
 8001818:	46bd      	mov	sp, r7
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	7fefffff 	.word	0x7fefffff
 8001820:	08015b68 	.word	0x08015b68
 8001824:	08015b70 	.word	0x08015b70
 8001828:	08015b74 	.word	0x08015b74
 800182c:	08015b7c 	.word	0x08015b7c
 8001830:	08015b80 	.word	0x08015b80

08001834 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <print_string_ptr+0x28>
    {
        return false;
 8001858:	2300      	movs	r3, #0
 800185a:	e110      	b.n	8001a7e <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d111      	bne.n	8001886 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001862:	2103      	movs	r1, #3
 8001864:	6838      	ldr	r0, [r7, #0]
 8001866:	f7ff fdee 	bl	8001446 <ensure>
 800186a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <print_string_ptr+0x42>
        {
            return false;
 8001872:	2300      	movs	r3, #0
 8001874:	e103      	b.n	8001a7e <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4a83      	ldr	r2, [pc, #524]	; (8001a88 <print_string_ptr+0x254>)
 800187a:	8811      	ldrh	r1, [r2, #0]
 800187c:	7892      	ldrb	r2, [r2, #2]
 800187e:	8019      	strh	r1, [r3, #0]
 8001880:	709a      	strb	r2, [r3, #2]

        return true;
 8001882:	2301      	movs	r3, #1
 8001884:	e0fb      	b.n	8001a7e <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	e024      	b.n	80018d6 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b22      	cmp	r3, #34	; 0x22
 8001892:	dc0f      	bgt.n	80018b4 <print_string_ptr+0x80>
 8001894:	2b08      	cmp	r3, #8
 8001896:	db13      	blt.n	80018c0 <print_string_ptr+0x8c>
 8001898:	3b08      	subs	r3, #8
 800189a:	4a7c      	ldr	r2, [pc, #496]	; (8001a8c <print_string_ptr+0x258>)
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	bf14      	ite	ne
 80018a8:	2301      	movne	r3, #1
 80018aa:	2300      	moveq	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <print_string_ptr+0x84>
 80018b2:	e005      	b.n	80018c0 <print_string_ptr+0x8c>
 80018b4:	2b5c      	cmp	r3, #92	; 0x5c
 80018b6:	d103      	bne.n	80018c0 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
                break;
 80018be:	e007      	b.n	80018d0 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b1f      	cmp	r3, #31
 80018c6:	d802      	bhi.n	80018ce <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3305      	adds	r3, #5
 80018cc:	617b      	str	r3, [r7, #20]
                }
                break;
 80018ce:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	3301      	adds	r3, #1
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1d6      	bne.n	800188c <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	4413      	add	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3303      	adds	r3, #3
 80018f0:	4619      	mov	r1, r3
 80018f2:	6838      	ldr	r0, [r7, #0]
 80018f4:	f7ff fda7 	bl	8001446 <ensure>
 80018f8:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <print_string_ptr+0xd0>
    {
        return false;
 8001900:	2300      	movs	r3, #0
 8001902:	e0bc      	b.n	8001a7e <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d117      	bne.n	800193a <print_string_ptr+0x106>
    {
        output[0] = '\"';
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	2222      	movs	r2, #34	; 0x22
 800190e:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	3301      	adds	r3, #1
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	f011 fddc 	bl	80134d6 <memcpy>
        output[output_length + 1] = '\"';
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4413      	add	r3, r2
 8001926:	2222      	movs	r2, #34	; 0x22
 8001928:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3302      	adds	r3, #2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4413      	add	r3, r2
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]

        return true;
 8001936:	2301      	movs	r3, #1
 8001938:	e0a1      	b.n	8001a7e <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	2222      	movs	r2, #34	; 0x22
 800193e:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	3301      	adds	r3, #1
 8001944:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	e086      	b.n	8001a5a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b1f      	cmp	r3, #31
 8001952:	d90c      	bls.n	800196e <print_string_ptr+0x13a>
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b22      	cmp	r3, #34	; 0x22
 800195a:	d008      	beq.n	800196e <print_string_ptr+0x13a>
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b5c      	cmp	r3, #92	; 0x5c
 8001962:	d004      	beq.n	800196e <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	781a      	ldrb	r2, [r3, #0]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e06f      	b.n	8001a4e <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	61ba      	str	r2, [r7, #24]
 8001974:	225c      	movs	r2, #92	; 0x5c
 8001976:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b22      	cmp	r3, #34	; 0x22
 800197e:	dc3d      	bgt.n	80019fc <print_string_ptr+0x1c8>
 8001980:	2b08      	cmp	r3, #8
 8001982:	db59      	blt.n	8001a38 <print_string_ptr+0x204>
 8001984:	3b08      	subs	r3, #8
 8001986:	2b1a      	cmp	r3, #26
 8001988:	d856      	bhi.n	8001a38 <print_string_ptr+0x204>
 800198a:	a201      	add	r2, pc, #4	; (adr r2, 8001990 <print_string_ptr+0x15c>)
 800198c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001990:	08001a11 	.word	0x08001a11
 8001994:	08001a31 	.word	0x08001a31
 8001998:	08001a21 	.word	0x08001a21
 800199c:	08001a39 	.word	0x08001a39
 80019a0:	08001a19 	.word	0x08001a19
 80019a4:	08001a29 	.word	0x08001a29
 80019a8:	08001a39 	.word	0x08001a39
 80019ac:	08001a39 	.word	0x08001a39
 80019b0:	08001a39 	.word	0x08001a39
 80019b4:	08001a39 	.word	0x08001a39
 80019b8:	08001a39 	.word	0x08001a39
 80019bc:	08001a39 	.word	0x08001a39
 80019c0:	08001a39 	.word	0x08001a39
 80019c4:	08001a39 	.word	0x08001a39
 80019c8:	08001a39 	.word	0x08001a39
 80019cc:	08001a39 	.word	0x08001a39
 80019d0:	08001a39 	.word	0x08001a39
 80019d4:	08001a39 	.word	0x08001a39
 80019d8:	08001a39 	.word	0x08001a39
 80019dc:	08001a39 	.word	0x08001a39
 80019e0:	08001a39 	.word	0x08001a39
 80019e4:	08001a39 	.word	0x08001a39
 80019e8:	08001a39 	.word	0x08001a39
 80019ec:	08001a39 	.word	0x08001a39
 80019f0:	08001a39 	.word	0x08001a39
 80019f4:	08001a39 	.word	0x08001a39
 80019f8:	08001a09 	.word	0x08001a09
 80019fc:	2b5c      	cmp	r3, #92	; 0x5c
 80019fe:	d11b      	bne.n	8001a38 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	225c      	movs	r2, #92	; 0x5c
 8001a04:	701a      	strb	r2, [r3, #0]
                    break;
 8001a06:	e022      	b.n	8001a4e <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2222      	movs	r2, #34	; 0x22
 8001a0c:	701a      	strb	r2, [r3, #0]
                    break;
 8001a0e:	e01e      	b.n	8001a4e <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2262      	movs	r2, #98	; 0x62
 8001a14:	701a      	strb	r2, [r3, #0]
                    break;
 8001a16:	e01a      	b.n	8001a4e <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2266      	movs	r2, #102	; 0x66
 8001a1c:	701a      	strb	r2, [r3, #0]
                    break;
 8001a1e:	e016      	b.n	8001a4e <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	226e      	movs	r2, #110	; 0x6e
 8001a24:	701a      	strb	r2, [r3, #0]
                    break;
 8001a26:	e012      	b.n	8001a4e <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2272      	movs	r2, #114	; 0x72
 8001a2c:	701a      	strb	r2, [r3, #0]
                    break;
 8001a2e:	e00e      	b.n	8001a4e <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2274      	movs	r2, #116	; 0x74
 8001a34:	701a      	strb	r2, [r3, #0]
                    break;
 8001a36:	e00a      	b.n	8001a4e <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4914      	ldr	r1, [pc, #80]	; (8001a90 <print_string_ptr+0x25c>)
 8001a40:	69b8      	ldr	r0, [r7, #24]
 8001a42:	f011 fae7 	bl	8013014 <siprintf>
                    output_pointer += 4;
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	61bb      	str	r3, [r7, #24]
                    break;
 8001a4c:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3301      	adds	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	3301      	adds	r3, #1
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f47f af74 	bne.w	800194c <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3301      	adds	r3, #1
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	2222      	movs	r2, #34	; 0x22
 8001a6e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3302      	adds	r3, #2
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4413      	add	r3, r2
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]

    return true;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3720      	adds	r7, #32
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	08015b88 	.word	0x08015b88
 8001a8c:	04000037 	.word	0x04000037
 8001a90:	08015b8c 	.word	0x08015b8c

08001a94 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	6839      	ldr	r1, [r7, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fec5 	bl	8001834 <print_string_ptr>
 8001aaa:	4603      	mov	r3, r0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	; 0x38
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	2224      	movs	r2, #36	; 0x24
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f011 fbff 	bl	80132d0 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a38      	ldr	r2, [pc, #224]	; (8001bb8 <print+0x104>)
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	4610      	mov	r0, r2
 8001adc:	4798      	blx	r3
 8001ade:	4603      	mov	r3, r0
 8001ae0:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8001ae2:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <print+0x104>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001af4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d040      	beq.n	8001b80 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8001afe:	f107 0310 	add.w	r3, r7, #16
 8001b02:	4619      	mov	r1, r3
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 f869 	bl	8001bdc <print_value>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d039      	beq.n	8001b84 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fd30 	bl	800157a <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00d      	beq.n	8001b3e <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	6938      	ldr	r0, [r7, #16]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	3201      	adds	r2, #1
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4798      	blx	r3
 8001b30:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 8001b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d027      	beq.n	8001b88 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	e01e      	b.n	8001b7c <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	3201      	adds	r2, #1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4798      	blx	r3
 8001b4a:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d01c      	beq.n	8001b8c <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8001b52:	6939      	ldr	r1, [r7, #16]
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	bf28      	it	cs
 8001b5e:	4613      	movcs	r3, r2
 8001b60:	461a      	mov	r2, r3
 8001b62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b64:	f011 fcb7 	bl	80134d6 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b6c:	4413      	add	r3, r2
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4798      	blx	r3
    }

    return printed;
 8001b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7e:	e016      	b.n	8001bae <print+0xfa>
        goto fail;
 8001b80:	bf00      	nop
 8001b82:	e004      	b.n	8001b8e <print+0xda>
        goto fail;
 8001b84:	bf00      	nop
 8001b86:	e002      	b.n	8001b8e <print+0xda>
            goto fail;
 8001b88:	bf00      	nop
 8001b8a:	e000      	b.n	8001b8e <print+0xda>
            goto fail;
 8001b8c:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4798      	blx	r3
    }

    if (printed != NULL)
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <print+0xf8>
    {
        hooks->deallocate(printed);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001baa:	4798      	blx	r3
    }

    return NULL;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3738      	adds	r7, #56	; 0x38
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	0801615c 	.word	0x0801615c

08001bbc <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <cJSON_Print+0x1c>)
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff73 	bl	8001ab4 <print>
 8001bce:	4603      	mov	r3, r0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000000 	.word	0x20000000

08001bdc <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <print_value+0x1a>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <print_value+0x1e>
    {
        return false;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e0c9      	b.n	8001d8e <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b80      	cmp	r3, #128	; 0x80
 8001c02:	f000 808e 	beq.w	8001d22 <print_value+0x146>
 8001c06:	2b80      	cmp	r3, #128	; 0x80
 8001c08:	f300 80c0 	bgt.w	8001d8c <print_value+0x1b0>
 8001c0c:	2b20      	cmp	r3, #32
 8001c0e:	dc49      	bgt.n	8001ca4 <print_value+0xc8>
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f340 80bb 	ble.w	8001d8c <print_value+0x1b0>
 8001c16:	3b01      	subs	r3, #1
 8001c18:	2b1f      	cmp	r3, #31
 8001c1a:	f200 80b7 	bhi.w	8001d8c <print_value+0x1b0>
 8001c1e:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <print_value+0x48>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001ccf 	.word	0x08001ccf
 8001c28:	08001cf3 	.word	0x08001cf3
 8001c2c:	08001d8d 	.word	0x08001d8d
 8001c30:	08001cab 	.word	0x08001cab
 8001c34:	08001d8d 	.word	0x08001d8d
 8001c38:	08001d8d 	.word	0x08001d8d
 8001c3c:	08001d8d 	.word	0x08001d8d
 8001c40:	08001d17 	.word	0x08001d17
 8001c44:	08001d8d 	.word	0x08001d8d
 8001c48:	08001d8d 	.word	0x08001d8d
 8001c4c:	08001d8d 	.word	0x08001d8d
 8001c50:	08001d8d 	.word	0x08001d8d
 8001c54:	08001d8d 	.word	0x08001d8d
 8001c58:	08001d8d 	.word	0x08001d8d
 8001c5c:	08001d8d 	.word	0x08001d8d
 8001c60:	08001d69 	.word	0x08001d69
 8001c64:	08001d8d 	.word	0x08001d8d
 8001c68:	08001d8d 	.word	0x08001d8d
 8001c6c:	08001d8d 	.word	0x08001d8d
 8001c70:	08001d8d 	.word	0x08001d8d
 8001c74:	08001d8d 	.word	0x08001d8d
 8001c78:	08001d8d 	.word	0x08001d8d
 8001c7c:	08001d8d 	.word	0x08001d8d
 8001c80:	08001d8d 	.word	0x08001d8d
 8001c84:	08001d8d 	.word	0x08001d8d
 8001c88:	08001d8d 	.word	0x08001d8d
 8001c8c:	08001d8d 	.word	0x08001d8d
 8001c90:	08001d8d 	.word	0x08001d8d
 8001c94:	08001d8d 	.word	0x08001d8d
 8001c98:	08001d8d 	.word	0x08001d8d
 8001c9c:	08001d8d 	.word	0x08001d8d
 8001ca0:	08001d75 	.word	0x08001d75
 8001ca4:	2b40      	cmp	r3, #64	; 0x40
 8001ca6:	d06b      	beq.n	8001d80 <print_value+0x1a4>
 8001ca8:	e070      	b.n	8001d8c <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8001caa:	2105      	movs	r1, #5
 8001cac:	6838      	ldr	r0, [r7, #0]
 8001cae:	f7ff fbca 	bl	8001446 <ensure>
 8001cb2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <print_value+0xe2>
            {
                return false;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e067      	b.n	8001d8e <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4a35      	ldr	r2, [pc, #212]	; (8001d98 <print_value+0x1bc>)
 8001cc2:	6810      	ldr	r0, [r2, #0]
 8001cc4:	6018      	str	r0, [r3, #0]
 8001cc6:	7912      	ldrb	r2, [r2, #4]
 8001cc8:	711a      	strb	r2, [r3, #4]
            return true;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e05f      	b.n	8001d8e <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8001cce:	2106      	movs	r1, #6
 8001cd0:	6838      	ldr	r0, [r7, #0]
 8001cd2:	f7ff fbb8 	bl	8001446 <ensure>
 8001cd6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <print_value+0x106>
            {
                return false;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e055      	b.n	8001d8e <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4a2d      	ldr	r2, [pc, #180]	; (8001d9c <print_value+0x1c0>)
 8001ce6:	6810      	ldr	r0, [r2, #0]
 8001ce8:	6018      	str	r0, [r3, #0]
 8001cea:	8892      	ldrh	r2, [r2, #4]
 8001cec:	809a      	strh	r2, [r3, #4]
            return true;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e04d      	b.n	8001d8e <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8001cf2:	2105      	movs	r1, #5
 8001cf4:	6838      	ldr	r0, [r7, #0]
 8001cf6:	f7ff fba6 	bl	8001446 <ensure>
 8001cfa:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <print_value+0x12a>
            {
                return false;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e043      	b.n	8001d8e <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4a25      	ldr	r2, [pc, #148]	; (8001da0 <print_value+0x1c4>)
 8001d0a:	6810      	ldr	r0, [r2, #0]
 8001d0c:	6018      	str	r0, [r3, #0]
 8001d0e:	7912      	ldrb	r2, [r2, #4]
 8001d10:	711a      	strb	r2, [r3, #4]
            return true;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e03b      	b.n	8001d8e <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff fc9f 	bl	800165c <print_number>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	e035      	b.n	8001d8e <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <print_value+0x156>
            {
                return false;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e02d      	b.n	8001d8e <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fa14 	bl	8000164 <strlen>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	3301      	adds	r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	6838      	ldr	r0, [r7, #0]
 8001d46:	f7ff fb7e 	bl	8001446 <ensure>
 8001d4a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <print_value+0x17a>
            {
                return false;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e01b      	b.n	8001d8e <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f011 fbb9 	bl	80134d6 <memcpy>
            return true;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e012      	b.n	8001d8e <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8001d68:	6839      	ldr	r1, [r7, #0]
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff fe92 	bl	8001a94 <print_string>
 8001d70:	4603      	mov	r3, r0
 8001d72:	e00c      	b.n	8001d8e <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8001d74:	6839      	ldr	r1, [r7, #0]
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f814 	bl	8001da4 <print_array>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	e006      	b.n	8001d8e <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f894 	bl	8001eb0 <print_object>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	e000      	b.n	8001d8e <print_value+0x1b2>

        default:
            return false;
 8001d8c:	2300      	movs	r3, #0
    }
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	08015b68 	.word	0x08015b68
 8001d9c:	08015b98 	.word	0x08015b98
 8001da0:	08015ba0 	.word	0x08015ba0

08001da4 <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <print_array+0x22>
    {
        return false;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e070      	b.n	8001ea8 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	6838      	ldr	r0, [r7, #0]
 8001dca:	f7ff fb3c 	bl	8001446 <ensure>
 8001dce:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <print_array+0x36>
    {
        return false;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e066      	b.n	8001ea8 <print_array+0x104>
    }

    *output_pointer = '[';
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	225b      	movs	r2, #91	; 0x5b
 8001dde:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8001df4:	e03d      	b.n	8001e72 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	6938      	ldr	r0, [r7, #16]
 8001dfa:	f7ff feef 	bl	8001bdc <print_value>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <print_array+0x64>
        {
            return false;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e04f      	b.n	8001ea8 <print_array+0x104>
        }
        update_offset(output_buffer);
 8001e08:	6838      	ldr	r0, [r7, #0]
 8001e0a:	f7ff fbb6 	bl	800157a <update_offset>
        if (current_element->next)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d02a      	beq.n	8001e6c <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <print_array+0x7e>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e000      	b.n	8001e24 <print_array+0x80>
 8001e22:	2301      	movs	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6838      	ldr	r0, [r7, #0]
 8001e2e:	f7ff fb0a 	bl	8001446 <ensure>
 8001e32:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <print_array+0x9a>
            {
                return false;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e034      	b.n	8001ea8 <print_array+0x104>
            }
            *output_pointer++ = ',';
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	617a      	str	r2, [r7, #20]
 8001e44:	222c      	movs	r2, #44	; 0x2c
 8001e46:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d004      	beq.n	8001e5a <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	617a      	str	r2, [r7, #20]
 8001e56:	2220      	movs	r2, #32
 8001e58:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	441a      	add	r2, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1be      	bne.n	8001df6 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8001e78:	2102      	movs	r1, #2
 8001e7a:	6838      	ldr	r0, [r7, #0]
 8001e7c:	f7ff fae3 	bl	8001446 <ensure>
 8001e80:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <print_array+0xe8>
    {
        return false;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e00d      	b.n	8001ea8 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	617a      	str	r2, [r7, #20]
 8001e92:	225d      	movs	r2, #93	; 0x5d
 8001e94:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	1e5a      	subs	r2, r3, #1
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	60da      	str	r2, [r3, #12]

    return true;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <print_object+0x22>
    {
        return false;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e108      	b.n	80020e4 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <print_object+0x2e>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e000      	b.n	8001ee0 <print_object+0x30>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6838      	ldr	r0, [r7, #0]
 8001eea:	f7ff faac 	bl	8001446 <ensure>
 8001eee:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <print_object+0x4a>
    {
        return false;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e0f4      	b.n	80020e4 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	61fa      	str	r2, [r7, #28]
 8001f00:	227b      	movs	r2, #123	; 0x7b
 8001f02:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d004      	beq.n	8001f20 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	61fa      	str	r2, [r7, #28]
 8001f1c:	220a      	movs	r2, #10
 8001f1e:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	441a      	add	r2, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	609a      	str	r2, [r3, #8]

    while (current_item)
 8001f2c:	e0a0      	b.n	8002070 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d022      	beq.n	8001f7c <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	6838      	ldr	r0, [r7, #0]
 8001f3e:	f7ff fa82 	bl	8001446 <ensure>
 8001f42:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <print_object+0x9e>
            {
                return false;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e0ca      	b.n	80020e4 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e007      	b.n	8001f64 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	61fa      	str	r2, [r7, #28]
 8001f5a:	2209      	movs	r2, #9
 8001f5c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d3f2      	bcc.n	8001f54 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	441a      	add	r2, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	6839      	ldr	r1, [r7, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fc56 	bl	8001834 <print_string_ptr>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <print_object+0xe2>
        {
            return false;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e0a8      	b.n	80020e4 <print_object+0x234>
        }
        update_offset(output_buffer);
 8001f92:	6838      	ldr	r0, [r7, #0]
 8001f94:	f7ff faf1 	bl	800157a <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <print_object+0xf4>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e000      	b.n	8001fa6 <print_object+0xf6>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8001fa8:	68f9      	ldr	r1, [r7, #12]
 8001faa:	6838      	ldr	r0, [r7, #0]
 8001fac:	f7ff fa4b 	bl	8001446 <ensure>
 8001fb0:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <print_object+0x10c>
        {
            return false;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e093      	b.n	80020e4 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	61fa      	str	r2, [r7, #28]
 8001fc2:	223a      	movs	r2, #58	; 0x3a
 8001fc4:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d004      	beq.n	8001fd8 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	61fa      	str	r2, [r7, #28]
 8001fd4:	2209      	movs	r2, #9
 8001fd6:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	441a      	add	r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8001fe4:	6839      	ldr	r1, [r7, #0]
 8001fe6:	69b8      	ldr	r0, [r7, #24]
 8001fe8:	f7ff fdf8 	bl	8001bdc <print_value>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <print_object+0x146>
        {
            return false;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e076      	b.n	80020e4 <print_object+0x234>
        }
        update_offset(output_buffer);
 8001ff6:	6838      	ldr	r0, [r7, #0]
 8001ff8:	f7ff fabf 	bl	800157a <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <print_object+0x158>
 8002004:	2201      	movs	r2, #1
 8002006:	e000      	b.n	800200a <print_object+0x15a>
 8002008:	2200      	movs	r2, #0
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <print_object+0x166>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <print_object+0x168>
 8002016:	2300      	movs	r3, #0
 8002018:	4413      	add	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3301      	adds	r3, #1
 8002020:	4619      	mov	r1, r3
 8002022:	6838      	ldr	r0, [r7, #0]
 8002024:	f7ff fa0f 	bl	8001446 <ensure>
 8002028:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <print_object+0x184>
        {
            return false;
 8002030:	2300      	movs	r3, #0
 8002032:	e057      	b.n	80020e4 <print_object+0x234>
        }
        if (current_item->next)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d004      	beq.n	8002046 <print_object+0x196>
        {
            *output_pointer++ = ',';
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	61fa      	str	r2, [r7, #28]
 8002042:	222c      	movs	r2, #44	; 0x2c
 8002044:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	61fa      	str	r2, [r7, #28]
 8002054:	220a      	movs	r2, #10
 8002056:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	441a      	add	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f47f af5b 	bne.w	8001f2e <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <print_object+0x1d8>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	3301      	adds	r3, #1
 8002086:	e000      	b.n	800208a <print_object+0x1da>
 8002088:	2302      	movs	r3, #2
 800208a:	4619      	mov	r1, r3
 800208c:	6838      	ldr	r0, [r7, #0]
 800208e:	f7ff f9da 	bl	8001446 <ensure>
 8002092:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <print_object+0x1ee>
    {
        return false;
 800209a:	2300      	movs	r3, #0
 800209c:	e022      	b.n	80020e4 <print_object+0x234>
    }
    if (output_buffer->format)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d010      	beq.n	80020c8 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	e007      	b.n	80020bc <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	61fa      	str	r2, [r7, #28]
 80020b2:	2209      	movs	r2, #9
 80020b4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	3301      	adds	r3, #1
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d3f1      	bcc.n	80020ac <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	61fa      	str	r2, [r7, #28]
 80020ce:	227d      	movs	r2, #125	; 0x7d
 80020d0:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	1e5a      	subs	r2, r3, #1
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	60da      	str	r2, [r3, #12]

    return true;
 80020e2:	2301      	movs	r3, #1
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3720      	adds	r7, #32
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
    prev->next = item;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	605a      	str	r2, [r3, #4]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <add_item_to_array+0x22>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <add_item_to_array+0x22>
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d101      	bne.n	8002132 <add_item_to_array+0x26>
    {
        return false;
 800212e:	2300      	movs	r3, #0
 8002130:	e01e      	b.n	8002170 <add_item_to_array+0x64>
    }

    child = array->child;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e00d      	b.n	800216e <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d009      	beq.n	800216e <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	6839      	ldr	r1, [r7, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ffc3 	bl	80020ec <suffix_object>
            array->child->prev = item;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800216e:	2301      	movs	r3, #1
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8002180:	687b      	ldr	r3, [r7, #4]
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <add_item_to_object+0x30>
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d006      	beq.n	80021bc <add_item_to_object+0x30>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <add_item_to_object+0x30>
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d101      	bne.n	80021c0 <add_item_to_object+0x34>
    {
        return false;
 80021bc:	2300      	movs	r3, #0
 80021be:	e036      	b.n	800222e <add_item_to_object+0xa2>
    }

    if (constant_key)
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 80021c6:	68b8      	ldr	r0, [r7, #8]
 80021c8:	f7ff ffd6 	bl	8002178 <cast_away_const>
 80021cc:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	e00e      	b.n	80021f8 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	68b8      	ldr	r0, [r7, #8]
 80021de:	f7ff f8a2 	bl	8001326 <cJSON_strdup>
 80021e2:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <add_item_to_object+0x62>
        {
            return false;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e01f      	b.n	800222e <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021f6:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002200:	2b00      	cmp	r3, #0
 8002202:	d109      	bne.n	8002218 <add_item_to_object+0x8c>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6a12      	ldr	r2, [r2, #32]
 8002214:	4610      	mov	r0, r2
 8002216:	4798      	blx	r3
    }

    item->string = new_key;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f7ff ff70 	bl	800210c <add_item_to_array>
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af02      	add	r7, sp, #8
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 8002244:	2300      	movs	r3, #0
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <cJSON_AddItemToObject+0x28>)
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f7ff ff9c 	bl	800218c <add_item_to_object>
 8002254:	4603      	mov	r3, r0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000000 	.word	0x20000000
 8002264:	00000000 	.word	0x00000000

08002268 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	e9c7 0100 	strd	r0, r1, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002272:	481f      	ldr	r0, [pc, #124]	; (80022f0 <cJSON_CreateNumber+0x88>)
 8002274:	f7ff f87f 	bl	8001376 <cJSON_New_Item>
 8002278:	60f8      	str	r0, [r7, #12]
    if(item)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d02c      	beq.n	80022da <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2208      	movs	r2, #8
 8002284:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8002286:	68f9      	ldr	r1, [r7, #12]
 8002288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800228c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8002290:	a315      	add	r3, pc, #84	; (adr r3, 80022e8 <cJSON_CreateNumber+0x80>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	e9d7 0100 	ldrd	r0, r1, [r7]
 800229a:	f7fe fbad 	bl	80009f8 <__aeabi_dcmpge>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80022aa:	615a      	str	r2, [r3, #20]
 80022ac:	e015      	b.n	80022da <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <cJSON_CreateNumber+0x8c>)
 80022b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022b8:	f7fe fb94 	bl	80009e4 <__aeabi_dcmple>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80022c8:	615a      	str	r2, [r3, #20]
 80022ca:	e006      	b.n	80022da <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 80022cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022d0:	f7fe fbbc 	bl	8000a4c <__aeabi_d2iz>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 80022da:	68fb      	ldr	r3, [r7, #12]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	f3af 8000 	nop.w
 80022e8:	ffc00000 	.word	0xffc00000
 80022ec:	41dfffff 	.word	0x41dfffff
 80022f0:	20000000 	.word	0x20000000
 80022f4:	c1e00000 	.word	0xc1e00000

080022f8 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002300:	480f      	ldr	r0, [pc, #60]	; (8002340 <cJSON_CreateString+0x48>)
 8002302:	f7ff f838 	bl	8001376 <cJSON_New_Item>
 8002306:	60f8      	str	r0, [r7, #12]
    if(item)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d012      	beq.n	8002334 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2210      	movs	r2, #16
 8002312:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8002314:	490a      	ldr	r1, [pc, #40]	; (8002340 <cJSON_CreateString+0x48>)
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff f805 	bl	8001326 <cJSON_strdup>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d104      	bne.n	8002334 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f7ff f83a 	bl	80013a4 <cJSON_Delete>
            return NULL;
 8002330:	2300      	movs	r3, #0
 8002332:	e000      	b.n	8002336 <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8002334:	68fb      	ldr	r3, [r7, #12]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000000 	.word	0x20000000

08002344 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800234a:	4807      	ldr	r0, [pc, #28]	; (8002368 <cJSON_CreateObject+0x24>)
 800234c:	f7ff f813 	bl	8001376 <cJSON_New_Item>
 8002350:	6078      	str	r0, [r7, #4]
    if (item)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2240      	movs	r2, #64	; 0x40
 800235c:	60da      	str	r2, [r3, #12]
    }

    return item;
 800235e:	687b      	ldr	r3, [r7, #4]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000000 	.word	0x20000000

0800236c <cliInit>:


static void cliHelp(uint8_t argc, const char **argv);

bool cliInit(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
  for (int i=0; i<CLI_CMD_LIST_MAX; i++)
 8002372:	2300      	movs	r3, #0
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	e00c      	b.n	8002392 <cliInit+0x26>
  {
    cli_cmd_func[i].cmd_func = NULL;
 8002378:	490c      	ldr	r1, [pc, #48]	; (80023ac <cliInit+0x40>)
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	3308      	adds	r3, #8
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
  for (int i=0; i<CLI_CMD_LIST_MAX; i++)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3301      	adds	r3, #1
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b07      	cmp	r3, #7
 8002396:	ddef      	ble.n	8002378 <cliInit+0xc>
  }

  cliAdd("help", cliHelp);
 8002398:	4905      	ldr	r1, [pc, #20]	; (80023b0 <cliInit+0x44>)
 800239a:	4806      	ldr	r0, [pc, #24]	; (80023b4 <cliInit+0x48>)
 800239c:	f000 f80c 	bl	80023b8 <cliAdd>
  return true;
 80023a0:	2301      	movs	r3, #1
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000488 	.word	0x20000488
 80023b0:	08002421 	.word	0x08002421
 80023b4:	08015ba8 	.word	0x08015ba8

080023b8 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*cmd_func)(uint8_t argc, const char **argv))
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  if (cli_cmd_count >= CLI_CMD_LIST_MAX)
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <cliAdd+0x60>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b07      	cmp	r3, #7
 80023c8:	d901      	bls.n	80023ce <cliAdd+0x16>
    return false;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e020      	b.n	8002410 <cliAdd+0x58>

  strncpy(cli_cmd_func[cli_cmd_count].cmd_str, cmd_str, 8);
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <cliAdd+0x60>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4a0f      	ldr	r2, [pc, #60]	; (800241c <cliAdd+0x64>)
 80023de:	4413      	add	r3, r2
 80023e0:	2208      	movs	r2, #8
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f010 ff9a 	bl	801331e <strncpy>
  cli_cmd_func[cli_cmd_count].cmd_func = cmd_func;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <cliAdd+0x60>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	4619      	mov	r1, r3
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <cliAdd+0x64>)
 80023f2:	460b      	mov	r3, r1
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	440b      	add	r3, r1
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	3308      	adds	r3, #8
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	601a      	str	r2, [r3, #0]
  cli_cmd_count++;
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <cliAdd+0x60>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b03      	ldr	r3, [pc, #12]	; (8002418 <cliAdd+0x60>)
 800240c:	701a      	strb	r2, [r3, #0]

  return true;
 800240e:	2301      	movs	r3, #1
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000484 	.word	0x20000484
 800241c:	20000488 	.word	0x20000488

08002420 <cliHelp>:

void cliHelp(uint8_t argc, const char **argv)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  cliPrintf("-----------------------\r\n");
 800242c:	4810      	ldr	r0, [pc, #64]	; (8002470 <cliHelp+0x50>)
 800242e:	f000 f827 	bl	8002480 <cliPrintf>

  for (int i=0; i<cli_cmd_count; i++)
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	e00d      	b.n	8002454 <cliHelp+0x34>
  {
    cliPrintf("%s\n", cli_cmd_func[i].cmd_str);
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4a0c      	ldr	r2, [pc, #48]	; (8002474 <cliHelp+0x54>)
 8002444:	4413      	add	r3, r2
 8002446:	4619      	mov	r1, r3
 8002448:	480b      	ldr	r0, [pc, #44]	; (8002478 <cliHelp+0x58>)
 800244a:	f000 f819 	bl	8002480 <cliPrintf>
  for (int i=0; i<cli_cmd_count; i++)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3301      	adds	r3, #1
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <cliHelp+0x5c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4293      	cmp	r3, r2
 800245e:	dbeb      	blt.n	8002438 <cliHelp+0x18>
  }

  cliPrintf("-----------------------\r\n");
 8002460:	4803      	ldr	r0, [pc, #12]	; (8002470 <cliHelp+0x50>)
 8002462:	f000 f80d 	bl	8002480 <cliPrintf>
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	08015bb0 	.word	0x08015bb0
 8002474:	20000488 	.word	0x20000488
 8002478:	08015bcc 	.word	0x08015bcc
 800247c:	20000484 	.word	0x20000484

08002480 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8002480:	b40f      	push	{r0, r1, r2, r3}
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
  va_list arg;

  va_start(arg, fmt);
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	607b      	str	r3, [r7, #4]
  uartVPrintf(cli_ch, fmt, arg);
 800248e:	2300      	movs	r3, #0
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6939      	ldr	r1, [r7, #16]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fcde 	bl	8002e56 <uartVPrintf>
  va_end(arg);
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024a4:	b004      	add	sp, #16
 80024a6:	4770      	bx	lr

080024a8 <cliIsStr>:

bool cliIsStr(const char *p_arg, const char *p_str)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  if (strcmp(p_arg, p_str) == 0)
 80024b2:	6839      	ldr	r1, [r7, #0]
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7fd fe4b 	bl	8000150 <strcmp>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <cliIsStr+0x1c>
    return true;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <cliIsStr+0x1e>
  else
    return false;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <cliGetData>:

int32_t cliGetData(const char *p_arg)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  int32_t ret;

  ret = (int32_t)strtoul(p_arg, (char **)NULL, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f010 f870 	bl	80125c0 <strtoul>
 80024e0:	4603      	mov	r3, r0
 80024e2:	60fb      	str	r3, [r7, #12]

  return ret;
 80024e4:	68fb      	ldr	r3, [r7, #12]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <cliMain>:
  else
    return false;
}

bool cliMain(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
  bool ret = false;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]


  if (uartAvailable(cli_ch) > 0)
 80024fa:	2300      	movs	r3, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fc13 	bl	8002d28 <uartAvailable>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 809e 	beq.w	8002646 <cliMain+0x156>
  {
    uint8_t rx_data;

    rx_data = uartRead(cli_ch);
 800250a:	2300      	movs	r3, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fc3b 	bl	8002d88 <uartRead>
 8002512:	4603      	mov	r3, r0
 8002514:	72fb      	strb	r3, [r7, #11]

    if (rx_data == '\r')			//엔터키 입력시
 8002516:	7afb      	ldrb	r3, [r7, #11]
 8002518:	2b0d      	cmp	r3, #13
 800251a:	d16a      	bne.n	80025f2 <cliMain+0x102>
    {
      cli_buf[cli_buf_index] = 0;	//버퍼 마지막에 NULL 추가
 800251c:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <cliMain+0x160>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	4b4c      	ldr	r3, [pc, #304]	; (8002654 <cliMain+0x164>)
 8002524:	2100      	movs	r1, #0
 8002526:	5499      	strb	r1, [r3, r2]
      cli_buf_index = 0;
 8002528:	4b49      	ldr	r3, [pc, #292]	; (8002650 <cliMain+0x160>)
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]

      uartPrintf(cli_ch, "\r\n");	//프롬프로 출력
 800252e:	2300      	movs	r3, #0
 8002530:	4949      	ldr	r1, [pc, #292]	; (8002658 <cliMain+0x168>)
 8002532:	4618      	mov	r0, r3
 8002534:	f000 fc56 	bl	8002de4 <uartPrintf>

      // RUN CMD
      char *tok;
      char *str_ptr = cli_buf;
 8002538:	4b46      	ldr	r3, [pc, #280]	; (8002654 <cliMain+0x164>)
 800253a:	607b      	str	r3, [r7, #4]

      cli_argc = 0;
 800253c:	4b47      	ldr	r3, [pc, #284]	; (800265c <cliMain+0x16c>)
 800253e:	2200      	movs	r2, #0
 8002540:	801a      	strh	r2, [r3, #0]
      while((tok = strtok_r(str_ptr, " ", &str_ptr)) != NULL)
 8002542:	e00c      	b.n	800255e <cliMain+0x6e>
      {
        cli_argv[cli_argc] = tok;
 8002544:	4b45      	ldr	r3, [pc, #276]	; (800265c <cliMain+0x16c>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	4a45      	ldr	r2, [pc, #276]	; (8002660 <cliMain+0x170>)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        cli_argc++;
 8002552:	4b42      	ldr	r3, [pc, #264]	; (800265c <cliMain+0x16c>)
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	4b40      	ldr	r3, [pc, #256]	; (800265c <cliMain+0x16c>)
 800255c:	801a      	strh	r2, [r3, #0]
      while((tok = strtok_r(str_ptr, " ", &str_ptr)) != NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	1d3a      	adds	r2, r7, #4
 8002562:	4940      	ldr	r1, [pc, #256]	; (8002664 <cliMain+0x174>)
 8002564:	4618      	mov	r0, r3
 8002566:	f010 ff15 	bl	8013394 <strtok_r>
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1e8      	bne.n	8002544 <cliMain+0x54>
      }


      for (int i=0; i<cli_cmd_count; i++)
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e030      	b.n	80025da <cliMain+0xea>
      {
        if (strcmp(cli_argv[0], cli_cmd_func[i].cmd_str) == 0)
 8002578:	4b39      	ldr	r3, [pc, #228]	; (8002660 <cliMain+0x170>)
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4a38      	ldr	r2, [pc, #224]	; (8002668 <cliMain+0x178>)
 8002588:	4413      	add	r3, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f7fd fde0 	bl	8000150 <strcmp>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d11e      	bne.n	80025d4 <cliMain+0xe4>
        {
          if (cli_cmd_func[i].cmd_func != NULL)
 8002596:	4934      	ldr	r1, [pc, #208]	; (8002668 <cliMain+0x178>)
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	3308      	adds	r3, #8
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <cliMain+0xe4>
          {
            cli_cmd_func[i].cmd_func(cli_argc - 1, (const char **)&cli_argv[1]);
 80025ac:	492e      	ldr	r1, [pc, #184]	; (8002668 <cliMain+0x178>)
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3308      	adds	r3, #8
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a27      	ldr	r2, [pc, #156]	; (800265c <cliMain+0x16c>)
 80025c0:	8812      	ldrh	r2, [r2, #0]
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	3a01      	subs	r2, #1
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	4928      	ldr	r1, [pc, #160]	; (800266c <cliMain+0x17c>)
 80025ca:	4610      	mov	r0, r2
 80025cc:	4798      	blx	r3
            ret = true;
 80025ce:	2301      	movs	r3, #1
 80025d0:	75fb      	strb	r3, [r7, #23]
            break;
 80025d2:	e008      	b.n	80025e6 <cliMain+0xf6>
      for (int i=0; i<cli_cmd_count; i++)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	3301      	adds	r3, #1
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	4b25      	ldr	r3, [pc, #148]	; (8002670 <cliMain+0x180>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4293      	cmp	r3, r2
 80025e4:	dbc8      	blt.n	8002578 <cliMain+0x88>
          }
        }
      }

      uartPrintf(cli_ch, "cli# ");
 80025e6:	2300      	movs	r3, #0
 80025e8:	4922      	ldr	r1, [pc, #136]	; (8002674 <cliMain+0x184>)
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fbfa 	bl	8002de4 <uartPrintf>
 80025f0:	e029      	b.n	8002646 <cliMain+0x156>
    }
    else if (rx_data == 0x08){
 80025f2:	7afb      	ldrb	r3, [r7, #11]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d10f      	bne.n	8002618 <cliMain+0x128>
    	if(cli_buf_index > 0)
 80025f8:	4b15      	ldr	r3, [pc, #84]	; (8002650 <cliMain+0x160>)
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d022      	beq.n	8002646 <cliMain+0x156>
    	{
    		cli_buf_index--;
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <cliMain+0x160>)
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <cliMain+0x160>)
 800260a:	801a      	strh	r2, [r3, #0]
    		uartPrintf(cli_ch,"\b \b");
 800260c:	2300      	movs	r3, #0
 800260e:	491a      	ldr	r1, [pc, #104]	; (8002678 <cliMain+0x188>)
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fbe7 	bl	8002de4 <uartPrintf>
 8002616:	e016      	b.n	8002646 <cliMain+0x156>
    	}
    }
    else if (cli_buf_index < (128 - 1))
 8002618:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <cliMain+0x160>)
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	2b7e      	cmp	r3, #126	; 0x7e
 800261e:	d812      	bhi.n	8002646 <cliMain+0x156>
    {
      cli_buf[cli_buf_index] = rx_data;
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <cliMain+0x160>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	7af9      	ldrb	r1, [r7, #11]
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <cliMain+0x164>)
 800262a:	5499      	strb	r1, [r3, r2]
      cli_buf_index++;
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <cliMain+0x160>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	3301      	adds	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <cliMain+0x160>)
 8002636:	801a      	strh	r2, [r3, #0]

      uartWrite(cli_ch, &rx_data, 1);
 8002638:	2000      	movs	r0, #0
 800263a:	f107 030b 	add.w	r3, r7, #11
 800263e:	2201      	movs	r2, #1
 8002640:	4619      	mov	r1, r3
 8002642:	f000 fb4f 	bl	8002ce4 <uartWrite>
    }
  }

  return ret;
 8002646:	7dfb      	ldrb	r3, [r7, #23]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000460 	.word	0x20000460
 8002654:	200003e0 	.word	0x200003e0
 8002658:	08015bd0 	.word	0x08015bd0
 800265c:	20000462 	.word	0x20000462
 8002660:	20000464 	.word	0x20000464
 8002664:	08015bd4 	.word	0x08015bd4
 8002668:	20000488 	.word	0x20000488
 800266c:	20000468 	.word	0x20000468
 8002670:	20000484 	.word	0x20000484
 8002674:	08015bd8 	.word	0x08015bd8
 8002678:	08015be0 	.word	0x08015be0

0800267c <ledOn>:

	return ret;
}

void ledOn(uint8_t ch)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LedPort, LedPin, RESET);
 8002686:	2200      	movs	r2, #0
 8002688:	2120      	movs	r1, #32
 800268a:	4803      	ldr	r0, [pc, #12]	; (8002698 <ledOn+0x1c>)
 800268c:	f002 fe47 	bl	800531e <HAL_GPIO_WritePin>
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40010800 	.word	0x40010800

0800269c <ledOff>:

void ledOff(uint8_t ch)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LedPort, LedPin, SET);
 80026a6:	2201      	movs	r2, #1
 80026a8:	2120      	movs	r1, #32
 80026aa:	4803      	ldr	r0, [pc, #12]	; (80026b8 <ledOff+0x1c>)
 80026ac:	f002 fe37 	bl	800531e <HAL_GPIO_WritePin>
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40010800 	.word	0x40010800

080026bc <ledToggle>:

void ledToggle(uint8_t ch)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(LedPort, LedPin);
 80026c6:	2120      	movs	r1, #32
 80026c8:	4803      	ldr	r0, [pc, #12]	; (80026d8 <ledToggle+0x1c>)
 80026ca:	f002 fe40 	bl	800534e <HAL_GPIO_TogglePin>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40010800 	.word	0x40010800

080026dc <KalmanFilter_Init>:


static KalmanFilter kf;

// 칼만 필터 초기화 함수
void KalmanFilter_Init(KalmanFilter* kf, float initial_estimate, float process_noise, float measurement_noise) {
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
    kf->x_hat = initial_estimate;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	601a      	str	r2, [r3, #0]
    kf->P = 1.0f;  // 초기 오차 공분산 행렬 값
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026f6:	605a      	str	r2, [r3, #4]
    kf->Q = process_noise;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	609a      	str	r2, [r3, #8]
    kf->R = measurement_noise;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	60da      	str	r2, [r3, #12]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <KalmanFilter_Update>:

// 칼만 필터 업데이트 함수
void KalmanFilter_Update(KalmanFilter* kf, float measurement) {
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
    // 예측 단계
    float x_hat_minus = kf->x_hat;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	617b      	str	r3, [r7, #20]
    float P_minus = kf->P + kf->Q;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	4619      	mov	r1, r3
 8002728:	4610      	mov	r0, r2
 800272a:	f7fe f9bd 	bl	8000aa8 <__addsf3>
 800272e:	4603      	mov	r3, r0
 8002730:	613b      	str	r3, [r7, #16]

    // 업데이트 단계
    float K = P_minus / (P_minus + kf->R);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	6939      	ldr	r1, [r7, #16]
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe f9b5 	bl	8000aa8 <__addsf3>
 800273e:	4603      	mov	r3, r0
 8002740:	4619      	mov	r1, r3
 8002742:	6938      	ldr	r0, [r7, #16]
 8002744:	f7fe fb6c 	bl	8000e20 <__aeabi_fdiv>
 8002748:	4603      	mov	r3, r0
 800274a:	60fb      	str	r3, [r7, #12]
    kf->x_hat = x_hat_minus + K * (measurement - x_hat_minus);
 800274c:	6979      	ldr	r1, [r7, #20]
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	f7fe f9a8 	bl	8000aa4 <__aeabi_fsub>
 8002754:	4603      	mov	r3, r0
 8002756:	68f9      	ldr	r1, [r7, #12]
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe faad 	bl	8000cb8 <__aeabi_fmul>
 800275e:	4603      	mov	r3, r0
 8002760:	6979      	ldr	r1, [r7, #20]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe f9a0 	bl	8000aa8 <__addsf3>
 8002768:	4603      	mov	r3, r0
 800276a:	461a      	mov	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	601a      	str	r2, [r3, #0]
    kf->P = (1 - K) * P_minus;
 8002770:	68f9      	ldr	r1, [r7, #12]
 8002772:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002776:	f7fe f995 	bl	8000aa4 <__aeabi_fsub>
 800277a:	4603      	mov	r3, r0
 800277c:	6939      	ldr	r1, [r7, #16]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fa9a 	bl	8000cb8 <__aeabi_fmul>
 8002784:	4603      	mov	r3, r0
 8002786:	461a      	mov	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	605a      	str	r2, [r3, #4]
}
 800278c:	bf00      	nop
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <KalmanFiltercal>:

float KalmanFiltercal(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
	// 칼만 필터 초기화
	KalmanFilter_Init(&kf, 0.0f, 0.01f, 0.0f);  // 예제 값, 실제 시스템에 맞게 조절
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <KalmanFiltercal+0x40>)
 80027a0:	f04f 0100 	mov.w	r1, #0
 80027a4:	480c      	ldr	r0, [pc, #48]	; (80027d8 <KalmanFiltercal+0x44>)
 80027a6:	f7ff ff99 	bl	80026dc <KalmanFilter_Init>

	float measurement = (float)ReadDst();
 80027aa:	f000 f817 	bl	80027dc <ReadDst>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fa29 	bl	8000c08 <__aeabi_ui2f>
 80027b6:	4603      	mov	r3, r0
 80027b8:	607b      	str	r3, [r7, #4]
	KalmanFilter_Update(&kf, measurement);
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4806      	ldr	r0, [pc, #24]	; (80027d8 <KalmanFiltercal+0x44>)
 80027be:	f7ff ffa6 	bl	800270e <KalmanFilter_Update>

	        // 추정된 값 사용
	float estimated_value = kf.x_hat;
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <KalmanFiltercal+0x44>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	603b      	str	r3, [r7, #0]

	return estimated_value;
 80027c8:	683b      	ldr	r3, [r7, #0]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	3c23d70a 	.word	0x3c23d70a
 80027d8:	200004e8 	.word	0x200004e8

080027dc <ReadDst>:

uint32_t ReadDst(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
	uint32_t adc_vaule = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
	//float ret = 0.0f;
	uint32_t dist = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
	uint32_t dis_ref = 805;
 80027ea:	f240 3325 	movw	r3, #805	; 0x325
 80027ee:	607b      	str	r3, [r7, #4]

	adc_vaule      = adcReadVoltage(_DEF_CH1);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7fe fd81 	bl	80012f8 <adcReadVoltage>
 80027f6:	60f8      	str	r0, [r7, #12]
	dist = (adc_vaule *dis_ref)/254;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	fb02 f303 	mul.w	r3, r2, r3
 8002800:	085b      	lsrs	r3, r3, #1
 8002802:	4a05      	ldr	r2, [pc, #20]	; (8002818 <ReadDst+0x3c>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	60bb      	str	r3, [r7, #8]
	//dist = (float)((adc_vaule * dis_ref) /254);	//to cm

	return dist;
 800280c:	68bb      	ldr	r3, [r7, #8]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	81020409 	.word	0x81020409

0800281c <calData>:

uint8_t calData(uint32_t* avg,uint8_t cnt)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	75fb      	strb	r3, [r7, #23]
	//uint8_t cnt = sizeof(avg) / sizeof(avg[cnt]);

	for (int i = 0; i < cnt; i++) {
 800282c:	2300      	movs	r3, #0
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	e020      	b.n	8002874 <calData+0x58>
		for (int j = i + 1; j < cnt; j++) {
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	3301      	adds	r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e015      	b.n	8002866 <calData+0x4a>
			if (avg[i] == avg[j]) {
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	440b      	add	r3, r1
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d106      	bne.n	8002860 <calData+0x44>
				ret = avg[i];
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	75fb      	strb	r3, [r7, #23]
				break; // 중복된 값은 한 번만 보고
 800285e:	e006      	b.n	800286e <calData+0x52>
		for (int j = i + 1; j < cnt; j++) {
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3301      	adds	r3, #1
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	429a      	cmp	r2, r3
 800286c:	dbe5      	blt.n	800283a <calData+0x1e>
	for (int i = 0; i < cnt; i++) {
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	3301      	adds	r3, #1
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	429a      	cmp	r2, r3
 800287a:	dbda      	blt.n	8002832 <calData+0x16>
			}
		}
	}


	return ret;
 800287c:	7dfb      	ldrb	r3, [r7, #23]
}
 800287e:	4618      	mov	r0, r3
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <ReadAvgDst>:

uint32_t ReadAvgDst(void)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b08f      	sub	sp, #60	; 0x3c
 800288c:	af00      	add	r7, sp, #0
	uint32_t avg[10] = {};
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	2228      	movs	r2, #40	; 0x28
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f010 fd1b 	bl	80132d0 <memset>
	uint32_t ret = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t pre_time;
	uint8_t  cnt = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  nWhile = 1;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	for(uint8_t i=0; i<10; i++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80028b0:	e01e      	b.n	80028f0 <ReadAvgDst+0x68>
	{
//		avg[cnt] = ReadDst();
		avg[cnt] = (uint32_t)KalmanFiltercal();
 80028b2:	f7ff ff6f 	bl	8002794 <KalmanFiltercal>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe fb4b 	bl	8000f58 <__aeabi_f2uiz>
 80028c2:	4602      	mov	r2, r0
 80028c4:	00a3      	lsls	r3, r4, #2
 80028c6:	3338      	adds	r3, #56	; 0x38
 80028c8:	443b      	add	r3, r7
 80028ca:	f843 2c34 	str.w	r2, [r3, #-52]
		cnt++;
 80028ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80028d2:	3301      	adds	r3, #1
 80028d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if(cnt == 10)
 80028d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80028dc:	2b0a      	cmp	r3, #10
 80028de:	d102      	bne.n	80028e6 <ReadAvgDst+0x5e>
		{
			nWhile = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(uint8_t i=0; i<10; i++)
 80028e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80028ea:	3301      	adds	r3, #1
 80028ec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80028f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80028f4:	2b09      	cmp	r3, #9
 80028f6:	d9dc      	bls.n	80028b2 <ReadAvgDst+0x2a>

	}



	ret = calData(avg, cnt);
 80028f8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff8b 	bl	800281c <calData>
 8002906:	4603      	mov	r3, r0
 8002908:	633b      	str	r3, [r7, #48]	; 0x30


	return ret;
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800290c:	4618      	mov	r0, r3
 800290e:	373c      	adds	r7, #60	; 0x3c
 8002910:	46bd      	mov	sp, r7
 8002912:	bd90      	pop	{r4, r7, pc}

08002914 <spiReadByte>:

	return true;
}

uint8_t spiReadByte(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af02      	add	r7, sp, #8
  uint8_t readByte=0;
 800291a:	2300      	movs	r3, #0
 800291c:	71fb      	strb	r3, [r7, #7]
  uint8_t writeByte=0xFF;
 800291e:	23ff      	movs	r3, #255	; 0xff
 8002920:	71bb      	strb	r3, [r7, #6]

  while(HAL_SPI_GetState(&hspi2)!=HAL_SPI_STATE_READY);
 8002922:	bf00      	nop
 8002924:	4809      	ldr	r0, [pc, #36]	; (800294c <spiReadByte+0x38>)
 8002926:	f005 febb 	bl	80086a0 <HAL_SPI_GetState>
 800292a:	4603      	mov	r3, r0
 800292c:	2b01      	cmp	r3, #1
 800292e:	d1f9      	bne.n	8002924 <spiReadByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &writeByte, &readByte, 1, 10);
 8002930:	1dfa      	adds	r2, r7, #7
 8002932:	1db9      	adds	r1, r7, #6
 8002934:	230a      	movs	r3, #10
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2301      	movs	r3, #1
 800293a:	4804      	ldr	r0, [pc, #16]	; (800294c <spiReadByte+0x38>)
 800293c:	f005 fd00 	bl	8008340 <HAL_SPI_TransmitReceive>

  //while(HAL_DMA_GetState(hspi2.hdmarx) != HAL_DMA_STATE_READY);
  //HAL_SPI_TransmitReceive_DMA(&hspi2, &writeByte, &readByte, 10);

  return readByte;
 8002940:	79fb      	ldrb	r3, [r7, #7]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20003690 	.word	0x20003690

08002950 <spiWriteByte>:

void spiWriteByte(uint8_t writeByte)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af02      	add	r7, sp, #8
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
  uint8_t readByte=0;
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]

  while(HAL_SPI_GetState(&hspi2)!=HAL_SPI_STATE_READY);
 800295e:	bf00      	nop
 8002960:	4809      	ldr	r0, [pc, #36]	; (8002988 <spiWriteByte+0x38>)
 8002962:	f005 fe9d 	bl	80086a0 <HAL_SPI_GetState>
 8002966:	4603      	mov	r3, r0
 8002968:	2b01      	cmp	r3, #1
 800296a:	d1f9      	bne.n	8002960 <spiWriteByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &writeByte, &readByte, 1, 10);
 800296c:	f107 020f 	add.w	r2, r7, #15
 8002970:	1df9      	adds	r1, r7, #7
 8002972:	230a      	movs	r3, #10
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	2301      	movs	r3, #1
 8002978:	4803      	ldr	r0, [pc, #12]	; (8002988 <spiWriteByte+0x38>)
 800297a:	f005 fce1 	bl	8008340 <HAL_SPI_TransmitReceive>
  //while(HAL_DMA_GetState(hspi2.hdmarx) != HAL_DMA_STATE_READY);
  //HAL_SPI_TransmitReceive_DMA(&hspi2, &writeByte, &readByte, 10);
}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20003690 	.word	0x20003690

0800298c <wizchip_csEnable>:

  return;
}

void wizchip_csEnable(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Spi_CS_Port, Spi_CS, GPIO_PIN_RESET);  //chip select
 8002990:	2200      	movs	r2, #0
 8002992:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002996:	4802      	ldr	r0, [pc, #8]	; (80029a0 <wizchip_csEnable+0x14>)
 8002998:	f002 fcc1 	bl	800531e <HAL_GPIO_WritePin>
}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40010c00 	.word	0x40010c00

080029a4 <wizchip_csDisable>:

void wizchip_csDisable(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Spi_CS_Port, Spi_CS, GPIO_PIN_SET);  //chip unselect
 80029a8:	2201      	movs	r2, #1
 80029aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029ae:	4802      	ldr	r0, [pc, #8]	; (80029b8 <wizchip_csDisable+0x14>)
 80029b0:	f002 fcb5 	bl	800531e <HAL_GPIO_WritePin>
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40010c00 	.word	0x40010c00

080029bc <wizchip_reset>:

void wizchip_reset()
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Spi_Reseet_Port, Spi_Reset, GPIO_PIN_RESET);
 80029c0:	2200      	movs	r2, #0
 80029c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029c6:	4809      	ldr	r0, [pc, #36]	; (80029ec <wizchip_reset+0x30>)
 80029c8:	f002 fca9 	bl	800531e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80029cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029d0:	f001 fbfe 	bl	80041d0 <HAL_Delay>
  HAL_GPIO_WritePin(Spi_Reseet_Port, Spi_Reset, GPIO_PIN_SET);
 80029d4:	2201      	movs	r2, #1
 80029d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029da:	4804      	ldr	r0, [pc, #16]	; (80029ec <wizchip_reset+0x30>)
 80029dc:	f002 fc9f 	bl	800531e <HAL_GPIO_WritePin>
  HAL_Delay(20);
 80029e0:	2014      	movs	r0, #20
 80029e2:	f001 fbf5 	bl	80041d0 <HAL_Delay>
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40010c00 	.word	0x40010c00

080029f0 <swtimerInit>:
static swtime_t swtime_tbl[SWTIMER_MAX_CH];

extern TIM_HandleTypeDef htim4;

bool swtimerInit(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
	for(int i=0; i<SWTIMER_MAX_CH; i++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	e029      	b.n	8002a50 <swtimerInit+0x60>
	{
		swtime_tbl[i].enable = false;
 80029fc:	491a      	ldr	r1, [pc, #104]	; (8002a68 <swtimerInit+0x78>)
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
		swtime_tbl[i].counter = 0;
 8002a0e:	4916      	ldr	r1, [pc, #88]	; (8002a68 <swtimerInit+0x78>)
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
		swtime_tbl[i].func = NULL;
 8002a22:	4911      	ldr	r1, [pc, #68]	; (8002a68 <swtimerInit+0x78>)
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	330c      	adds	r3, #12
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
		swtime_tbl[i].func_arg = NULL;
 8002a36:	490c      	ldr	r1, [pc, #48]	; (8002a68 <swtimerInit+0x78>)
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	3310      	adds	r3, #16
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
	for(int i=0; i<SWTIMER_MAX_CH; i++)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b07      	cmp	r3, #7
 8002a54:	ddd2      	ble.n	80029fc <swtimerInit+0xc>
	}
	HAL_TIM_Base_Start_IT(&htim4);
 8002a56:	4805      	ldr	r0, [pc, #20]	; (8002a6c <swtimerInit+0x7c>)
 8002a58:	f005 ff26 	bl	80088a8 <HAL_TIM_Base_Start_IT>
	return true;
 8002a5c:	2301      	movs	r3, #1
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200004fc 	.word	0x200004fc
 8002a6c:	200036e8 	.word	0x200036e8

08002a70 <swtimerGetCh>:

bool swtimerGetCh(uint8_t *p_ch)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	if(swtimer_count >= SWTIMER_MAX_CH)
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <swtimerGetCh+0x34>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b07      	cmp	r3, #7
 8002a7e:	d901      	bls.n	8002a84 <swtimerGetCh+0x14>
	{
		return false;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e00a      	b.n	8002a9a <swtimerGetCh+0x2a>
	}

	*p_ch = swtimer_count;
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <swtimerGetCh+0x34>)
 8002a86:	781a      	ldrb	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	701a      	strb	r2, [r3, #0]

	//if( swtime_tbl[swtimer_count].is_set == false)
	//{
		swtimer_count++;
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <swtimerGetCh+0x34>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	3301      	adds	r3, #1
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <swtimerGetCh+0x34>)
 8002a96:	701a      	strb	r2, [r3, #0]
	//}


	return true;
 8002a98:	2301      	movs	r3, #1
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	200004f8 	.word	0x200004f8

08002aa8 <swtimerSet>:
				void (*func)(void *arg),
				void *func_arg,
				SwtimerMode_t mode,
				uint32_t time_ms)

{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	73fb      	strb	r3, [r7, #15]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	73bb      	strb	r3, [r7, #14]
	if(ch >= SWTIMER_MAX_CH)
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	2b07      	cmp	r3, #7
 8002ac0:	d901      	bls.n	8002ac6 <swtimerSet+0x1e>
	{
		return false;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e03b      	b.n	8002b3e <swtimerSet+0x96>
	}

	swtime_tbl[ch].func = func;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	491f      	ldr	r1, [pc, #124]	; (8002b48 <swtimerSet+0xa0>)
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	601a      	str	r2, [r3, #0]
	swtime_tbl[ch].func_arg = func_arg;
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	491a      	ldr	r1, [pc, #104]	; (8002b48 <swtimerSet+0xa0>)
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3310      	adds	r3, #16
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	601a      	str	r2, [r3, #0]
	swtime_tbl[ch].mode = mode;
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
 8002af0:	4915      	ldr	r1, [pc, #84]	; (8002b48 <swtimerSet+0xa0>)
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	3301      	adds	r3, #1
 8002afe:	7bba      	ldrb	r2, [r7, #14]
 8002b00:	701a      	strb	r2, [r3, #0]
	swtime_tbl[ch].counter = 0;
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	4910      	ldr	r1, [pc, #64]	; (8002b48 <swtimerSet+0xa0>)
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3304      	adds	r3, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
	swtime_tbl[ch].reload = time_ms;
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	490b      	ldr	r1, [pc, #44]	; (8002b48 <swtimerSet+0xa0>)
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	3308      	adds	r3, #8
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	601a      	str	r2, [r3, #0]
	swtime_tbl[ch].enable = false;
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	4906      	ldr	r1, [pc, #24]	; (8002b48 <swtimerSet+0xa0>)
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]

	return true;
 8002b3c:	2301      	movs	r3, #1
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	200004fc 	.word	0x200004fc

08002b4c <swtimerStart>:

bool swtimerStart(uint8_t ch)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
	if(ch >= SWTIMER_MAX_CH)
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	2b07      	cmp	r3, #7
 8002b5a:	d901      	bls.n	8002b60 <swtimerStart+0x14>
	{
		return false;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e013      	b.n	8002b88 <swtimerStart+0x3c>
	}
	swtime_tbl[ch].counter = 0;
 8002b60:	79fa      	ldrb	r2, [r7, #7]
 8002b62:	490c      	ldr	r1, [pc, #48]	; (8002b94 <swtimerStart+0x48>)
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3304      	adds	r3, #4
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
	swtime_tbl[ch].enable = true;
 8002b74:	79fa      	ldrb	r2, [r7, #7]
 8002b76:	4907      	ldr	r1, [pc, #28]	; (8002b94 <swtimerStart+0x48>)
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]

	return true;
 8002b86:	2301      	movs	r3, #1
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	200004fc 	.word	0x200004fc

08002b98 <swtimerISR>:

	return true;
}

void swtimerISR(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
	for(int i=0; i<swtimer_count; i++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
 8002ba2:	e070      	b.n	8002c86 <swtimerISR+0xee>
	{
		if(swtime_tbl[i].enable == true)
 8002ba4:	493d      	ldr	r1, [pc, #244]	; (8002c9c <swtimerISR+0x104>)
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d063      	beq.n	8002c80 <swtimerISR+0xe8>
		{
			swtime_tbl[i].counter++;
 8002bb8:	4938      	ldr	r1, [pc, #224]	; (8002c9c <swtimerISR+0x104>)
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	1c59      	adds	r1, r3, #1
 8002bcc:	4833      	ldr	r0, [pc, #204]	; (8002c9c <swtimerISR+0x104>)
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4403      	add	r3, r0
 8002bda:	3304      	adds	r3, #4
 8002bdc:	6019      	str	r1, [r3, #0]
			if(swtime_tbl[i].counter >= swtime_tbl[i].reload)
 8002bde:	492f      	ldr	r1, [pc, #188]	; (8002c9c <swtimerISR+0x104>)
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	3304      	adds	r3, #4
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	482a      	ldr	r0, [pc, #168]	; (8002c9c <swtimerISR+0x104>)
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4403      	add	r3, r0
 8002bfe:	3308      	adds	r3, #8
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4299      	cmp	r1, r3
 8002c04:	d33c      	bcc.n	8002c80 <swtimerISR+0xe8>
			{
				if(swtime_tbl[i].func != NULL)
 8002c06:	4925      	ldr	r1, [pc, #148]	; (8002c9c <swtimerISR+0x104>)
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	330c      	adds	r3, #12
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <swtimerISR+0xac>
				{
					swtime_tbl[i].func(swtime_tbl[i].func_arg);
 8002c1c:	491f      	ldr	r1, [pc, #124]	; (8002c9c <swtimerISR+0x104>)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	330c      	adds	r3, #12
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	481b      	ldr	r0, [pc, #108]	; (8002c9c <swtimerISR+0x104>)
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4403      	add	r3, r0
 8002c3c:	3310      	adds	r3, #16
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	4788      	blx	r1
				}
				swtime_tbl[i].counter = 0;
 8002c44:	4915      	ldr	r1, [pc, #84]	; (8002c9c <swtimerISR+0x104>)
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	3304      	adds	r3, #4
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
				if(swtime_tbl[i].mode == SWTIMER_ONETIME)
 8002c58:	4910      	ldr	r1, [pc, #64]	; (8002c9c <swtimerISR+0x104>)
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	3301      	adds	r3, #1
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d108      	bne.n	8002c80 <swtimerISR+0xe8>
				{
					swtime_tbl[i].enable = false;
 8002c6e:	490b      	ldr	r1, [pc, #44]	; (8002c9c <swtimerISR+0x104>)
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<swtimer_count; i++)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3301      	adds	r3, #1
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <swtimerISR+0x108>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	db88      	blt.n	8002ba4 <swtimerISR+0xc>
				}
			}
		}
	}
}
 8002c92:	bf00      	nop
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	200004fc 	.word	0x200004fc
 8002ca0:	200004f8 	.word	0x200004f8

08002ca4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *him)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	if(him == &htim4)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d101      	bne.n	8002cb8 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		swtimerISR();
 8002cb4:	f7ff ff70 	bl	8002b98 <swtimerISR>
	}

}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	200036e8 	.word	0x200036e8

08002cc4 <uartInit>:
}
*/


bool uartInit(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0

  //HAL_UART_Receive_IT(&huart1, &rx_data, 1);	//uart interrut
  HAL_UART_Receive_DMA(&huart2, &q_buf[0], UART_Q_BUF_MAX);
 8002cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ccc:	4903      	ldr	r1, [pc, #12]	; (8002cdc <uartInit+0x18>)
 8002cce:	4804      	ldr	r0, [pc, #16]	; (8002ce0 <uartInit+0x1c>)
 8002cd0:	f006 fa6b 	bl	80091aa <HAL_UART_Receive_DMA>
  return true;
 8002cd4:	2301      	movs	r3, #1
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	200005a0 	.word	0x200005a0
 8002ce0:	200037f8 	.word	0x200037f8

08002ce4 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef hal_ret;


  switch(ch)
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10e      	bne.n	8002d1a <uartWrite+0x36>
  {
    case _DEF_CH1:
      hal_ret = HAL_UART_Transmit(&huart2, p_data, length, 100);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	2364      	movs	r3, #100	; 0x64
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	4807      	ldr	r0, [pc, #28]	; (8002d24 <uartWrite+0x40>)
 8002d06:	f006 f9cd 	bl	80090a4 <HAL_UART_Transmit>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	74fb      	strb	r3, [r7, #19]
      if (hal_ret == HAL_OK)
 8002d0e:	7cfb      	ldrb	r3, [r7, #19]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <uartWrite+0x34>
      {
        ret = length;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	617b      	str	r3, [r7, #20]
      }
      break;
 8002d18:	bf00      	nop
  }

  return ret;
 8002d1a:	697b      	ldr	r3, [r7, #20]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	200037f8 	.word	0x200037f8

08002d28 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]


  switch(ch)
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d119      	bne.n	8002d70 <uartAvailable+0x48>
  {
    case _DEF_CH1:
	  q_in = (UART_Q_BUF_MAX - huart2.hdmarx->Instance->CNDTR) % UART_Q_BUF_MAX;
 8002d3c:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <uartAvailable+0x54>)
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <uartAvailable+0x58>)
 8002d52:	801a      	strh	r2, [r3, #0]
      ret = (UART_Q_BUF_MAX + q_in - q_out) % UART_Q_BUF_MAX;
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <uartAvailable+0x58>)
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d5c:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <uartAvailable+0x5c>)
 8002d5e:	8812      	ldrh	r2, [r2, #0]
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	425a      	negs	r2, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	bf58      	it	pl
 8002d6a:	4253      	negpl	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
      break;
 8002d6e:	bf00      	nop
  }

  return ret;
 8002d70:	68fb      	ldr	r3, [r7, #12]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	200037f8 	.word	0x200037f8
 8002d80:	2000059c 	.word	0x2000059c
 8002d84:	2000059e 	.word	0x2000059e

08002d88 <uartRead>:

uint8_t  uartRead(uint8_t ch)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d117      	bne.n	8002dcc <uartRead+0x44>
  {
    case _DEF_CH1:
      if (q_out != q_in)
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <uartRead+0x50>)
 8002d9e:	881a      	ldrh	r2, [r3, #0]
 8002da0:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <uartRead+0x54>)
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d010      	beq.n	8002dca <uartRead+0x42>
      {
        ret = q_buf[q_out];
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <uartRead+0x50>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <uartRead+0x58>)
 8002db0:	5c9b      	ldrb	r3, [r3, r2]
 8002db2:	73fb      	strb	r3, [r7, #15]
        q_out = (q_out + 1) % UART_Q_BUF_MAX;
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <uartRead+0x50>)
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	425a      	negs	r2, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	bf58      	it	pl
 8002dc2:	4253      	negpl	r3, r2
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <uartRead+0x50>)
 8002dc8:	801a      	strh	r2, [r3, #0]
      }
      break;
 8002dca:	bf00      	nop
  }

  return ret;
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	2000059e 	.word	0x2000059e
 8002ddc:	2000059c 	.word	0x2000059c
 8002de0:	200005a0 	.word	0x200005a0

08002de4 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8002de4:	b40e      	push	{r1, r2, r3}
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b0c7      	sub	sp, #284	; 0x11c
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4602      	mov	r2, r0
 8002dee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002df2:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002df6:	701a      	strb	r2, [r3, #0]
  uint32_t ret = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  va_list arg;
  char print_buf[256];


  va_start(arg, fmt);
 8002dfe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002e02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

  int len;
  len = vsnprintf(print_buf, 256, fmt, arg);
 8002e06:	f107 000c 	add.w	r0, r7, #12
 8002e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e16:	f010 f9b7 	bl	8013188 <vsniprintf>
 8002e1a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
  va_end(arg);

  if (len > 0)
 8002e1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	dd0d      	ble.n	8002e42 <uartPrintf+0x5e>
  {
    ret = uartWrite(ch, (uint8_t *)print_buf, len);
 8002e26:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002e2a:	f107 010c 	add.w	r1, r7, #12
 8002e2e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e32:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff53 	bl	8002ce4 <uartWrite>
 8002e3e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  }

  return ret;
 8002e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e52:	b003      	add	sp, #12
 8002e54:	4770      	bx	lr

08002e56 <uartVPrintf>:

uint32_t uartVPrintf(uint8_t ch, const char *fmt, va_list arg)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b0c6      	sub	sp, #280	; 0x118
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e64:	6019      	str	r1, [r3, #0]
 8002e66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e74:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002e78:	4602      	mov	r2, r0
 8002e7a:	701a      	strb	r2, [r3, #0]
  uint32_t ret = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  char print_buf[256];


  int len;
  len = vsnprintf(print_buf, 256, fmt, arg);
 8002e82:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e8a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002e8e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002e92:	f107 0010 	add.w	r0, r7, #16
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e9e:	f010 f973 	bl	8013188 <vsniprintf>
 8002ea2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  if (len > 0)
 8002ea6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	dd0d      	ble.n	8002eca <uartVPrintf+0x74>
  {
    ret = uartWrite(ch, (uint8_t *)print_buf, len);
 8002eae:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002eb2:	f107 0110 	add.w	r1, r7, #16
 8002eb6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002eba:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff0f 	bl	8002ce4 <uartWrite>
 8002ec6:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  }


  return ret;
 8002eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <delay>:
 */

#include "util.h"

void delay(uint32_t time_ms)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  HAL_Delay(time_ms);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f001 f975 	bl	80041d0 <HAL_Delay>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <millis>:

uint32_t millis(void)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002ef2:	f001 f963 	bl	80041bc <HAL_GetTick>
 8002ef6:	4603      	mov	r3, r0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd80      	pop	{r7, pc}

08002efc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f00:	f3bf 8f4f 	dsb	sy
}
 8002f04:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <__NVIC_SystemReset+0x24>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002f0e:	4904      	ldr	r1, [pc, #16]	; (8002f20 <__NVIC_SystemReset+0x24>)
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <__NVIC_SystemReset+0x28>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f16:	f3bf 8f4f 	dsb	sy
}
 8002f1a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <__NVIC_SystemReset+0x20>
 8002f20:	e000ed00 	.word	0xe000ed00
 8002f24:	05fa0004 	.word	0x05fa0004

08002f28 <w5500Init>:
//
//uint8_t destip[4] = {192, 168, 0, 15};


bool w5500Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
	reg_wizchip_cs_cbfunc(wizchip_csEnable,wizchip_csDisable);// CS function register
 8002f2c:	4909      	ldr	r1, [pc, #36]	; (8002f54 <w5500Init+0x2c>)
 8002f2e:	480a      	ldr	r0, [pc, #40]	; (8002f58 <w5500Init+0x30>)
 8002f30:	f00c fad8 	bl	800f4e4 <reg_wizchip_cs_cbfunc>
	HAL_Delay(100);
 8002f34:	2064      	movs	r0, #100	; 0x64
 8002f36:	f001 f94b 	bl	80041d0 <HAL_Delay>
	reg_wizchip_spi_cbfunc(spiReadByte, spiWriteByte);
 8002f3a:	4908      	ldr	r1, [pc, #32]	; (8002f5c <w5500Init+0x34>)
 8002f3c:	4808      	ldr	r0, [pc, #32]	; (8002f60 <w5500Init+0x38>)
 8002f3e:	f00c faf5 	bl	800f52c <reg_wizchip_spi_cbfunc>

	//reg_wizchip_spiburst_cbfunc(spiReadBurst, spiWriteBurst);
	//uartPrintf(_DEF_CH1, "--test-----\r\n");
	HAL_Delay(100);
 8002f42:	2064      	movs	r0, #100	; 0x64
 8002f44:	f001 f944 	bl	80041d0 <HAL_Delay>
	wizchip_initialize();
 8002f48:	f000 f80c 	bl	8002f64 <wizchip_initialize>

	return true;
 8002f4c:	2301      	movs	r3, #1
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	080029a5 	.word	0x080029a5
 8002f58:	0800298d 	.word	0x0800298d
 8002f5c:	08002951 	.word	0x08002951
 8002f60:	08002915 	.word	0x08002915

08002f64 <wizchip_initialize>:

void wizchip_initialize(void)
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
  uint8_t W5x00_AdrSet[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2},{2, 2, 2, 2, 2, 2, 2, 2},};
 8002f6a:	4b3a      	ldr	r3, [pc, #232]	; (8003054 <wizchip_initialize+0xf0>)
 8002f6c:	f107 0408 	add.w	r4, r7, #8
 8002f70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  //uint8_t tmp1, tmp2;
  int8_t phy_link =0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	71fb      	strb	r3, [r7, #7]
  intr_kind temp= IK_DEST_UNREACH;
 8002f7a:	2340      	movs	r3, #64	; 0x40
 8002f7c:	80bb      	strh	r3, [r7, #4]

  wizchip_reset();
 8002f7e:	f7ff fd1d 	bl	80029bc <wizchip_reset>
  HAL_Delay(200);
 8002f82:	20c8      	movs	r0, #200	; 0xc8
 8002f84:	f001 f924 	bl	80041d0 <HAL_Delay>
  if (ctlwizchip(CW_INIT_WIZCHIP, (void*)W5x00_AdrSet) == -1)
 8002f88:	f107 0308 	add.w	r3, r7, #8
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f00c faf8 	bl	800f584 <ctlwizchip>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9a:	d103      	bne.n	8002fa4 <wizchip_initialize+0x40>
	  uartPrintf(_DEF_CH1,">>>>W5100s memory initialization failed\r\n");
 8002f9c:	492e      	ldr	r1, [pc, #184]	; (8003058 <wizchip_initialize+0xf4>)
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f7ff ff20 	bl	8002de4 <uartPrintf>
  HAL_Delay(200);
 8002fa4:	20c8      	movs	r0, #200	; 0xc8
 8002fa6:	f001 f913 	bl	80041d0 <HAL_Delay>

  if(ctlwizchip(CW_SET_INTRMASK,&temp) == -1)
 8002faa:	1d3b      	adds	r3, r7, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	2004      	movs	r0, #4
 8002fb0:	f00c fae8 	bl	800f584 <ctlwizchip>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d103      	bne.n	8002fc4 <wizchip_initialize+0x60>
	  uartPrintf(_DEF_CH1,"W5100S interrupt\r\n");
 8002fbc:	4927      	ldr	r1, [pc, #156]	; (800305c <wizchip_initialize+0xf8>)
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f7ff ff10 	bl	8002de4 <uartPrintf>
  HAL_Delay(200);
 8002fc4:	20c8      	movs	r0, #200	; 0xc8
 8002fc6:	f001 f903 	bl	80041d0 <HAL_Delay>


  if(getVERSIONR() != 0x04){
 8002fca:	f44f 5064 	mov.w	r0, #14592	; 0x3900
 8002fce:	f00a ffa7 	bl	800df20 <WIZCHIP_READ>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d00b      	beq.n	8002ff0 <wizchip_initialize+0x8c>
	  uartPrintf(_DEF_CH1,">>>>Access ERR: VERSION != 0x04, value = %02x\r\n", getVERSIONR());
 8002fd8:	f44f 5064 	mov.w	r0, #14592	; 0x3900
 8002fdc:	f00a ffa0 	bl	800df20 <WIZCHIP_READ>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	491e      	ldr	r1, [pc, #120]	; (8003060 <wizchip_initialize+0xfc>)
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7ff fefc 	bl	8002de4 <uartPrintf>
	  NVIC_SystemReset();
 8002fec:	f7ff ff86 	bl	8002efc <__NVIC_SystemReset>
  }else{
	  uartPrintf(_DEF_CH1,"---------------------------------------------------\r\n");
 8002ff0:	491c      	ldr	r1, [pc, #112]	; (8003064 <wizchip_initialize+0x100>)
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f7ff fef6 	bl	8002de4 <uartPrintf>
	  uartPrintf(_DEF_CH1,"[ Access Get: VERSION = %02x ]\r\n", getVERSIONR());\
 8002ff8:	f44f 5064 	mov.w	r0, #14592	; 0x3900
 8002ffc:	f00a ff90 	bl	800df20 <WIZCHIP_READ>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	4918      	ldr	r1, [pc, #96]	; (8003068 <wizchip_initialize+0x104>)
 8003006:	2000      	movs	r0, #0
 8003008:	f7ff feec 	bl	8002de4 <uartPrintf>
	  uartPrintf(_DEF_CH1,"---------------------------------------------------\r\n");
 800300c:	4915      	ldr	r1, [pc, #84]	; (8003064 <wizchip_initialize+0x100>)
 800300e:	2000      	movs	r0, #0
 8003010:	f7ff fee8 	bl	8002de4 <uartPrintf>
	  uartPrintf(_DEF_CH1,"\r\n");
 8003014:	4915      	ldr	r1, [pc, #84]	; (800306c <wizchip_initialize+0x108>)
 8003016:	2000      	movs	r0, #0
 8003018:	f7ff fee4 	bl	8002de4 <uartPrintf>
  }

  do{//check phy status.
  		if(ctlwizchip(CW_GET_PHYLINK,&phy_link) == -1){
 800301c:	1dfb      	adds	r3, r7, #7
 800301e:	4619      	mov	r1, r3
 8003020:	200f      	movs	r0, #15
 8003022:	f00c faaf 	bl	800f584 <ctlwizchip>
 8003026:	4603      	mov	r3, r0
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d108      	bne.n	8003040 <wizchip_initialize+0xdc>
  			uartPrintf(_DEF_CH1,"Unknown PHY link status.\r\n");
 800302e:	4910      	ldr	r1, [pc, #64]	; (8003070 <wizchip_initialize+0x10c>)
 8003030:	2000      	movs	r0, #0
 8003032:	f7ff fed7 	bl	8002de4 <uartPrintf>
  			delay(10);
 8003036:	200a      	movs	r0, #10
 8003038:	f7ff ff4e 	bl	8002ed8 <delay>
  			NVIC_SystemReset();
 800303c:	f7ff ff5e 	bl	8002efc <__NVIC_SystemReset>
  		}

  	}while(phy_link == PHY_LINK_OFF);
 8003040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0e9      	beq.n	800301c <wizchip_initialize+0xb8>
//    else{
//    	uartPrintf(_DEF_CH1,">>>>W5x00s done initialization failed....\r\n");
//    	NVIC_SystemReset();
//    }
//  }
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	bd90      	pop	{r4, r7, pc}
 8003052:	bf00      	nop
 8003054:	08015cdc 	.word	0x08015cdc
 8003058:	08015bf0 	.word	0x08015bf0
 800305c:	08015c1c 	.word	0x08015c1c
 8003060:	08015c30 	.word	0x08015c30
 8003064:	08015c60 	.word	0x08015c60
 8003068:	08015c98 	.word	0x08015c98
 800306c:	08015cbc 	.word	0x08015cbc
 8003070:	08015cc0 	.word	0x08015cc0

08003074 <w5500Info>:
	//loopback_tcpc(0,&tcp_loopback_data, destip, 5000 );
}


bool w5500Info(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
//	getSHAR(mac);
//	uartPrintf(_DEF_CH1, "==========================================\n\r");
//	//uartPrintf(_DEF_CH1,"MAC Address : %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
//	uartPrintf(_DEF_CH1,"MAC Address : %02x:%02x:%02x:%02x:%02x:%02x\n\r",mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]);
//	uartPrintf(_DEF_CH1, "==========================================\n\r");
	wizchip_setnetinfo(&gWIZNETINFO);
 8003078:	4802      	ldr	r0, [pc, #8]	; (8003084 <w5500Info+0x10>)
 800307a:	f00c fe21 	bl	800fcc0 <wizchip_setnetinfo>

	return true;
 800307e:	2301      	movs	r3, #1
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	2000000c 	.word	0x2000000c

08003088 <print_network_information>:

void print_network_information(void)
{
 8003088:	b5b0      	push	{r4, r5, r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af04      	add	r7, sp, #16
	memset(&gWIZNETINFO,0,sizeof(gWIZNETINFO));
 800308e:	2217      	movs	r2, #23
 8003090:	2100      	movs	r1, #0
 8003092:	4841      	ldr	r0, [pc, #260]	; (8003198 <print_network_information+0x110>)
 8003094:	f010 f91c 	bl	80132d0 <memset>
#ifdef _USE_DBG_
	wizchip_getnetinfo(&gWIZNETINFO);
 8003098:	483f      	ldr	r0, [pc, #252]	; (8003198 <print_network_information+0x110>)
 800309a:	f00c fe51 	bl	800fd40 <wizchip_getnetinfo>
	uartPrintf(_DEF_CH1, "==========================================\n\r");
 800309e:	493f      	ldr	r1, [pc, #252]	; (800319c <print_network_information+0x114>)
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7ff fe9f 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1,"MAC Address : %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 80030a6:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <print_network_information+0x110>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	461c      	mov	r4, r3
 80030ac:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <print_network_information+0x110>)
 80030ae:	785b      	ldrb	r3, [r3, #1]
 80030b0:	461d      	mov	r5, r3
 80030b2:	4b39      	ldr	r3, [pc, #228]	; (8003198 <print_network_information+0x110>)
 80030b4:	789b      	ldrb	r3, [r3, #2]
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b37      	ldr	r3, [pc, #220]	; (8003198 <print_network_information+0x110>)
 80030ba:	78db      	ldrb	r3, [r3, #3]
 80030bc:	4619      	mov	r1, r3
 80030be:	4b36      	ldr	r3, [pc, #216]	; (8003198 <print_network_information+0x110>)
 80030c0:	791b      	ldrb	r3, [r3, #4]
 80030c2:	4618      	mov	r0, r3
 80030c4:	4b34      	ldr	r3, [pc, #208]	; (8003198 <print_network_information+0x110>)
 80030c6:	795b      	ldrb	r3, [r3, #5]
 80030c8:	9303      	str	r3, [sp, #12]
 80030ca:	9002      	str	r0, [sp, #8]
 80030cc:	9101      	str	r1, [sp, #4]
 80030ce:	9200      	str	r2, [sp, #0]
 80030d0:	462b      	mov	r3, r5
 80030d2:	4622      	mov	r2, r4
 80030d4:	4932      	ldr	r1, [pc, #200]	; (80031a0 <print_network_information+0x118>)
 80030d6:	2000      	movs	r0, #0
 80030d8:	f7ff fe84 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1,"IP  Address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 80030dc:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <print_network_information+0x110>)
 80030de:	799b      	ldrb	r3, [r3, #6]
 80030e0:	4619      	mov	r1, r3
 80030e2:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <print_network_information+0x110>)
 80030e4:	79db      	ldrb	r3, [r3, #7]
 80030e6:	4618      	mov	r0, r3
 80030e8:	4b2b      	ldr	r3, [pc, #172]	; (8003198 <print_network_information+0x110>)
 80030ea:	7a1b      	ldrb	r3, [r3, #8]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <print_network_information+0x110>)
 80030f0:	7a5b      	ldrb	r3, [r3, #9]
 80030f2:	9301      	str	r3, [sp, #4]
 80030f4:	9200      	str	r2, [sp, #0]
 80030f6:	4603      	mov	r3, r0
 80030f8:	460a      	mov	r2, r1
 80030fa:	492a      	ldr	r1, [pc, #168]	; (80031a4 <print_network_information+0x11c>)
 80030fc:	2000      	movs	r0, #0
 80030fe:	f7ff fe71 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1,"Subnet Mask : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8003102:	4b25      	ldr	r3, [pc, #148]	; (8003198 <print_network_information+0x110>)
 8003104:	7a9b      	ldrb	r3, [r3, #10]
 8003106:	4619      	mov	r1, r3
 8003108:	4b23      	ldr	r3, [pc, #140]	; (8003198 <print_network_information+0x110>)
 800310a:	7adb      	ldrb	r3, [r3, #11]
 800310c:	4618      	mov	r0, r3
 800310e:	4b22      	ldr	r3, [pc, #136]	; (8003198 <print_network_information+0x110>)
 8003110:	7b1b      	ldrb	r3, [r3, #12]
 8003112:	461a      	mov	r2, r3
 8003114:	4b20      	ldr	r3, [pc, #128]	; (8003198 <print_network_information+0x110>)
 8003116:	7b5b      	ldrb	r3, [r3, #13]
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	9200      	str	r2, [sp, #0]
 800311c:	4603      	mov	r3, r0
 800311e:	460a      	mov	r2, r1
 8003120:	4921      	ldr	r1, [pc, #132]	; (80031a8 <print_network_information+0x120>)
 8003122:	2000      	movs	r0, #0
 8003124:	f7ff fe5e 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1,"Gateway     : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <print_network_information+0x110>)
 800312a:	7b9b      	ldrb	r3, [r3, #14]
 800312c:	4619      	mov	r1, r3
 800312e:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <print_network_information+0x110>)
 8003130:	7bdb      	ldrb	r3, [r3, #15]
 8003132:	4618      	mov	r0, r3
 8003134:	4b18      	ldr	r3, [pc, #96]	; (8003198 <print_network_information+0x110>)
 8003136:	7c1b      	ldrb	r3, [r3, #16]
 8003138:	461a      	mov	r2, r3
 800313a:	4b17      	ldr	r3, [pc, #92]	; (8003198 <print_network_information+0x110>)
 800313c:	7c5b      	ldrb	r3, [r3, #17]
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	9200      	str	r2, [sp, #0]
 8003142:	4603      	mov	r3, r0
 8003144:	460a      	mov	r2, r1
 8003146:	4919      	ldr	r1, [pc, #100]	; (80031ac <print_network_information+0x124>)
 8003148:	2000      	movs	r0, #0
 800314a:	f7ff fe4b 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1,"DNS Server  : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 800314e:	4b12      	ldr	r3, [pc, #72]	; (8003198 <print_network_information+0x110>)
 8003150:	7c9b      	ldrb	r3, [r3, #18]
 8003152:	4619      	mov	r1, r3
 8003154:	4b10      	ldr	r3, [pc, #64]	; (8003198 <print_network_information+0x110>)
 8003156:	7cdb      	ldrb	r3, [r3, #19]
 8003158:	4618      	mov	r0, r3
 800315a:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <print_network_information+0x110>)
 800315c:	7d1b      	ldrb	r3, [r3, #20]
 800315e:	461a      	mov	r2, r3
 8003160:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <print_network_information+0x110>)
 8003162:	7d5b      	ldrb	r3, [r3, #21]
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	9200      	str	r2, [sp, #0]
 8003168:	4603      	mov	r3, r0
 800316a:	460a      	mov	r2, r1
 800316c:	4910      	ldr	r1, [pc, #64]	; (80031b0 <print_network_information+0x128>)
 800316e:	2000      	movs	r0, #0
 8003170:	f7ff fe38 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1, "==========================================\n\r");
 8003174:	4909      	ldr	r1, [pc, #36]	; (800319c <print_network_information+0x114>)
 8003176:	2000      	movs	r0, #0
 8003178:	f7ff fe34 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1, "\n\r");
 800317c:	490d      	ldr	r1, [pc, #52]	; (80031b4 <print_network_information+0x12c>)
 800317e:	2000      	movs	r0, #0
 8003180:	f7ff fe30 	bl	8002de4 <uartPrintf>
#endif
	if(gWIZNETINFO.mac[0] == 0xFF)
 8003184:	4b04      	ldr	r3, [pc, #16]	; (8003198 <print_network_information+0x110>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2bff      	cmp	r3, #255	; 0xff
 800318a:	d101      	bne.n	8003190 <print_network_information+0x108>
	{
		while(1)
		{
			////forever loop wdg call
			NVIC_SystemReset();
 800318c:	f7ff feb6 	bl	8002efc <__NVIC_SystemReset>
		}
	}
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	bdb0      	pop	{r4, r5, r7, pc}
 8003196:	bf00      	nop
 8003198:	2000000c 	.word	0x2000000c
 800319c:	08015cec 	.word	0x08015cec
 80031a0:	08015d1c 	.word	0x08015d1c
 80031a4:	08015d4c 	.word	0x08015d4c
 80031a8:	08015d68 	.word	0x08015d68
 80031ac:	08015d84 	.word	0x08015d84
 80031b0:	08015da0 	.word	0x08015da0
 80031b4:	08015dbc 	.word	0x08015dbc

080031b8 <DnsInit>:

void DnsInit(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	DNS_init(0,ethBuf0);
 80031bc:	490e      	ldr	r1, [pc, #56]	; (80031f8 <DnsInit+0x40>)
 80031be:	2000      	movs	r0, #0
 80031c0:	f00d f9ae 	bl	8010520 <DNS_init>
	IP_TYPE = 0x1c;
 80031c4:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <DnsInit+0x44>)
 80031c6:	221c      	movs	r2, #28
 80031c8:	701a      	strb	r2, [r3, #0]
    while (DNS_run(dns_server_ip, URL, dnsclient_ip) != 1);
 80031ca:	bf00      	nop
 80031cc:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <DnsInit+0x48>)
 80031ce:	490d      	ldr	r1, [pc, #52]	; (8003204 <DnsInit+0x4c>)
 80031d0:	480d      	ldr	r0, [pc, #52]	; (8003208 <DnsInit+0x50>)
 80031d2:	f00d f9c1 	bl	8010558 <DNS_run>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d1f7      	bne.n	80031cc <DnsInit+0x14>

#ifdef _USE_DBG_
    uartPrintf(_DEF_CH1, "==========================================\n\r");
 80031dc:	490b      	ldr	r1, [pc, #44]	; (800320c <DnsInit+0x54>)
 80031de:	2000      	movs	r0, #0
 80031e0:	f7ff fe00 	bl	8002de4 <uartPrintf>
    uartPrintf(_DEF_CH1, ">>>>W5x00s DNS Init done initialization\n\r");
 80031e4:	490a      	ldr	r1, [pc, #40]	; (8003210 <DnsInit+0x58>)
 80031e6:	2000      	movs	r0, #0
 80031e8:	f7ff fdfc 	bl	8002de4 <uartPrintf>
    uartPrintf(_DEF_CH1, "==========================================\n\r");
 80031ec:	4907      	ldr	r1, [pc, #28]	; (800320c <DnsInit+0x54>)
 80031ee:	2000      	movs	r0, #0
 80031f0:	f7ff fdf8 	bl	8002de4 <uartPrintf>
#endif
}
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20002e4c 	.word	0x20002e4c
 80031fc:	20001c48 	.word	0x20001c48
 8003200:	200006a0 	.word	0x200006a0
 8003204:	08016160 	.word	0x08016160
 8003208:	20000024 	.word	0x20000024
 800320c:	08015cec 	.word	0x08015cec
 8003210:	08015dc0 	.word	0x08015dc0

08003214 <messageArrived>:

void messageArrived(MessageData* md)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b0a2      	sub	sp, #136	; 0x88
 8003218:	af02      	add	r7, sp, #8
 800321a:	6078      	str	r0, [r7, #4]
  unsigned char testbuffer[100];
  uint32_t rd_size;
  uint32_t rd_pt;
  uint32_t rdmore_size;

  MQTTMessage* message = md->message;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	673b      	str	r3, [r7, #112]	; 0x70
  MQTTString* topic = md->topicName;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	66fb      	str	r3, [r7, #108]	; 0x6c

  //unsigned char data[50];


  rdmore_size = (int)topic->lenstring.len;
 8003228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	677b      	str	r3, [r7, #116]	; 0x74
  rd_pt = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	67bb      	str	r3, [r7, #120]	; 0x78

  while(rdmore_size != 0)
 8003232:	e028      	b.n	8003286 <messageArrived+0x72>
  {
    if(rdmore_size > sizeof(testbuffer) - 1)
 8003234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003236:	2b63      	cmp	r3, #99	; 0x63
 8003238:	d902      	bls.n	8003240 <messageArrived+0x2c>
    {
      rd_size = sizeof(testbuffer) - 1;
 800323a:	2363      	movs	r3, #99	; 0x63
 800323c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800323e:	e001      	b.n	8003244 <messageArrived+0x30>
    }
    else
    {
      rd_size = rdmore_size;
 8003240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003242:	67fb      	str	r3, [r7, #124]	; 0x7c
    }

    memset(testbuffer, 0, rd_size + 1);
 8003244:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	f107 0308 	add.w	r3, r7, #8
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f010 f83e 	bl	80132d0 <memset>

    memcpy(testbuffer, ((char*)topic->lenstring.data) + rd_pt, rd_size);
 8003254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800325a:	18d1      	adds	r1, r2, r3
 800325c:	f107 0308 	add.w	r3, r7, #8
 8003260:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003262:	4618      	mov	r0, r3
 8003264:	f010 f937 	bl	80134d6 <memcpy>
    uartPrintf(_DEF_CH1,"SubScribe Topic : %s\r\n", testbuffer);
 8003268:	f107 0308 	add.w	r3, r7, #8
 800326c:	461a      	mov	r2, r3
 800326e:	491b      	ldr	r1, [pc, #108]	; (80032dc <messageArrived+0xc8>)
 8003270:	2000      	movs	r0, #0
 8003272:	f7ff fdb7 	bl	8002de4 <uartPrintf>

    rd_pt += rd_size;
 8003276:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003278:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800327a:	4413      	add	r3, r2
 800327c:	67bb      	str	r3, [r7, #120]	; 0x78
    rdmore_size -= rd_size;
 800327e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003280:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	677b      	str	r3, [r7, #116]	; 0x74
  while(rdmore_size != 0)
 8003286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1d3      	bne.n	8003234 <messageArrived+0x20>
  }

  if (opts.nodelimiter)
 800328c:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <messageArrived+0xcc>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <messageArrived+0x94>
  {
	  uartPrintf(_DEF_CH1,"Message1 : %.*s\r\n", (int)message->payloadlen, (char*)message->payload);
 8003294:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	461a      	mov	r2, r3
 800329a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	4911      	ldr	r1, [pc, #68]	; (80032e4 <messageArrived+0xd0>)
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7ff fd9f 	bl	8002de4 <uartPrintf>
	  uartPrintf(_DEF_CH1,"Message2 : %.*s%s\r\n", (int)message->payloadlen, (char*)message->payload, opts.delimiter);
	  //unsigned char data = (char*)message->payload;
	  uartPrintf(_DEF_CH1,"me--> %s\r\n", (char*)message->payload);

  }
}
 80032a6:	e014      	b.n	80032d2 <messageArrived+0xbe>
	  uartPrintf(_DEF_CH1,"Message2 : %.*s%s\r\n", (int)message->payloadlen, (char*)message->payload, opts.delimiter);
 80032a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4619      	mov	r1, r3
 80032ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <messageArrived+0xcc>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	460a      	mov	r2, r1
 80032bc:	490a      	ldr	r1, [pc, #40]	; (80032e8 <messageArrived+0xd4>)
 80032be:	2000      	movs	r0, #0
 80032c0:	f7ff fd90 	bl	8002de4 <uartPrintf>
	  uartPrintf(_DEF_CH1,"me--> %s\r\n", (char*)message->payload);
 80032c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	461a      	mov	r2, r3
 80032ca:	4908      	ldr	r1, [pc, #32]	; (80032ec <messageArrived+0xd8>)
 80032cc:	2000      	movs	r0, #0
 80032ce:	f7ff fd89 	bl	8002de4 <uartPrintf>
}
 80032d2:	bf00      	nop
 80032d4:	3780      	adds	r7, #128	; 0x80
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	08015dec 	.word	0x08015dec
 80032e0:	20000030 	.word	0x20000030
 80032e4:	08015e04 	.word	0x08015e04
 80032e8:	08015e18 	.word	0x08015e18
 80032ec:	08015e2c 	.word	0x08015e2c

080032f0 <MqttRun>:

void MqttRun(void)
{
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 80032f6:	af04      	add	r7, sp, #16
	int rc = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t adc_raw;

	//Json create


	uartPrintf(_DEF_CH1,"---------------------------------------------------\r\n");
 80032fe:	49b7      	ldr	r1, [pc, #732]	; (80035dc <MqttRun+0x2ec>)
 8003300:	2000      	movs	r0, #0
 8003302:	f7ff fd6f 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1,"Mqtt Run...\r\n");
 8003306:	49b6      	ldr	r1, [pc, #728]	; (80035e0 <MqttRun+0x2f0>)
 8003308:	2000      	movs	r0, #0
 800330a:	f7ff fd6b 	bl	8002de4 <uartPrintf>
	uartPrintf(_DEF_CH1,"---------------------------------------------------\r\n");
 800330e:	49b3      	ldr	r1, [pc, #716]	; (80035dc <MqttRun+0x2ec>)
 8003310:	2000      	movs	r0, #0
 8003312:	f7ff fd67 	bl	8002de4 <uartPrintf>

	NewNetwork(&n, 0);
 8003316:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f00e f817 	bl	8011350 <NewNetwork>
//	uint8_t Error = ConnectNetwork(&n, dnsclient_ip, targetPort);
	uint8_t Error = ConnectNetwork(&n, targetIP, targetPort);
 8003322:	4bb0      	ldr	r3, [pc, #704]	; (80035e4 <MqttRun+0x2f4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	b29a      	uxth	r2, r3
 8003328:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800332c:	49ae      	ldr	r1, [pc, #696]	; (80035e8 <MqttRun+0x2f8>)
 800332e:	4618      	mov	r0, r3
 8003330:	f00e f889 	bl	8011446 <ConnectNetwork>
 8003334:	4603      	mov	r3, r0
 8003336:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

	if(Error == SOCK_OK)
 800333a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800333e:	2b01      	cmp	r3, #1
 8003340:	f040 808f 	bne.w	8003462 <MqttRun+0x172>
	{
#ifdef _USE_DBG_
		uartPrintf(_DEF_CH1, "[ ConnectNetwork... ]\n\r");
 8003344:	49a9      	ldr	r1, [pc, #676]	; (80035ec <MqttRun+0x2fc>)
 8003346:	2000      	movs	r0, #0
 8003348:	f7ff fd4c 	bl	8002de4 <uartPrintf>
		uartPrintf(_DEF_CH1, "\r");
 800334c:	49a8      	ldr	r1, [pc, #672]	; (80035f0 <MqttRun+0x300>)
 800334e:	2000      	movs	r0, #0
 8003350:	f7ff fd48 	bl	8002de4 <uartPrintf>
		}
#endif
	}


	MQTTClientInit(&c, &n, 1000, buf, sizeof(buf), tempBuffer, sizeof(tempBuffer));
 8003354:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003358:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800335c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003364:	9202      	str	r2, [sp, #8]
 8003366:	4aa3      	ldr	r2, [pc, #652]	; (80035f4 <MqttRun+0x304>)
 8003368:	9201      	str	r2, [sp, #4]
 800336a:	2264      	movs	r2, #100	; 0x64
 800336c:	9200      	str	r2, [sp, #0]
 800336e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003372:	f00d fa49 	bl	8010808 <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8003376:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800337a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800337e:	4a9e      	ldr	r2, [pc, #632]	; (80035f8 <MqttRun+0x308>)
 8003380:	4618      	mov	r0, r3
 8003382:	4611      	mov	r1, r2
 8003384:	2358      	movs	r3, #88	; 0x58
 8003386:	461a      	mov	r2, r3
 8003388:	f010 f8a5 	bl	80134d6 <memcpy>
	data.willFlag = 0;
 800338c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003390:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003394:	2200      	movs	r2, #0
 8003396:	76da      	strb	r2, [r3, #27]
	data.MQTTVersion = 3;
 8003398:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800339c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80033a0:	2203      	movs	r2, #3
 80033a2:	721a      	strb	r2, [r3, #8]
	data.clientID.cstring = opts.clientid;
 80033a4:	4b95      	ldr	r3, [pc, #596]	; (80035fc <MqttRun+0x30c>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80033ac:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80033b0:	60da      	str	r2, [r3, #12]
	data.username.cstring = opts.username;
 80033b2:	4b92      	ldr	r3, [pc, #584]	; (80035fc <MqttRun+0x30c>)
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80033ba:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
	data.password.cstring = opts.password;
 80033c0:	4b8e      	ldr	r3, [pc, #568]	; (80035fc <MqttRun+0x30c>)
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80033c8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80033cc:	64da      	str	r2, [r3, #76]	; 0x4c

	data.keepAliveInterval = 60;
 80033ce:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80033d2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80033d6:	223c      	movs	r2, #60	; 0x3c
 80033d8:	831a      	strh	r2, [r3, #24]
	//data.keepAliveInterval = 80;
	data.cleansession = 1;
 80033da:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80033de:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80033e2:	2201      	movs	r2, #1
 80033e4:	769a      	strb	r2, [r3, #26]

	rc = MQTTConnect(&c, &data);
 80033e6:	1d3a      	adds	r2, r7, #4
 80033e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f00d fd32 	bl	8010e58 <MQTTConnect>
 80033f4:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
	uartPrintf(_DEF_CH1,"[ Connected Mqtt server ]...%d\r\n", rc);
 80033f8:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80033fc:	4980      	ldr	r1, [pc, #512]	; (8003600 <MqttRun+0x310>)
 80033fe:	2000      	movs	r0, #0
 8003400:	f7ff fcf0 	bl	8002de4 <uartPrintf>
	opts.showtopics = 1;
 8003404:	4b7d      	ldr	r3, [pc, #500]	; (80035fc <MqttRun+0x30c>)
 8003406:	2201      	movs	r2, #1
 8003408:	621a      	str	r2, [r3, #32]

	uartPrintf(_DEF_CH1,"[ Subscribing to %s ]\r\n", MQTT_TOPIC);
 800340a:	4a7e      	ldr	r2, [pc, #504]	; (8003604 <MqttRun+0x314>)
 800340c:	497e      	ldr	r1, [pc, #504]	; (8003608 <MqttRun+0x318>)
 800340e:	2000      	movs	r0, #0
 8003410:	f7ff fce8 	bl	8002de4 <uartPrintf>
	rc = MQTTSubscribe(&c, MQTT_TOPIC, opts.qos, messageArrived);
 8003414:	4b79      	ldr	r3, [pc, #484]	; (80035fc <MqttRun+0x30c>)
 8003416:	7b1a      	ldrb	r2, [r3, #12]
 8003418:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800341c:	4b7b      	ldr	r3, [pc, #492]	; (800360c <MqttRun+0x31c>)
 800341e:	4979      	ldr	r1, [pc, #484]	; (8003604 <MqttRun+0x314>)
 8003420:	f00d fda0 	bl	8010f64 <MQTTSubscribe>
 8003424:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
	uartPrintf(_DEF_CH1,"[ Subscribed %d ]\r\n", rc);
 8003428:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800342c:	4978      	ldr	r1, [pc, #480]	; (8003610 <MqttRun+0x320>)
 800342e:	2000      	movs	r0, #0
 8003430:	f7ff fcd8 	bl	8002de4 <uartPrintf>

	#if PUBLISH_MYSELF == 1
	m.qos = QOS0;
 8003434:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003438:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
	m.retained = 0;
 8003440:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003444:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003448:	2200      	movs	r2, #0
 800344a:	705a      	strb	r2, [r3, #1]
	m.dup = 0;
 800344c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003450:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003454:	2200      	movs	r2, #0
 8003456:	709a      	strb	r2, [r3, #2]

	ck_timer = millis();
 8003458:	f7ff fd49 	bl	8002eee <millis>
 800345c:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
 8003460:	e001      	b.n	8003466 <MqttRun+0x176>
			NVIC_SystemReset();
 8003462:	f7ff fd4b 	bl	8002efc <__NVIC_SystemReset>
	#endif


	while(1)
	{
		MQTTYield(&c, data.keepAliveInterval);
 8003466:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800346a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800346e:	8b1b      	ldrh	r3, [r3, #24]
 8003470:	461a      	mov	r2, r3
 8003472:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003476:	4611      	mov	r1, r2
 8003478:	4618      	mov	r0, r3
 800347a:	f00d fca9 	bl	8010dd0 <MQTTYield>

		#if PUBLISH_MYSELF == 1

		if(ck_timer + 10000 < millis())
 800347e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003482:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8003486:	3410      	adds	r4, #16
 8003488:	f7ff fd31 	bl	8002eee <millis>
 800348c:	4603      	mov	r3, r0
 800348e:	429c      	cmp	r4, r3
 8003490:	d2e9      	bcs.n	8003466 <MqttRun+0x176>
		{
			//uartPrintf(_DEF_CH1,"time check to %d\r\n", ck_timer);
			ck_timer = millis();
 8003492:	f7ff fd2c 	bl	8002eee <millis>
 8003496:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c

			uartPrintf(_DEF_CH1,"[ Publishing to %s ]\r\n", MQTT_TOPIC);
 800349a:	4a5a      	ldr	r2, [pc, #360]	; (8003604 <MqttRun+0x314>)
 800349c:	495d      	ldr	r1, [pc, #372]	; (8003614 <MqttRun+0x324>)
 800349e:	2000      	movs	r0, #0
 80034a0:	f7ff fca0 	bl	8002de4 <uartPrintf>
			uartPrintf(_DEF_CH1,"-----------------------------------------\r\n");
 80034a4:	495c      	ldr	r1, [pc, #368]	; (8003618 <MqttRun+0x328>)
 80034a6:	2000      	movs	r0, #0
 80034a8:	f7ff fc9c 	bl	8002de4 <uartPrintf>
			uartPrintf(_DEF_CH1,"\r");
 80034ac:	4950      	ldr	r1, [pc, #320]	; (80035f0 <MqttRun+0x300>)
 80034ae:	2000      	movs	r0, #0
 80034b0:	f7ff fc98 	bl	8002de4 <uartPrintf>

//			sprintf(pubbuf, "Test Mqtt message" );
			dist = ReadAvgDst();
 80034b4:	f7ff f9e8 	bl	8002888 <ReadAvgDst>
 80034b8:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
			adc_raw = ReadDst();
 80034bc:	f7ff f98e 	bl	80027dc <ReadDst>
 80034c0:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c

			cJSON * root = cJSON_CreateObject();
 80034c4:	f7fe ff3e 	bl	8002344 <cJSON_CreateObject>
 80034c8:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
//			cJSON_AddItemToObject(root,"serial_number", cJSON_CreateString("23040002"));
			cJSON_AddItemToObject(root,"type", cJSON_CreateString("new"));
 80034cc:	4853      	ldr	r0, [pc, #332]	; (800361c <MqttRun+0x32c>)
 80034ce:	f7fe ff13 	bl	80022f8 <cJSON_CreateString>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	4952      	ldr	r1, [pc, #328]	; (8003620 <MqttRun+0x330>)
 80034d8:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80034dc:	f7fe feac 	bl	8002238 <cJSON_AddItemToObject>
			cJSON_AddItemToObject(root,"value", cJSON_CreateNumber(dist));
 80034e0:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80034e4:	f7fc ff88 	bl	80003f8 <__aeabi_ui2d>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	f7fe feba 	bl	8002268 <cJSON_CreateNumber>
 80034f4:	4603      	mov	r3, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	494a      	ldr	r1, [pc, #296]	; (8003624 <MqttRun+0x334>)
 80034fa:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80034fe:	f7fe fe9b 	bl	8002238 <cJSON_AddItemToObject>
			cJSON_AddItemToObject(root,"raw", cJSON_CreateNumber(adc_raw));
 8003502:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8003506:	f7fc ff77 	bl	80003f8 <__aeabi_ui2d>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4610      	mov	r0, r2
 8003510:	4619      	mov	r1, r3
 8003512:	f7fe fea9 	bl	8002268 <cJSON_CreateNumber>
 8003516:	4603      	mov	r3, r0
 8003518:	461a      	mov	r2, r3
 800351a:	4943      	ldr	r1, [pc, #268]	; (8003628 <MqttRun+0x338>)
 800351c:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8003520:	f7fe fe8a 	bl	8002238 <cJSON_AddItemToObject>
			unsigned char *jsonString = cJSON_Print(root);
 8003524:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8003528:	f7fe fb48 	bl	8001bbc <cJSON_Print>
 800352c:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204

//			uartPrintf(_DEF_CH1,(uint8_t *)jsonString);

			sprintf(pubbuf, (uint8_t *)jsonString);
 8003530:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003534:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8003538:	4618      	mov	r0, r3
 800353a:	f00f fd6b 	bl	8013014 <siprintf>
			m.payload = pubbuf;
 800353e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003542:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003546:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800354a:	609a      	str	r2, [r3, #8]
			m.payloadlen = strlen(pubbuf);
 800354c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003550:	4618      	mov	r0, r3
 8003552:	f7fc fe07 	bl	8000164 <strlen>
 8003556:	4602      	mov	r2, r0
 8003558:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800355c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003560:	60da      	str	r2, [r3, #12]
//			m.payload = (uint8_t *)jsonString;
//			m.payloadlen = strlen(jsonString);

			rc = MQTTPublish(&c, MQTT_TOPIC, &m);
 8003562:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003566:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800356a:	4926      	ldr	r1, [pc, #152]	; (8003604 <MqttRun+0x314>)
 800356c:	4618      	mov	r0, r3
 800356e:	f00d fda2 	bl	80110b6 <MQTTPublish>
 8003572:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
			uartPrintf(_DEF_CH1,"-----------------------------------------\r\n");
 8003576:	4928      	ldr	r1, [pc, #160]	; (8003618 <MqttRun+0x328>)
 8003578:	2000      	movs	r0, #0
 800357a:	f7ff fc33 	bl	8002de4 <uartPrintf>
			uartPrintf(_DEF_CH1,"\r");
 800357e:	491c      	ldr	r1, [pc, #112]	; (80035f0 <MqttRun+0x300>)
 8003580:	2000      	movs	r0, #0
 8003582:	f7ff fc2f 	bl	8002de4 <uartPrintf>
			uartPrintf(_DEF_CH1,"[ Published result : %d ]\r\n", rc);
 8003586:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800358a:	4928      	ldr	r1, [pc, #160]	; (800362c <MqttRun+0x33c>)
 800358c:	2000      	movs	r0, #0
 800358e:	f7ff fc29 	bl	8002de4 <uartPrintf>
			uartPrintf(_DEF_CH1,"\r");
 8003592:	4917      	ldr	r1, [pc, #92]	; (80035f0 <MqttRun+0x300>)
 8003594:	2000      	movs	r0, #0
 8003596:	f7ff fc25 	bl	8002de4 <uartPrintf>

			if(rc == 0){
 800359a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d102      	bne.n	80035a8 <MqttRun+0x2b8>
				ledToggle(_DEF_CH1);
 80035a2:	2000      	movs	r0, #0
 80035a4:	f7ff f88a 	bl	80026bc <ledToggle>
			}


			if(rc == -1){
 80035a8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d10a      	bne.n	80035c8 <MqttRun+0x2d8>
				uartPrintf(_DEF_CH1,"[ Published failed... ]\r\n");
 80035b2:	491f      	ldr	r1, [pc, #124]	; (8003630 <MqttRun+0x340>)
 80035b4:	2000      	movs	r0, #0
 80035b6:	f7ff fc15 	bl	8002de4 <uartPrintf>
				MQTTDisconnect(&c);
 80035ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80035be:	4618      	mov	r0, r3
 80035c0:	f00d fe38 	bl	8011234 <MQTTDisconnect>
				NVIC_SystemReset();
 80035c4:	f7ff fc9a 	bl	8002efc <__NVIC_SystemReset>
			}

			cJSON_Delete(root);
 80035c8:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80035cc:	f7fd feea 	bl	80013a4 <cJSON_Delete>
			free(jsonString);
 80035d0:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 80035d4:	f00e fe14 	bl	8012200 <free>
		MQTTYield(&c, data.keepAliveInterval);
 80035d8:	e745      	b.n	8003466 <MqttRun+0x176>
 80035da:	bf00      	nop
 80035dc:	08015c60 	.word	0x08015c60
 80035e0:	08015e38 	.word	0x08015e38
 80035e4:	20000028 	.word	0x20000028
 80035e8:	2000002c 	.word	0x2000002c
 80035ec:	08015e48 	.word	0x08015e48
 80035f0:	08015e60 	.word	0x08015e60
 80035f4:	200006a4 	.word	0x200006a4
 80035f8:	08015f48 	.word	0x08015f48
 80035fc:	20000030 	.word	0x20000030
 8003600:	08015e64 	.word	0x08015e64
 8003604:	08016170 	.word	0x08016170
 8003608:	08015e88 	.word	0x08015e88
 800360c:	08003215 	.word	0x08003215
 8003610:	08015ea0 	.word	0x08015ea0
 8003614:	08015eb4 	.word	0x08015eb4
 8003618:	08015ecc 	.word	0x08015ecc
 800361c:	08015ef8 	.word	0x08015ef8
 8003620:	08015efc 	.word	0x08015efc
 8003624:	08015f04 	.word	0x08015f04
 8003628:	08015f0c 	.word	0x08015f0c
 800362c:	08015f10 	.word	0x08015f10
 8003630:	08015f2c 	.word	0x08015f2c

08003634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003638:	f000 fd68 	bl	800410c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800363c:	f000 f815 	bl	800366a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003640:	f000 f9c4 	bl	80039cc <MX_GPIO_Init>
  MX_DMA_Init();
 8003644:	f000 f9ac 	bl	80039a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003648:	f000 f980 	bl	800394c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800364c:	f000 f86c 	bl	8003728 <MX_ADC1_Init>
  MX_SPI2_Init();
 8003650:	f000 f8f8 	bl	8003844 <MX_SPI2_Init>
  MX_TIM4_Init();
 8003654:	f000 f92c 	bl	80038b0 <MX_TIM4_Init>
  MX_I2C1_Init();
 8003658:	f000 f8c6 	bl	80037e8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800365c:	f009 ffea 	bl	800d634 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  apInit();
 8003660:	f7fd fcba 	bl	8000fd8 <apInit>
  apMain();
 8003664:	f7fd fd26 	bl	80010b4 <apMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003668:	e7fe      	b.n	8003668 <main+0x34>

0800366a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b094      	sub	sp, #80	; 0x50
 800366e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003670:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003674:	2228      	movs	r2, #40	; 0x28
 8003676:	2100      	movs	r1, #0
 8003678:	4618      	mov	r0, r3
 800367a:	f00f fe29 	bl	80132d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800367e:	f107 0314 	add.w	r3, r7, #20
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	605a      	str	r2, [r3, #4]
 8003688:	609a      	str	r2, [r3, #8]
 800368a:	60da      	str	r2, [r3, #12]
 800368c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800369a:	2309      	movs	r3, #9
 800369c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800369e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80036a4:	2300      	movs	r3, #0
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036a8:	2301      	movs	r3, #1
 80036aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80036ac:	2301      	movs	r3, #1
 80036ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036b0:	2302      	movs	r3, #2
 80036b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80036ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80036be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036c4:	4618      	mov	r0, r3
 80036c6:	f004 f83b 	bl	8007740 <HAL_RCC_OscConfig>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80036d0:	f000 fa0c 	bl	8003aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036d4:	230f      	movs	r3, #15
 80036d6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036d8:	2302      	movs	r3, #2
 80036da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036dc:	2300      	movs	r3, #0
 80036de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036e6:	2300      	movs	r3, #0
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036ea:	f107 0314 	add.w	r3, r7, #20
 80036ee:	2102      	movs	r1, #2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f004 faa7 	bl	8007c44 <HAL_RCC_ClockConfig>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80036fc:	f000 f9f6 	bl	8003aec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8003700:	2312      	movs	r3, #18
 8003702:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003708:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800370e:	1d3b      	adds	r3, r7, #4
 8003710:	4618      	mov	r0, r3
 8003712:	f004 fc25 	bl	8007f60 <HAL_RCCEx_PeriphCLKConfig>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800371c:	f000 f9e6 	bl	8003aec <Error_Handler>
  }
}
 8003720:	bf00      	nop
 8003722:	3750      	adds	r7, #80	; 0x50
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003738:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <MX_ADC1_Init+0xb8>)
 800373a:	4a2a      	ldr	r2, [pc, #168]	; (80037e4 <MX_ADC1_Init+0xbc>)
 800373c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800373e:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <MX_ADC1_Init+0xb8>)
 8003740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003744:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003746:	4b26      	ldr	r3, [pc, #152]	; (80037e0 <MX_ADC1_Init+0xb8>)
 8003748:	2201      	movs	r2, #1
 800374a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <MX_ADC1_Init+0xb8>)
 800374e:	2200      	movs	r2, #0
 8003750:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003752:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <MX_ADC1_Init+0xb8>)
 8003754:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003758:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800375a:	4b21      	ldr	r3, [pc, #132]	; (80037e0 <MX_ADC1_Init+0xb8>)
 800375c:	2200      	movs	r2, #0
 800375e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8003760:	4b1f      	ldr	r3, [pc, #124]	; (80037e0 <MX_ADC1_Init+0xb8>)
 8003762:	2203      	movs	r2, #3
 8003764:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003766:	481e      	ldr	r0, [pc, #120]	; (80037e0 <MX_ADC1_Init+0xb8>)
 8003768:	f000 fd56 	bl	8004218 <HAL_ADC_Init>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8003772:	f000 f9bb 	bl	8003aec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003776:	2300      	movs	r3, #0
 8003778:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800377a:	2301      	movs	r3, #1
 800377c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800377e:	2306      	movs	r3, #6
 8003780:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	4619      	mov	r1, r3
 8003786:	4816      	ldr	r0, [pc, #88]	; (80037e0 <MX_ADC1_Init+0xb8>)
 8003788:	f000 ff18 	bl	80045bc <HAL_ADC_ConfigChannel>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003792:	f000 f9ab 	bl	8003aec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003796:	2310      	movs	r3, #16
 8003798:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800379a:	2302      	movs	r3, #2
 800379c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800379e:	2307      	movs	r3, #7
 80037a0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037a2:	1d3b      	adds	r3, r7, #4
 80037a4:	4619      	mov	r1, r3
 80037a6:	480e      	ldr	r0, [pc, #56]	; (80037e0 <MX_ADC1_Init+0xb8>)
 80037a8:	f000 ff08 	bl	80045bc <HAL_ADC_ConfigChannel>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80037b2:	f000 f99b 	bl	8003aec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80037b6:	2311      	movs	r3, #17
 80037b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80037ba:	2303      	movs	r3, #3
 80037bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80037be:	2305      	movs	r3, #5
 80037c0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037c2:	1d3b      	adds	r3, r7, #4
 80037c4:	4619      	mov	r1, r3
 80037c6:	4806      	ldr	r0, [pc, #24]	; (80037e0 <MX_ADC1_Init+0xb8>)
 80037c8:	f000 fef8 	bl	80045bc <HAL_ADC_ConfigChannel>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80037d2:	f000 f98b 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20003784 	.word	0x20003784
 80037e4:	40012400 	.word	0x40012400

080037e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80037ec:	4b13      	ldr	r3, [pc, #76]	; (800383c <MX_I2C1_Init+0x54>)
 80037ee:	4a14      	ldr	r2, [pc, #80]	; (8003840 <MX_I2C1_Init+0x58>)
 80037f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400;
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <MX_I2C1_Init+0x54>)
 80037f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80037f8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <MX_I2C1_Init+0x54>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003800:	4b0e      	ldr	r3, [pc, #56]	; (800383c <MX_I2C1_Init+0x54>)
 8003802:	2200      	movs	r2, #0
 8003804:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <MX_I2C1_Init+0x54>)
 8003808:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800380c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <MX_I2C1_Init+0x54>)
 8003810:	2200      	movs	r2, #0
 8003812:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <MX_I2C1_Init+0x54>)
 8003816:	2200      	movs	r2, #0
 8003818:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <MX_I2C1_Init+0x54>)
 800381c:	2200      	movs	r2, #0
 800381e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <MX_I2C1_Init+0x54>)
 8003822:	2200      	movs	r2, #0
 8003824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003826:	4805      	ldr	r0, [pc, #20]	; (800383c <MX_I2C1_Init+0x54>)
 8003828:	f001 fdaa 	bl	8005380 <HAL_I2C_Init>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8003832:	f000 f95b 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20003730 	.word	0x20003730
 8003840:	40005400 	.word	0x40005400

08003844 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003848:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <MX_SPI2_Init+0x64>)
 800384a:	4a18      	ldr	r2, [pc, #96]	; (80038ac <MX_SPI2_Init+0x68>)
 800384c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800384e:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <MX_SPI2_Init+0x64>)
 8003850:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003854:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003856:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <MX_SPI2_Init+0x64>)
 8003858:	2200      	movs	r2, #0
 800385a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <MX_SPI2_Init+0x64>)
 800385e:	2200      	movs	r2, #0
 8003860:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003862:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <MX_SPI2_Init+0x64>)
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <MX_SPI2_Init+0x64>)
 800386a:	2200      	movs	r2, #0
 800386c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800386e:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <MX_SPI2_Init+0x64>)
 8003870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003874:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <MX_SPI2_Init+0x64>)
 8003878:	2200      	movs	r2, #0
 800387a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <MX_SPI2_Init+0x64>)
 800387e:	2200      	movs	r2, #0
 8003880:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <MX_SPI2_Init+0x64>)
 8003884:	2200      	movs	r2, #0
 8003886:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003888:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <MX_SPI2_Init+0x64>)
 800388a:	2200      	movs	r2, #0
 800388c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <MX_SPI2_Init+0x64>)
 8003890:	220a      	movs	r2, #10
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003894:	4804      	ldr	r0, [pc, #16]	; (80038a8 <MX_SPI2_Init+0x64>)
 8003896:	f004 fccf 	bl	8008238 <HAL_SPI_Init>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80038a0:	f000 f924 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80038a4:	bf00      	nop
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20003690 	.word	0x20003690
 80038ac:	40003800 	.word	0x40003800

080038b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038b6:	f107 0308 	add.w	r3, r7, #8
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	609a      	str	r2, [r3, #8]
 80038c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038c4:	463b      	mov	r3, r7
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038cc:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <MX_TIM4_Init+0x94>)
 80038ce:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <MX_TIM4_Init+0x98>)
 80038d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 80038d2:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <MX_TIM4_Init+0x94>)
 80038d4:	223f      	movs	r2, #63	; 0x3f
 80038d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <MX_TIM4_Init+0x94>)
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80038de:	4b19      	ldr	r3, [pc, #100]	; (8003944 <MX_TIM4_Init+0x94>)
 80038e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038e6:	4b17      	ldr	r3, [pc, #92]	; (8003944 <MX_TIM4_Init+0x94>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ec:	4b15      	ldr	r3, [pc, #84]	; (8003944 <MX_TIM4_Init+0x94>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80038f2:	4814      	ldr	r0, [pc, #80]	; (8003944 <MX_TIM4_Init+0x94>)
 80038f4:	f004 ff88 	bl	8008808 <HAL_TIM_Base_Init>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80038fe:	f000 f8f5 	bl	8003aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003906:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003908:	f107 0308 	add.w	r3, r7, #8
 800390c:	4619      	mov	r1, r3
 800390e:	480d      	ldr	r0, [pc, #52]	; (8003944 <MX_TIM4_Init+0x94>)
 8003910:	f005 f924 	bl	8008b5c <HAL_TIM_ConfigClockSource>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800391a:	f000 f8e7 	bl	8003aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003922:	2300      	movs	r3, #0
 8003924:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003926:	463b      	mov	r3, r7
 8003928:	4619      	mov	r1, r3
 800392a:	4806      	ldr	r0, [pc, #24]	; (8003944 <MX_TIM4_Init+0x94>)
 800392c:	f005 fafa 	bl	8008f24 <HAL_TIMEx_MasterConfigSynchronization>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003936:	f000 f8d9 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800393a:	bf00      	nop
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	200036e8 	.word	0x200036e8
 8003948:	40000800 	.word	0x40000800

0800394c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <MX_USART2_UART_Init+0x4c>)
 8003952:	4a12      	ldr	r2, [pc, #72]	; (800399c <MX_USART2_UART_Init+0x50>)
 8003954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <MX_USART2_UART_Init+0x4c>)
 8003958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800395c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800395e:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <MX_USART2_UART_Init+0x4c>)
 8003960:	2200      	movs	r2, #0
 8003962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <MX_USART2_UART_Init+0x4c>)
 8003966:	2200      	movs	r2, #0
 8003968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <MX_USART2_UART_Init+0x4c>)
 800396c:	2200      	movs	r2, #0
 800396e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003970:	4b09      	ldr	r3, [pc, #36]	; (8003998 <MX_USART2_UART_Init+0x4c>)
 8003972:	220c      	movs	r2, #12
 8003974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003976:	4b08      	ldr	r3, [pc, #32]	; (8003998 <MX_USART2_UART_Init+0x4c>)
 8003978:	2200      	movs	r2, #0
 800397a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <MX_USART2_UART_Init+0x4c>)
 800397e:	2200      	movs	r2, #0
 8003980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003982:	4805      	ldr	r0, [pc, #20]	; (8003998 <MX_USART2_UART_Init+0x4c>)
 8003984:	f005 fb3e 	bl	8009004 <HAL_UART_Init>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800398e:	f000 f8ad 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	200037f8 	.word	0x200037f8
 800399c:	40004400 	.word	0x40004400

080039a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039a6:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <MX_DMA_Init+0x28>)
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	4a07      	ldr	r2, [pc, #28]	; (80039c8 <MX_DMA_Init+0x28>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6153      	str	r3, [r2, #20]
 80039b2:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <MX_DMA_Init+0x28>)
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	607b      	str	r3, [r7, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]

}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	40021000 	.word	0x40021000

080039cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d2:	f107 0310 	add.w	r3, r7, #16
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	609a      	str	r2, [r3, #8]
 80039de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039e0:	4b3e      	ldr	r3, [pc, #248]	; (8003adc <MX_GPIO_Init+0x110>)
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	4a3d      	ldr	r2, [pc, #244]	; (8003adc <MX_GPIO_Init+0x110>)
 80039e6:	f043 0320 	orr.w	r3, r3, #32
 80039ea:	6193      	str	r3, [r2, #24]
 80039ec:	4b3b      	ldr	r3, [pc, #236]	; (8003adc <MX_GPIO_Init+0x110>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f8:	4b38      	ldr	r3, [pc, #224]	; (8003adc <MX_GPIO_Init+0x110>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	4a37      	ldr	r2, [pc, #220]	; (8003adc <MX_GPIO_Init+0x110>)
 80039fe:	f043 0304 	orr.w	r3, r3, #4
 8003a02:	6193      	str	r3, [r2, #24]
 8003a04:	4b35      	ldr	r3, [pc, #212]	; (8003adc <MX_GPIO_Init+0x110>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a10:	4b32      	ldr	r3, [pc, #200]	; (8003adc <MX_GPIO_Init+0x110>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	4a31      	ldr	r2, [pc, #196]	; (8003adc <MX_GPIO_Init+0x110>)
 8003a16:	f043 0308 	orr.w	r3, r3, #8
 8003a1a:	6193      	str	r3, [r2, #24]
 8003a1c:	4b2f      	ldr	r3, [pc, #188]	; (8003adc <MX_GPIO_Init+0x110>)
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	607b      	str	r3, [r7, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a28:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <MX_GPIO_Init+0x110>)
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	4a2b      	ldr	r2, [pc, #172]	; (8003adc <MX_GPIO_Init+0x110>)
 8003a2e:	f043 0310 	orr.w	r3, r3, #16
 8003a32:	6193      	str	r3, [r2, #24]
 8003a34:	4b29      	ldr	r3, [pc, #164]	; (8003adc <MX_GPIO_Init+0x110>)
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	603b      	str	r3, [r7, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003a40:	2200      	movs	r2, #0
 8003a42:	2120      	movs	r1, #32
 8003a44:	4826      	ldr	r0, [pc, #152]	; (8003ae0 <MX_GPIO_Init+0x114>)
 8003a46:	f001 fc6a 	bl	800531e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a50:	4824      	ldr	r0, [pc, #144]	; (8003ae4 <MX_GPIO_Init+0x118>)
 8003a52:	f001 fc64 	bl	800531e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8003a56:	2200      	movs	r2, #0
 8003a58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a5c:	4822      	ldr	r0, [pc, #136]	; (8003ae8 <MX_GPIO_Init+0x11c>)
 8003a5e:	f001 fc5e 	bl	800531e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003a62:	2320      	movs	r3, #32
 8003a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a66:	2301      	movs	r3, #1
 8003a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a72:	f107 0310 	add.w	r3, r7, #16
 8003a76:	4619      	mov	r1, r3
 8003a78:	4819      	ldr	r0, [pc, #100]	; (8003ae0 <MX_GPIO_Init+0x114>)
 8003a7a:	f001 fab5 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a84:	2301      	movs	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a90:	f107 0310 	add.w	r3, r7, #16
 8003a94:	4619      	mov	r1, r3
 8003a96:	4813      	ldr	r0, [pc, #76]	; (8003ae4 <MX_GPIO_Init+0x118>)
 8003a98:	f001 faa6 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aae:	f107 0310 	add.w	r3, r7, #16
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	480c      	ldr	r0, [pc, #48]	; (8003ae8 <MX_GPIO_Init+0x11c>)
 8003ab6:	f001 fa97 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003aba:	2380      	movs	r3, #128	; 0x80
 8003abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac6:	f107 0310 	add.w	r3, r7, #16
 8003aca:	4619      	mov	r1, r3
 8003acc:	4805      	ldr	r0, [pc, #20]	; (8003ae4 <MX_GPIO_Init+0x118>)
 8003ace:	f001 fa8b 	bl	8004fe8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ad2:	bf00      	nop
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40010800 	.word	0x40010800
 8003ae4:	40010c00 	.word	0x40010c00
 8003ae8:	40011000 	.word	0x40011000

08003aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003af0:	b672      	cpsid	i
}
 8003af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003af4:	e7fe      	b.n	8003af4 <Error_Handler+0x8>
	...

08003af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003afe:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <HAL_MspInit+0x5c>)
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <HAL_MspInit+0x5c>)
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	6193      	str	r3, [r2, #24]
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <HAL_MspInit+0x5c>)
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <HAL_MspInit+0x5c>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <HAL_MspInit+0x5c>)
 8003b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b20:	61d3      	str	r3, [r2, #28]
 8003b22:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <HAL_MspInit+0x5c>)
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	607b      	str	r3, [r7, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <HAL_MspInit+0x60>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	4a04      	ldr	r2, [pc, #16]	; (8003b58 <HAL_MspInit+0x60>)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40010000 	.word	0x40010000

08003b5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b64:	f107 0310 	add.w	r3, r7, #16
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a28      	ldr	r2, [pc, #160]	; (8003c18 <HAL_ADC_MspInit+0xbc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d149      	bne.n	8003c10 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b7c:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <HAL_ADC_MspInit+0xc0>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	4a26      	ldr	r2, [pc, #152]	; (8003c1c <HAL_ADC_MspInit+0xc0>)
 8003b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b86:	6193      	str	r3, [r2, #24]
 8003b88:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <HAL_ADC_MspInit+0xc0>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <HAL_ADC_MspInit+0xc0>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	4a20      	ldr	r2, [pc, #128]	; (8003c1c <HAL_ADC_MspInit+0xc0>)
 8003b9a:	f043 0304 	orr.w	r3, r3, #4
 8003b9e:	6193      	str	r3, [r2, #24]
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <HAL_ADC_MspInit+0xc0>)
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003bac:	2301      	movs	r3, #1
 8003bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb4:	f107 0310 	add.w	r3, r7, #16
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4819      	ldr	r0, [pc, #100]	; (8003c20 <HAL_ADC_MspInit+0xc4>)
 8003bbc:	f001 fa14 	bl	8004fe8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003bc0:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <HAL_ADC_MspInit+0xc8>)
 8003bc2:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <HAL_ADC_MspInit+0xcc>)
 8003bc4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bc6:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <HAL_ADC_MspInit+0xc8>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bcc:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <HAL_ADC_MspInit+0xc8>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003bd2:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <HAL_ADC_MspInit+0xc8>)
 8003bd4:	2280      	movs	r2, #128	; 0x80
 8003bd6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003bd8:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <HAL_ADC_MspInit+0xc8>)
 8003bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bde:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003be0:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <HAL_ADC_MspInit+0xc8>)
 8003be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003be6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <HAL_ADC_MspInit+0xc8>)
 8003bea:	2220      	movs	r2, #32
 8003bec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003bee:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <HAL_ADC_MspInit+0xc8>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003bf4:	480b      	ldr	r0, [pc, #44]	; (8003c24 <HAL_ADC_MspInit+0xc8>)
 8003bf6:	f001 f897 	bl	8004d28 <HAL_DMA_Init>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8003c00:	f7ff ff74 	bl	8003aec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a07      	ldr	r2, [pc, #28]	; (8003c24 <HAL_ADC_MspInit+0xc8>)
 8003c08:	621a      	str	r2, [r3, #32]
 8003c0a:	4a06      	ldr	r2, [pc, #24]	; (8003c24 <HAL_ADC_MspInit+0xc8>)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c10:	bf00      	nop
 8003c12:	3720      	adds	r7, #32
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40012400 	.word	0x40012400
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40010800 	.word	0x40010800
 8003c24:	200037b4 	.word	0x200037b4
 8003c28:	40020008 	.word	0x40020008

08003c2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08a      	sub	sp, #40	; 0x28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c34:	f107 0314 	add.w	r3, r7, #20
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a21      	ldr	r2, [pc, #132]	; (8003ccc <HAL_I2C_MspInit+0xa0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d13a      	bne.n	8003cc2 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c4c:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <HAL_I2C_MspInit+0xa4>)
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <HAL_I2C_MspInit+0xa4>)
 8003c52:	f043 0308 	orr.w	r3, r3, #8
 8003c56:	6193      	str	r3, [r2, #24]
 8003c58:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <HAL_I2C_MspInit+0xa4>)
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c6a:	2312      	movs	r3, #18
 8003c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c72:	f107 0314 	add.w	r3, r7, #20
 8003c76:	4619      	mov	r1, r3
 8003c78:	4816      	ldr	r0, [pc, #88]	; (8003cd4 <HAL_I2C_MspInit+0xa8>)
 8003c7a:	f001 f9b5 	bl	8004fe8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003c7e:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <HAL_I2C_MspInit+0xac>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	f043 0302 	orr.w	r3, r3, #2
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
 8003c94:	4a10      	ldr	r2, [pc, #64]	; (8003cd8 <HAL_I2C_MspInit+0xac>)
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <HAL_I2C_MspInit+0xa4>)
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <HAL_I2C_MspInit+0xa4>)
 8003ca0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ca4:	61d3      	str	r3, [r2, #28]
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <HAL_I2C_MspInit+0xa4>)
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	2020      	movs	r0, #32
 8003cb8:	f000 ffff 	bl	8004cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003cbc:	2020      	movs	r0, #32
 8003cbe:	f001 f818 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003cc2:	bf00      	nop
 8003cc4:	3728      	adds	r7, #40	; 0x28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40005400 	.word	0x40005400
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40010c00 	.word	0x40010c00
 8003cd8:	40010000 	.word	0x40010000

08003cdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce4:	f107 0310 	add.w	r3, r7, #16
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	605a      	str	r2, [r3, #4]
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <HAL_SPI_MspInit+0x8c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d131      	bne.n	8003d60 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_SPI_MspInit+0x90>)
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <HAL_SPI_MspInit+0x90>)
 8003d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d06:	61d3      	str	r3, [r2, #28]
 8003d08:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <HAL_SPI_MspInit+0x90>)
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d14:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <HAL_SPI_MspInit+0x90>)
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <HAL_SPI_MspInit+0x90>)
 8003d1a:	f043 0308 	orr.w	r3, r3, #8
 8003d1e:	6193      	str	r3, [r2, #24]
 8003d20:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <HAL_SPI_MspInit+0x90>)
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003d2c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003d30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d32:	2302      	movs	r3, #2
 8003d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d36:	2303      	movs	r3, #3
 8003d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d3a:	f107 0310 	add.w	r3, r7, #16
 8003d3e:	4619      	mov	r1, r3
 8003d40:	480b      	ldr	r0, [pc, #44]	; (8003d70 <HAL_SPI_MspInit+0x94>)
 8003d42:	f001 f951 	bl	8004fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003d46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d54:	f107 0310 	add.w	r3, r7, #16
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4805      	ldr	r0, [pc, #20]	; (8003d70 <HAL_SPI_MspInit+0x94>)
 8003d5c:	f001 f944 	bl	8004fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003d60:	bf00      	nop
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40003800 	.word	0x40003800
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40010c00 	.word	0x40010c00

08003d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a0d      	ldr	r2, [pc, #52]	; (8003db8 <HAL_TIM_Base_MspInit+0x44>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d113      	bne.n	8003dae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d86:	4b0d      	ldr	r3, [pc, #52]	; (8003dbc <HAL_TIM_Base_MspInit+0x48>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4a0c      	ldr	r2, [pc, #48]	; (8003dbc <HAL_TIM_Base_MspInit+0x48>)
 8003d8c:	f043 0304 	orr.w	r3, r3, #4
 8003d90:	61d3      	str	r3, [r2, #28]
 8003d92:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <HAL_TIM_Base_MspInit+0x48>)
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2103      	movs	r1, #3
 8003da2:	201e      	movs	r0, #30
 8003da4:	f000 ff89 	bl	8004cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003da8:	201e      	movs	r0, #30
 8003daa:	f000 ffa2 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003dae:	bf00      	nop
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40000800 	.word	0x40000800
 8003dbc:	40021000 	.word	0x40021000

08003dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc8:	f107 0310 	add.w	r3, r7, #16
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a2e      	ldr	r2, [pc, #184]	; (8003e94 <HAL_UART_MspInit+0xd4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d155      	bne.n	8003e8c <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003de0:	4b2d      	ldr	r3, [pc, #180]	; (8003e98 <HAL_UART_MspInit+0xd8>)
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	4a2c      	ldr	r2, [pc, #176]	; (8003e98 <HAL_UART_MspInit+0xd8>)
 8003de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dea:	61d3      	str	r3, [r2, #28]
 8003dec:	4b2a      	ldr	r3, [pc, #168]	; (8003e98 <HAL_UART_MspInit+0xd8>)
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df8:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <HAL_UART_MspInit+0xd8>)
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	4a26      	ldr	r2, [pc, #152]	; (8003e98 <HAL_UART_MspInit+0xd8>)
 8003dfe:	f043 0304 	orr.w	r3, r3, #4
 8003e02:	6193      	str	r3, [r2, #24]
 8003e04:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <HAL_UART_MspInit+0xd8>)
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e10:	2304      	movs	r3, #4
 8003e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e14:	2302      	movs	r3, #2
 8003e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e1c:	f107 0310 	add.w	r3, r7, #16
 8003e20:	4619      	mov	r1, r3
 8003e22:	481e      	ldr	r0, [pc, #120]	; (8003e9c <HAL_UART_MspInit+0xdc>)
 8003e24:	f001 f8e0 	bl	8004fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e28:	2308      	movs	r3, #8
 8003e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e34:	f107 0310 	add.w	r3, r7, #16
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4818      	ldr	r0, [pc, #96]	; (8003e9c <HAL_UART_MspInit+0xdc>)
 8003e3c:	f001 f8d4 	bl	8004fe8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003e40:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <HAL_UART_MspInit+0xe0>)
 8003e42:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <HAL_UART_MspInit+0xe4>)
 8003e44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e46:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <HAL_UART_MspInit+0xe0>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e4c:	4b14      	ldr	r3, [pc, #80]	; (8003ea0 <HAL_UART_MspInit+0xe0>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e52:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <HAL_UART_MspInit+0xe0>)
 8003e54:	2280      	movs	r2, #128	; 0x80
 8003e56:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e58:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <HAL_UART_MspInit+0xe0>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <HAL_UART_MspInit+0xe0>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003e64:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <HAL_UART_MspInit+0xe0>)
 8003e66:	2220      	movs	r2, #32
 8003e68:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <HAL_UART_MspInit+0xe0>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e70:	480b      	ldr	r0, [pc, #44]	; (8003ea0 <HAL_UART_MspInit+0xe0>)
 8003e72:	f000 ff59 	bl	8004d28 <HAL_DMA_Init>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003e7c:	f7ff fe36 	bl	8003aec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a07      	ldr	r2, [pc, #28]	; (8003ea0 <HAL_UART_MspInit+0xe0>)
 8003e84:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e86:	4a06      	ldr	r2, [pc, #24]	; (8003ea0 <HAL_UART_MspInit+0xe0>)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e8c:	bf00      	nop
 8003e8e:	3720      	adds	r7, #32
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40004400 	.word	0x40004400
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40010800 	.word	0x40010800
 8003ea0:	2000364c 	.word	0x2000364c
 8003ea4:	4002006c 	.word	0x4002006c

08003ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003eac:	e7fe      	b.n	8003eac <NMI_Handler+0x4>

08003eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eb2:	e7fe      	b.n	8003eb2 <HardFault_Handler+0x4>

08003eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eb8:	e7fe      	b.n	8003eb8 <MemManage_Handler+0x4>

08003eba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ebe:	e7fe      	b.n	8003ebe <BusFault_Handler+0x4>

08003ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ec4:	e7fe      	b.n	8003ec4 <UsageFault_Handler+0x4>

08003ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr

08003ed2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eee:	f000 f953 	bl	8004198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ef2:	bf00      	nop
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003efc:	4802      	ldr	r0, [pc, #8]	; (8003f08 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003efe:	f001 ffd6 	bl	8005eae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20004508 	.word	0x20004508

08003f0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f10:	4802      	ldr	r0, [pc, #8]	; (8003f1c <TIM4_IRQHandler+0x10>)
 8003f12:	f004 fd1b 	bl	800894c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	200036e8 	.word	0x200036e8

08003f20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003f24:	4802      	ldr	r0, [pc, #8]	; (8003f30 <I2C1_ER_IRQHandler+0x10>)
 8003f26:	f001 fb83 	bl	8005630 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20003730 	.word	0x20003730

08003f34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return 1;
 8003f38:	2301      	movs	r3, #1
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr

08003f42 <_kill>:

int _kill(int pid, int sig)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f4c:	f00f fa80 	bl	8013450 <__errno>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2216      	movs	r2, #22
 8003f54:	601a      	str	r2, [r3, #0]
  return -1;
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <_exit>:

void _exit (int status)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff ffe7 	bl	8003f42 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f74:	e7fe      	b.n	8003f74 <_exit+0x12>

08003f76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b086      	sub	sp, #24
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e00a      	b.n	8003f9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f88:	f3af 8000 	nop.w
 8003f8c:	4601      	mov	r1, r0
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	60ba      	str	r2, [r7, #8]
 8003f94:	b2ca      	uxtb	r2, r1
 8003f96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	dbf0      	blt.n	8003f88 <_read+0x12>
  }

  return len;
 8003fa6:	687b      	ldr	r3, [r7, #4]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	e009      	b.n	8003fd6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	60ba      	str	r2, [r7, #8]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	dbf1      	blt.n	8003fc2 <_write+0x12>
  }
  return len;
 8003fde:	687b      	ldr	r3, [r7, #4]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_close>:

int _close(int file)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr

08003ffe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800400e:	605a      	str	r2, [r3, #4]
  return 0;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <_isatty>:

int _isatty(int file)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004024:	2301      	movs	r3, #1
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004050:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <_sbrk+0x5c>)
 8004052:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <_sbrk+0x60>)
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <_sbrk+0x64>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <_sbrk+0x64>)
 8004066:	4a12      	ldr	r2, [pc, #72]	; (80040b0 <_sbrk+0x68>)
 8004068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <_sbrk+0x64>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	429a      	cmp	r2, r3
 8004076:	d207      	bcs.n	8004088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004078:	f00f f9ea 	bl	8013450 <__errno>
 800407c:	4603      	mov	r3, r0
 800407e:	220c      	movs	r2, #12
 8004080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004082:	f04f 33ff 	mov.w	r3, #4294967295
 8004086:	e009      	b.n	800409c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004088:	4b08      	ldr	r3, [pc, #32]	; (80040ac <_sbrk+0x64>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <_sbrk+0x64>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4413      	add	r3, r2
 8004096:	4a05      	ldr	r2, [pc, #20]	; (80040ac <_sbrk+0x64>)
 8004098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800409a:	68fb      	ldr	r3, [r7, #12]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20005000 	.word	0x20005000
 80040a8:	00000400 	.word	0x00000400
 80040ac:	20000ea4 	.word	0x20000ea4
 80040b0:	20004810 	.word	0x20004810

080040b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr

080040c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80040c0:	f7ff fff8 	bl	80040b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040c4:	480b      	ldr	r0, [pc, #44]	; (80040f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80040c6:	490c      	ldr	r1, [pc, #48]	; (80040f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80040c8:	4a0c      	ldr	r2, [pc, #48]	; (80040fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80040ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040cc:	e002      	b.n	80040d4 <LoopCopyDataInit>

080040ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040d2:	3304      	adds	r3, #4

080040d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040d8:	d3f9      	bcc.n	80040ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80040dc:	4c09      	ldr	r4, [pc, #36]	; (8004104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040e0:	e001      	b.n	80040e6 <LoopFillZerobss>

080040e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040e4:	3204      	adds	r2, #4

080040e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040e8:	d3fb      	bcc.n	80040e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040ea:	f00f f9b7 	bl	801345c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040ee:	f7ff faa1 	bl	8003634 <main>
  bx lr
 80040f2:	4770      	bx	lr
  ldr r0, =_sdata
 80040f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040f8:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 80040fc:	08016560 	.word	0x08016560
  ldr r2, =_sbss
 8004100:	200003c4 	.word	0x200003c4
  ldr r4, =_ebss
 8004104:	2000480c 	.word	0x2000480c

08004108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004108:	e7fe      	b.n	8004108 <ADC1_2_IRQHandler>
	...

0800410c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004110:	4b08      	ldr	r3, [pc, #32]	; (8004134 <HAL_Init+0x28>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a07      	ldr	r2, [pc, #28]	; (8004134 <HAL_Init+0x28>)
 8004116:	f043 0310 	orr.w	r3, r3, #16
 800411a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800411c:	2003      	movs	r0, #3
 800411e:	f000 fdc1 	bl	8004ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004122:	2000      	movs	r0, #0
 8004124:	f000 f808 	bl	8004138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004128:	f7ff fce6 	bl	8003af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40022000 	.word	0x40022000

08004138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004140:	4b12      	ldr	r3, [pc, #72]	; (800418c <HAL_InitTick+0x54>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b12      	ldr	r3, [pc, #72]	; (8004190 <HAL_InitTick+0x58>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	4619      	mov	r1, r3
 800414a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800414e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004152:	fbb2 f3f3 	udiv	r3, r2, r3
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fdd9 	bl	8004d0e <HAL_SYSTICK_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e00e      	b.n	8004184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b0f      	cmp	r3, #15
 800416a:	d80a      	bhi.n	8004182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800416c:	2200      	movs	r2, #0
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	f04f 30ff 	mov.w	r0, #4294967295
 8004174:	f000 fda1 	bl	8004cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004178:	4a06      	ldr	r2, [pc, #24]	; (8004194 <HAL_InitTick+0x5c>)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000054 	.word	0x20000054
 8004190:	2000005c 	.word	0x2000005c
 8004194:	20000058 	.word	0x20000058

08004198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <HAL_IncTick+0x1c>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_IncTick+0x20>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4413      	add	r3, r2
 80041a8:	4a03      	ldr	r2, [pc, #12]	; (80041b8 <HAL_IncTick+0x20>)
 80041aa:	6013      	str	r3, [r2, #0]
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr
 80041b4:	2000005c 	.word	0x2000005c
 80041b8:	20003840 	.word	0x20003840

080041bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return uwTick;
 80041c0:	4b02      	ldr	r3, [pc, #8]	; (80041cc <HAL_GetTick+0x10>)
 80041c2:	681b      	ldr	r3, [r3, #0]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr
 80041cc:	20003840 	.word	0x20003840

080041d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041d8:	f7ff fff0 	bl	80041bc <HAL_GetTick>
 80041dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e8:	d005      	beq.n	80041f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041ea:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <HAL_Delay+0x44>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041f6:	bf00      	nop
 80041f8:	f7ff ffe0 	bl	80041bc <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	429a      	cmp	r2, r3
 8004206:	d8f7      	bhi.n	80041f8 <HAL_Delay+0x28>
  {
  }
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	2000005c 	.word	0x2000005c

08004218 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e0be      	b.n	80043b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff fc80 	bl	8003b5c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 faff 	bl	8004860 <ADC_ConversionStop_Disable>
 8004262:	4603      	mov	r3, r0
 8004264:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b00      	cmp	r3, #0
 8004270:	f040 8099 	bne.w	80043a6 <HAL_ADC_Init+0x18e>
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 8095 	bne.w	80043a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004284:	f023 0302 	bic.w	r3, r3, #2
 8004288:	f043 0202 	orr.w	r2, r3, #2
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004298:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	7b1b      	ldrb	r3, [r3, #12]
 800429e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80042a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b0:	d003      	beq.n	80042ba <HAL_ADC_Init+0xa2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d102      	bne.n	80042c0 <HAL_ADC_Init+0xa8>
 80042ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042be:	e000      	b.n	80042c2 <HAL_ADC_Init+0xaa>
 80042c0:	2300      	movs	r3, #0
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	7d1b      	ldrb	r3, [r3, #20]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d119      	bne.n	8004304 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	7b1b      	ldrb	r3, [r3, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d109      	bne.n	80042ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	3b01      	subs	r3, #1
 80042de:	035a      	lsls	r2, r3, #13
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	e00b      	b.n	8004304 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	f043 0201 	orr.w	r2, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	4b28      	ldr	r3, [pc, #160]	; (80043c0 <HAL_ADC_Init+0x1a8>)
 8004320:	4013      	ands	r3, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	430b      	orrs	r3, r1
 800432a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004334:	d003      	beq.n	800433e <HAL_ADC_Init+0x126>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d104      	bne.n	8004348 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	3b01      	subs	r3, #1
 8004344:	051b      	lsls	r3, r3, #20
 8004346:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	430a      	orrs	r2, r1
 800435a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <HAL_ADC_Init+0x1ac>)
 8004364:	4013      	ands	r3, r2
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	429a      	cmp	r2, r3
 800436a:	d10b      	bne.n	8004384 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	f023 0303 	bic.w	r3, r3, #3
 800437a:	f043 0201 	orr.w	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004382:	e018      	b.n	80043b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	f023 0312 	bic.w	r3, r3, #18
 800438c:	f043 0210 	orr.w	r2, r3, #16
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	f043 0201 	orr.w	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80043a4:	e007      	b.n	80043b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	f043 0210 	orr.w	r2, r3, #16
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	ffe1f7fd 	.word	0xffe1f7fd
 80043c4:	ff1f0efe 	.word	0xff1f0efe

080043c8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a64      	ldr	r2, [pc, #400]	; (8004570 <HAL_ADC_Start_DMA+0x1a8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <HAL_ADC_Start_DMA+0x24>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a63      	ldr	r2, [pc, #396]	; (8004574 <HAL_ADC_Start_DMA+0x1ac>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d106      	bne.n	80043fa <HAL_ADC_Start_DMA+0x32>
 80043ec:	4b60      	ldr	r3, [pc, #384]	; (8004570 <HAL_ADC_Start_DMA+0x1a8>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f040 80b3 	bne.w	8004560 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_ADC_Start_DMA+0x40>
 8004404:	2302      	movs	r3, #2
 8004406:	e0ae      	b.n	8004566 <HAL_ADC_Start_DMA+0x19e>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f9cb 	bl	80047ac <ADC_Enable>
 8004416:	4603      	mov	r3, r0
 8004418:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800441a:	7dfb      	ldrb	r3, [r7, #23]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f040 809a 	bne.w	8004556 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a4e      	ldr	r2, [pc, #312]	; (8004574 <HAL_ADC_Start_DMA+0x1ac>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d105      	bne.n	800444c <HAL_ADC_Start_DMA+0x84>
 8004440:	4b4b      	ldr	r3, [pc, #300]	; (8004570 <HAL_ADC_Start_DMA+0x1a8>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d115      	bne.n	8004478 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004462:	2b00      	cmp	r3, #0
 8004464:	d026      	beq.n	80044b4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800446e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004476:	e01d      	b.n	80044b4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a39      	ldr	r2, [pc, #228]	; (8004570 <HAL_ADC_Start_DMA+0x1a8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_ADC_Start_DMA+0xd0>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a38      	ldr	r2, [pc, #224]	; (8004574 <HAL_ADC_Start_DMA+0x1ac>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d10d      	bne.n	80044b4 <HAL_ADC_Start_DMA+0xec>
 8004498:	4b35      	ldr	r3, [pc, #212]	; (8004570 <HAL_ADC_Start_DMA+0x1a8>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d006      	beq.n	80044ce <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	f023 0206 	bic.w	r2, r3, #6
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80044cc:	e002      	b.n	80044d4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4a25      	ldr	r2, [pc, #148]	; (8004578 <HAL_ADC_Start_DMA+0x1b0>)
 80044e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	4a24      	ldr	r2, [pc, #144]	; (800457c <HAL_ADC_Start_DMA+0x1b4>)
 80044ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	4a23      	ldr	r2, [pc, #140]	; (8004580 <HAL_ADC_Start_DMA+0x1b8>)
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0202 	mvn.w	r2, #2
 80044fc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800450c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a18      	ldr	r0, [r3, #32]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	334c      	adds	r3, #76	; 0x4c
 8004518:	4619      	mov	r1, r3
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f000 fc5d 	bl	8004ddc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800452c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004530:	d108      	bne.n	8004544 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004540:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004542:	e00f      	b.n	8004564 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004552:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004554:	e006      	b.n	8004564 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800455e:	e001      	b.n	8004564 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004564:	7dfb      	ldrb	r3, [r7, #23]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40012400 	.word	0x40012400
 8004574:	40012800 	.word	0x40012800
 8004578:	080048e3 	.word	0x080048e3
 800457c:	0800495f 	.word	0x0800495f
 8004580:	0800497b 	.word	0x0800497b

08004584 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr

08004596 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr
	...

080045bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x20>
 80045d8:	2302      	movs	r3, #2
 80045da:	e0dc      	b.n	8004796 <HAL_ADC_ConfigChannel+0x1da>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b06      	cmp	r3, #6
 80045ea:	d81c      	bhi.n	8004626 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	3b05      	subs	r3, #5
 80045fe:	221f      	movs	r2, #31
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	4019      	ands	r1, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	3b05      	subs	r3, #5
 8004618:	fa00 f203 	lsl.w	r2, r0, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	635a      	str	r2, [r3, #52]	; 0x34
 8004624:	e03c      	b.n	80046a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b0c      	cmp	r3, #12
 800462c:	d81c      	bhi.n	8004668 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	3b23      	subs	r3, #35	; 0x23
 8004640:	221f      	movs	r2, #31
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	4019      	ands	r1, r3
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	3b23      	subs	r3, #35	; 0x23
 800465a:	fa00 f203 	lsl.w	r2, r0, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
 8004666:	e01b      	b.n	80046a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	3b41      	subs	r3, #65	; 0x41
 800467a:	221f      	movs	r2, #31
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	4019      	ands	r1, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	3b41      	subs	r3, #65	; 0x41
 8004694:	fa00 f203 	lsl.w	r2, r0, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b09      	cmp	r3, #9
 80046a6:	d91c      	bls.n	80046e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68d9      	ldr	r1, [r3, #12]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4613      	mov	r3, r2
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	4413      	add	r3, r2
 80046b8:	3b1e      	subs	r3, #30
 80046ba:	2207      	movs	r2, #7
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	43db      	mvns	r3, r3
 80046c2:	4019      	ands	r1, r3
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	6898      	ldr	r0, [r3, #8]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	4413      	add	r3, r2
 80046d2:	3b1e      	subs	r3, #30
 80046d4:	fa00 f203 	lsl.w	r2, r0, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	60da      	str	r2, [r3, #12]
 80046e0:	e019      	b.n	8004716 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6919      	ldr	r1, [r3, #16]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	4413      	add	r3, r2
 80046f2:	2207      	movs	r2, #7
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	4019      	ands	r1, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6898      	ldr	r0, [r3, #8]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	4613      	mov	r3, r2
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	4413      	add	r3, r2
 800470a:	fa00 f203 	lsl.w	r2, r0, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b10      	cmp	r3, #16
 800471c:	d003      	beq.n	8004726 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004722:	2b11      	cmp	r3, #17
 8004724:	d132      	bne.n	800478c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1d      	ldr	r2, [pc, #116]	; (80047a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d125      	bne.n	800477c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d126      	bne.n	800478c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800474c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b10      	cmp	r3, #16
 8004754:	d11a      	bne.n	800478c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004756:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a13      	ldr	r2, [pc, #76]	; (80047a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	0c9a      	lsrs	r2, r3, #18
 8004762:	4613      	mov	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800476c:	e002      	b.n	8004774 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	3b01      	subs	r3, #1
 8004772:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f9      	bne.n	800476e <HAL_ADC_ConfigChannel+0x1b2>
 800477a:	e007      	b.n	800478c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	f043 0220 	orr.w	r2, r3, #32
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004794:	7bfb      	ldrb	r3, [r7, #15]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr
 80047a0:	40012400 	.word	0x40012400
 80047a4:	20000054 	.word	0x20000054
 80047a8:	431bde83 	.word	0x431bde83

080047ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d040      	beq.n	800484c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0201 	orr.w	r2, r2, #1
 80047d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80047da:	4b1f      	ldr	r3, [pc, #124]	; (8004858 <ADC_Enable+0xac>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1f      	ldr	r2, [pc, #124]	; (800485c <ADC_Enable+0xb0>)
 80047e0:	fba2 2303 	umull	r2, r3, r2, r3
 80047e4:	0c9b      	lsrs	r3, r3, #18
 80047e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80047e8:	e002      	b.n	80047f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f9      	bne.n	80047ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80047f6:	f7ff fce1 	bl	80041bc <HAL_GetTick>
 80047fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80047fc:	e01f      	b.n	800483e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047fe:	f7ff fcdd 	bl	80041bc <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d918      	bls.n	800483e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b01      	cmp	r3, #1
 8004818:	d011      	beq.n	800483e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	f043 0210 	orr.w	r2, r3, #16
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	f043 0201 	orr.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e007      	b.n	800484e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b01      	cmp	r3, #1
 800484a:	d1d8      	bne.n	80047fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000054 	.word	0x20000054
 800485c:	431bde83 	.word	0x431bde83

08004860 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b01      	cmp	r3, #1
 8004878:	d12e      	bne.n	80048d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0201 	bic.w	r2, r2, #1
 8004888:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800488a:	f7ff fc97 	bl	80041bc <HAL_GetTick>
 800488e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004890:	e01b      	b.n	80048ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004892:	f7ff fc93 	bl	80041bc <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d914      	bls.n	80048ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d10d      	bne.n	80048ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	f043 0210 	orr.w	r2, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	f043 0201 	orr.w	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e007      	b.n	80048da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d0dc      	beq.n	8004892 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d127      	bne.n	800494c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004912:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004916:	d115      	bne.n	8004944 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800491c:	2b00      	cmp	r3, #0
 800491e:	d111      	bne.n	8004944 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d105      	bne.n	8004944 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493c:	f043 0201 	orr.w	r2, r3, #1
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f7ff fe1d 	bl	8004584 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800494a:	e004      	b.n	8004956 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	4798      	blx	r3
}
 8004956:	bf00      	nop
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff fe12 	bl	8004596 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	f043 0204 	orr.w	r2, r3, #4
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f7ff fe01 	bl	80045a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049a6:	bf00      	nop
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80049b0:	b590      	push	{r4, r7, lr}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_ADCEx_Calibration_Start+0x1e>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e097      	b.n	8004afe <HAL_ADCEx_Calibration_Start+0x14e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff ff42 	bl	8004860 <ADC_ConversionStop_Disable>
 80049dc:	4603      	mov	r3, r0
 80049de:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff fee3 	bl	80047ac <ADC_Enable>
 80049e6:	4603      	mov	r3, r0
 80049e8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f040 8081 	bne.w	8004af4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049fa:	f023 0302 	bic.w	r3, r3, #2
 80049fe:	f043 0202 	orr.w	r2, r3, #2
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004a06:	4b40      	ldr	r3, [pc, #256]	; (8004b08 <HAL_ADCEx_Calibration_Start+0x158>)
 8004a08:	681c      	ldr	r4, [r3, #0]
 8004a0a:	2002      	movs	r0, #2
 8004a0c:	f003 fb5e 	bl	80080cc <HAL_RCCEx_GetPeriphCLKFreq>
 8004a10:	4603      	mov	r3, r0
 8004a12:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004a16:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004a18:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004a1a:	e002      	b.n	8004a22 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f9      	bne.n	8004a1c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0208 	orr.w	r2, r2, #8
 8004a36:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004a38:	f7ff fbc0 	bl	80041bc <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004a3e:	e01b      	b.n	8004a78 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004a40:	f7ff fbbc 	bl	80041bc <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b0a      	cmp	r3, #10
 8004a4c:	d914      	bls.n	8004a78 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00d      	beq.n	8004a78 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	f023 0312 	bic.w	r3, r3, #18
 8004a64:	f043 0210 	orr.w	r2, r3, #16
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e042      	b.n	8004afe <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1dc      	bne.n	8004a40 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0204 	orr.w	r2, r2, #4
 8004a94:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004a96:	f7ff fb91 	bl	80041bc <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004a9c:	e01b      	b.n	8004ad6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004a9e:	f7ff fb8d 	bl	80041bc <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b0a      	cmp	r3, #10
 8004aaa:	d914      	bls.n	8004ad6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00d      	beq.n	8004ad6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	f023 0312 	bic.w	r3, r3, #18
 8004ac2:	f043 0210 	orr.w	r2, r3, #16
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e013      	b.n	8004afe <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1dc      	bne.n	8004a9e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	f023 0303 	bic.w	r3, r3, #3
 8004aec:	f043 0201 	orr.w	r2, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd90      	pop	{r4, r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000054 	.word	0x20000054

08004b0c <__NVIC_SetPriorityGrouping>:
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <__NVIC_SetPriorityGrouping+0x44>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b3e:	4a04      	ldr	r2, [pc, #16]	; (8004b50 <__NVIC_SetPriorityGrouping+0x44>)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	60d3      	str	r3, [r2, #12]
}
 8004b44:	bf00      	nop
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	e000ed00 	.word	0xe000ed00

08004b54 <__NVIC_GetPriorityGrouping>:
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b58:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <__NVIC_GetPriorityGrouping+0x18>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	0a1b      	lsrs	r3, r3, #8
 8004b5e:	f003 0307 	and.w	r3, r3, #7
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	e000ed00 	.word	0xe000ed00

08004b70 <__NVIC_EnableIRQ>:
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	db0b      	blt.n	8004b9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	f003 021f 	and.w	r2, r3, #31
 8004b88:	4906      	ldr	r1, [pc, #24]	; (8004ba4 <__NVIC_EnableIRQ+0x34>)
 8004b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	2001      	movs	r0, #1
 8004b92:	fa00 f202 	lsl.w	r2, r0, r2
 8004b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr
 8004ba4:	e000e100 	.word	0xe000e100

08004ba8 <__NVIC_SetPriority>:
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	6039      	str	r1, [r7, #0]
 8004bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	db0a      	blt.n	8004bd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	490c      	ldr	r1, [pc, #48]	; (8004bf4 <__NVIC_SetPriority+0x4c>)
 8004bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc6:	0112      	lsls	r2, r2, #4
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	440b      	add	r3, r1
 8004bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004bd0:	e00a      	b.n	8004be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	4908      	ldr	r1, [pc, #32]	; (8004bf8 <__NVIC_SetPriority+0x50>)
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	3b04      	subs	r3, #4
 8004be0:	0112      	lsls	r2, r2, #4
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	440b      	add	r3, r1
 8004be6:	761a      	strb	r2, [r3, #24]
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	e000e100 	.word	0xe000e100
 8004bf8:	e000ed00 	.word	0xe000ed00

08004bfc <NVIC_EncodePriority>:
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b089      	sub	sp, #36	; 0x24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f1c3 0307 	rsb	r3, r3, #7
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	bf28      	it	cs
 8004c1a:	2304      	movcs	r3, #4
 8004c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	3304      	adds	r3, #4
 8004c22:	2b06      	cmp	r3, #6
 8004c24:	d902      	bls.n	8004c2c <NVIC_EncodePriority+0x30>
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	3b03      	subs	r3, #3
 8004c2a:	e000      	b.n	8004c2e <NVIC_EncodePriority+0x32>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c30:	f04f 32ff 	mov.w	r2, #4294967295
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	43da      	mvns	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	401a      	ands	r2, r3
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c44:	f04f 31ff 	mov.w	r1, #4294967295
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4e:	43d9      	mvns	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c54:	4313      	orrs	r3, r2
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3724      	adds	r7, #36	; 0x24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr

08004c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c70:	d301      	bcc.n	8004c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c72:	2301      	movs	r3, #1
 8004c74:	e00f      	b.n	8004c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c76:	4a0a      	ldr	r2, [pc, #40]	; (8004ca0 <SysTick_Config+0x40>)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c7e:	210f      	movs	r1, #15
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295
 8004c84:	f7ff ff90 	bl	8004ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <SysTick_Config+0x40>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c8e:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <SysTick_Config+0x40>)
 8004c90:	2207      	movs	r2, #7
 8004c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	e000e010 	.word	0xe000e010

08004ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff ff2d 	bl	8004b0c <__NVIC_SetPriorityGrouping>
}
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b086      	sub	sp, #24
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ccc:	f7ff ff42 	bl	8004b54 <__NVIC_GetPriorityGrouping>
 8004cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	6978      	ldr	r0, [r7, #20]
 8004cd8:	f7ff ff90 	bl	8004bfc <NVIC_EncodePriority>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff ff5f 	bl	8004ba8 <__NVIC_SetPriority>
}
 8004cea:	bf00      	nop
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff ff35 	bl	8004b70 <__NVIC_EnableIRQ>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b082      	sub	sp, #8
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff ffa2 	bl	8004c60 <SysTick_Config>
 8004d1c:	4603      	mov	r3, r0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e043      	b.n	8004dc6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	4b22      	ldr	r3, [pc, #136]	; (8004dd0 <HAL_DMA_Init+0xa8>)
 8004d46:	4413      	add	r3, r2
 8004d48:	4a22      	ldr	r2, [pc, #136]	; (8004dd4 <HAL_DMA_Init+0xac>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	091b      	lsrs	r3, r3, #4
 8004d50:	009a      	lsls	r2, r3, #2
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a1f      	ldr	r2, [pc, #124]	; (8004dd8 <HAL_DMA_Init+0xb0>)
 8004d5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004d72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004d76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr
 8004dd0:	bffdfff8 	.word	0xbffdfff8
 8004dd4:	cccccccd 	.word	0xcccccccd
 8004dd8:	40020000 	.word	0x40020000

08004ddc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_DMA_Start_IT+0x20>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e04b      	b.n	8004e94 <HAL_DMA_Start_IT+0xb8>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d13a      	bne.n	8004e86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0201 	bic.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f8a9 	bl	8004f8c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 020e 	orr.w	r2, r2, #14
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e00f      	b.n	8004e74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0204 	bic.w	r2, r2, #4
 8004e62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 020a 	orr.w	r2, r2, #10
 8004e72:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e005      	b.n	8004e92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d005      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2204      	movs	r2, #4
 8004eb8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	73fb      	strb	r3, [r7, #15]
 8004ebe:	e051      	b.n	8004f64 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 020e 	bic.w	r2, r2, #14
 8004ece:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0201 	bic.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a22      	ldr	r2, [pc, #136]	; (8004f70 <HAL_DMA_Abort_IT+0xd4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d029      	beq.n	8004f3e <HAL_DMA_Abort_IT+0xa2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a21      	ldr	r2, [pc, #132]	; (8004f74 <HAL_DMA_Abort_IT+0xd8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d022      	beq.n	8004f3a <HAL_DMA_Abort_IT+0x9e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1f      	ldr	r2, [pc, #124]	; (8004f78 <HAL_DMA_Abort_IT+0xdc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01a      	beq.n	8004f34 <HAL_DMA_Abort_IT+0x98>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <HAL_DMA_Abort_IT+0xe0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d012      	beq.n	8004f2e <HAL_DMA_Abort_IT+0x92>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <HAL_DMA_Abort_IT+0xe4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00a      	beq.n	8004f28 <HAL_DMA_Abort_IT+0x8c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1b      	ldr	r2, [pc, #108]	; (8004f84 <HAL_DMA_Abort_IT+0xe8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d102      	bne.n	8004f22 <HAL_DMA_Abort_IT+0x86>
 8004f1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004f20:	e00e      	b.n	8004f40 <HAL_DMA_Abort_IT+0xa4>
 8004f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f26:	e00b      	b.n	8004f40 <HAL_DMA_Abort_IT+0xa4>
 8004f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f2c:	e008      	b.n	8004f40 <HAL_DMA_Abort_IT+0xa4>
 8004f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f32:	e005      	b.n	8004f40 <HAL_DMA_Abort_IT+0xa4>
 8004f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f38:	e002      	b.n	8004f40 <HAL_DMA_Abort_IT+0xa4>
 8004f3a:	2310      	movs	r3, #16
 8004f3c:	e000      	b.n	8004f40 <HAL_DMA_Abort_IT+0xa4>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	4a11      	ldr	r2, [pc, #68]	; (8004f88 <HAL_DMA_Abort_IT+0xec>)
 8004f42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	4798      	blx	r3
    } 
  }
  return status;
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40020008 	.word	0x40020008
 8004f74:	4002001c 	.word	0x4002001c
 8004f78:	40020030 	.word	0x40020030
 8004f7c:	40020044 	.word	0x40020044
 8004f80:	40020058 	.word	0x40020058
 8004f84:	4002006c 	.word	0x4002006c
 8004f88:	40020000 	.word	0x40020000

08004f8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b10      	cmp	r3, #16
 8004fb8:	d108      	bne.n	8004fcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004fca:	e007      	b.n	8004fdc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]
}
 8004fdc:	bf00      	nop
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b08b      	sub	sp, #44	; 0x2c
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ffa:	e169      	b.n	80052d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	4013      	ands	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	429a      	cmp	r2, r3
 8005016:	f040 8158 	bne.w	80052ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	4a9a      	ldr	r2, [pc, #616]	; (8005288 <HAL_GPIO_Init+0x2a0>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d05e      	beq.n	80050e2 <HAL_GPIO_Init+0xfa>
 8005024:	4a98      	ldr	r2, [pc, #608]	; (8005288 <HAL_GPIO_Init+0x2a0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d875      	bhi.n	8005116 <HAL_GPIO_Init+0x12e>
 800502a:	4a98      	ldr	r2, [pc, #608]	; (800528c <HAL_GPIO_Init+0x2a4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d058      	beq.n	80050e2 <HAL_GPIO_Init+0xfa>
 8005030:	4a96      	ldr	r2, [pc, #600]	; (800528c <HAL_GPIO_Init+0x2a4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d86f      	bhi.n	8005116 <HAL_GPIO_Init+0x12e>
 8005036:	4a96      	ldr	r2, [pc, #600]	; (8005290 <HAL_GPIO_Init+0x2a8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d052      	beq.n	80050e2 <HAL_GPIO_Init+0xfa>
 800503c:	4a94      	ldr	r2, [pc, #592]	; (8005290 <HAL_GPIO_Init+0x2a8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d869      	bhi.n	8005116 <HAL_GPIO_Init+0x12e>
 8005042:	4a94      	ldr	r2, [pc, #592]	; (8005294 <HAL_GPIO_Init+0x2ac>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d04c      	beq.n	80050e2 <HAL_GPIO_Init+0xfa>
 8005048:	4a92      	ldr	r2, [pc, #584]	; (8005294 <HAL_GPIO_Init+0x2ac>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d863      	bhi.n	8005116 <HAL_GPIO_Init+0x12e>
 800504e:	4a92      	ldr	r2, [pc, #584]	; (8005298 <HAL_GPIO_Init+0x2b0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d046      	beq.n	80050e2 <HAL_GPIO_Init+0xfa>
 8005054:	4a90      	ldr	r2, [pc, #576]	; (8005298 <HAL_GPIO_Init+0x2b0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d85d      	bhi.n	8005116 <HAL_GPIO_Init+0x12e>
 800505a:	2b12      	cmp	r3, #18
 800505c:	d82a      	bhi.n	80050b4 <HAL_GPIO_Init+0xcc>
 800505e:	2b12      	cmp	r3, #18
 8005060:	d859      	bhi.n	8005116 <HAL_GPIO_Init+0x12e>
 8005062:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <HAL_GPIO_Init+0x80>)
 8005064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005068:	080050e3 	.word	0x080050e3
 800506c:	080050bd 	.word	0x080050bd
 8005070:	080050cf 	.word	0x080050cf
 8005074:	08005111 	.word	0x08005111
 8005078:	08005117 	.word	0x08005117
 800507c:	08005117 	.word	0x08005117
 8005080:	08005117 	.word	0x08005117
 8005084:	08005117 	.word	0x08005117
 8005088:	08005117 	.word	0x08005117
 800508c:	08005117 	.word	0x08005117
 8005090:	08005117 	.word	0x08005117
 8005094:	08005117 	.word	0x08005117
 8005098:	08005117 	.word	0x08005117
 800509c:	08005117 	.word	0x08005117
 80050a0:	08005117 	.word	0x08005117
 80050a4:	08005117 	.word	0x08005117
 80050a8:	08005117 	.word	0x08005117
 80050ac:	080050c5 	.word	0x080050c5
 80050b0:	080050d9 	.word	0x080050d9
 80050b4:	4a79      	ldr	r2, [pc, #484]	; (800529c <HAL_GPIO_Init+0x2b4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d013      	beq.n	80050e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80050ba:	e02c      	b.n	8005116 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	623b      	str	r3, [r7, #32]
          break;
 80050c2:	e029      	b.n	8005118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	3304      	adds	r3, #4
 80050ca:	623b      	str	r3, [r7, #32]
          break;
 80050cc:	e024      	b.n	8005118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	3308      	adds	r3, #8
 80050d4:	623b      	str	r3, [r7, #32]
          break;
 80050d6:	e01f      	b.n	8005118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	330c      	adds	r3, #12
 80050de:	623b      	str	r3, [r7, #32]
          break;
 80050e0:	e01a      	b.n	8005118 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d102      	bne.n	80050f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80050ea:	2304      	movs	r3, #4
 80050ec:	623b      	str	r3, [r7, #32]
          break;
 80050ee:	e013      	b.n	8005118 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d105      	bne.n	8005104 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80050f8:	2308      	movs	r3, #8
 80050fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69fa      	ldr	r2, [r7, #28]
 8005100:	611a      	str	r2, [r3, #16]
          break;
 8005102:	e009      	b.n	8005118 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005104:	2308      	movs	r3, #8
 8005106:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	615a      	str	r2, [r3, #20]
          break;
 800510e:	e003      	b.n	8005118 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005110:	2300      	movs	r3, #0
 8005112:	623b      	str	r3, [r7, #32]
          break;
 8005114:	e000      	b.n	8005118 <HAL_GPIO_Init+0x130>
          break;
 8005116:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	2bff      	cmp	r3, #255	; 0xff
 800511c:	d801      	bhi.n	8005122 <HAL_GPIO_Init+0x13a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	e001      	b.n	8005126 <HAL_GPIO_Init+0x13e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3304      	adds	r3, #4
 8005126:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2bff      	cmp	r3, #255	; 0xff
 800512c:	d802      	bhi.n	8005134 <HAL_GPIO_Init+0x14c>
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	e002      	b.n	800513a <HAL_GPIO_Init+0x152>
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	3b08      	subs	r3, #8
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	210f      	movs	r1, #15
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	fa01 f303 	lsl.w	r3, r1, r3
 8005148:	43db      	mvns	r3, r3
 800514a:	401a      	ands	r2, r3
 800514c:	6a39      	ldr	r1, [r7, #32]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	fa01 f303 	lsl.w	r3, r1, r3
 8005154:	431a      	orrs	r2, r3
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 80b1 	beq.w	80052ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005168:	4b4d      	ldr	r3, [pc, #308]	; (80052a0 <HAL_GPIO_Init+0x2b8>)
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	4a4c      	ldr	r2, [pc, #304]	; (80052a0 <HAL_GPIO_Init+0x2b8>)
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	6193      	str	r3, [r2, #24]
 8005174:	4b4a      	ldr	r3, [pc, #296]	; (80052a0 <HAL_GPIO_Init+0x2b8>)
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005180:	4a48      	ldr	r2, [pc, #288]	; (80052a4 <HAL_GPIO_Init+0x2bc>)
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	089b      	lsrs	r3, r3, #2
 8005186:	3302      	adds	r3, #2
 8005188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800518c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	220f      	movs	r2, #15
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4013      	ands	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a40      	ldr	r2, [pc, #256]	; (80052a8 <HAL_GPIO_Init+0x2c0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <HAL_GPIO_Init+0x1ec>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a3f      	ldr	r2, [pc, #252]	; (80052ac <HAL_GPIO_Init+0x2c4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00d      	beq.n	80051d0 <HAL_GPIO_Init+0x1e8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a3e      	ldr	r2, [pc, #248]	; (80052b0 <HAL_GPIO_Init+0x2c8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d007      	beq.n	80051cc <HAL_GPIO_Init+0x1e4>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a3d      	ldr	r2, [pc, #244]	; (80052b4 <HAL_GPIO_Init+0x2cc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d101      	bne.n	80051c8 <HAL_GPIO_Init+0x1e0>
 80051c4:	2303      	movs	r3, #3
 80051c6:	e006      	b.n	80051d6 <HAL_GPIO_Init+0x1ee>
 80051c8:	2304      	movs	r3, #4
 80051ca:	e004      	b.n	80051d6 <HAL_GPIO_Init+0x1ee>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e002      	b.n	80051d6 <HAL_GPIO_Init+0x1ee>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <HAL_GPIO_Init+0x1ee>
 80051d4:	2300      	movs	r3, #0
 80051d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d8:	f002 0203 	and.w	r2, r2, #3
 80051dc:	0092      	lsls	r2, r2, #2
 80051de:	4093      	lsls	r3, r2
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80051e6:	492f      	ldr	r1, [pc, #188]	; (80052a4 <HAL_GPIO_Init+0x2bc>)
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	089b      	lsrs	r3, r3, #2
 80051ec:	3302      	adds	r3, #2
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d006      	beq.n	800520e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005200:	4b2d      	ldr	r3, [pc, #180]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	492c      	ldr	r1, [pc, #176]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	4313      	orrs	r3, r2
 800520a:	608b      	str	r3, [r1, #8]
 800520c:	e006      	b.n	800521c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800520e:	4b2a      	ldr	r3, [pc, #168]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	43db      	mvns	r3, r3
 8005216:	4928      	ldr	r1, [pc, #160]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 8005218:	4013      	ands	r3, r2
 800521a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d006      	beq.n	8005236 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005228:	4b23      	ldr	r3, [pc, #140]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	4922      	ldr	r1, [pc, #136]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	4313      	orrs	r3, r2
 8005232:	60cb      	str	r3, [r1, #12]
 8005234:	e006      	b.n	8005244 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005236:	4b20      	ldr	r3, [pc, #128]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	43db      	mvns	r3, r3
 800523e:	491e      	ldr	r1, [pc, #120]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 8005240:	4013      	ands	r3, r2
 8005242:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d006      	beq.n	800525e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005250:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	4918      	ldr	r1, [pc, #96]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	4313      	orrs	r3, r2
 800525a:	604b      	str	r3, [r1, #4]
 800525c:	e006      	b.n	800526c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800525e:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	43db      	mvns	r3, r3
 8005266:	4914      	ldr	r1, [pc, #80]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 8005268:	4013      	ands	r3, r2
 800526a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d021      	beq.n	80052bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005278:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	490e      	ldr	r1, [pc, #56]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	4313      	orrs	r3, r2
 8005282:	600b      	str	r3, [r1, #0]
 8005284:	e021      	b.n	80052ca <HAL_GPIO_Init+0x2e2>
 8005286:	bf00      	nop
 8005288:	10320000 	.word	0x10320000
 800528c:	10310000 	.word	0x10310000
 8005290:	10220000 	.word	0x10220000
 8005294:	10210000 	.word	0x10210000
 8005298:	10120000 	.word	0x10120000
 800529c:	10110000 	.word	0x10110000
 80052a0:	40021000 	.word	0x40021000
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40010800 	.word	0x40010800
 80052ac:	40010c00 	.word	0x40010c00
 80052b0:	40011000 	.word	0x40011000
 80052b4:	40011400 	.word	0x40011400
 80052b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <HAL_GPIO_Init+0x304>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	43db      	mvns	r3, r3
 80052c4:	4909      	ldr	r1, [pc, #36]	; (80052ec <HAL_GPIO_Init+0x304>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	3301      	adds	r3, #1
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	fa22 f303 	lsr.w	r3, r2, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f47f ae8e 	bne.w	8004ffc <HAL_GPIO_Init+0x14>
  }
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	372c      	adds	r7, #44	; 0x2c
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	40010400 	.word	0x40010400

080052f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	887b      	ldrh	r3, [r7, #2]
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005308:	2301      	movs	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
 800530c:	e001      	b.n	8005312 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800530e:	2300      	movs	r3, #0
 8005310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005312:	7bfb      	ldrb	r3, [r7, #15]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	bc80      	pop	{r7}
 800531c:	4770      	bx	lr

0800531e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	460b      	mov	r3, r1
 8005328:	807b      	strh	r3, [r7, #2]
 800532a:	4613      	mov	r3, r2
 800532c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800532e:	787b      	ldrb	r3, [r7, #1]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005334:	887a      	ldrh	r2, [r7, #2]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800533a:	e003      	b.n	8005344 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800533c:	887b      	ldrh	r3, [r7, #2]
 800533e:	041a      	lsls	r2, r3, #16
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	611a      	str	r2, [r3, #16]
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	460b      	mov	r3, r1
 8005358:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005360:	887a      	ldrh	r2, [r7, #2]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4013      	ands	r3, r2
 8005366:	041a      	lsls	r2, r3, #16
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	43d9      	mvns	r1, r3
 800536c:	887b      	ldrh	r3, [r7, #2]
 800536e:	400b      	ands	r3, r1
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	611a      	str	r2, [r3, #16]
}
 8005376:	bf00      	nop
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e12b      	b.n	80055ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7fe fc40 	bl	8003c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2224      	movs	r2, #36	; 0x24
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0201 	bic.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053e4:	f002 fd76 	bl	8007ed4 <HAL_RCC_GetPCLK1Freq>
 80053e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	4a81      	ldr	r2, [pc, #516]	; (80055f4 <HAL_I2C_Init+0x274>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d807      	bhi.n	8005404 <HAL_I2C_Init+0x84>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4a80      	ldr	r2, [pc, #512]	; (80055f8 <HAL_I2C_Init+0x278>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	bf94      	ite	ls
 80053fc:	2301      	movls	r3, #1
 80053fe:	2300      	movhi	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	e006      	b.n	8005412 <HAL_I2C_Init+0x92>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4a7d      	ldr	r2, [pc, #500]	; (80055fc <HAL_I2C_Init+0x27c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	bf94      	ite	ls
 800540c:	2301      	movls	r3, #1
 800540e:	2300      	movhi	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e0e7      	b.n	80055ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4a78      	ldr	r2, [pc, #480]	; (8005600 <HAL_I2C_Init+0x280>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	0c9b      	lsrs	r3, r3, #18
 8005424:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	4a6a      	ldr	r2, [pc, #424]	; (80055f4 <HAL_I2C_Init+0x274>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d802      	bhi.n	8005454 <HAL_I2C_Init+0xd4>
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	3301      	adds	r3, #1
 8005452:	e009      	b.n	8005468 <HAL_I2C_Init+0xe8>
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800545a:	fb02 f303 	mul.w	r3, r2, r3
 800545e:	4a69      	ldr	r2, [pc, #420]	; (8005604 <HAL_I2C_Init+0x284>)
 8005460:	fba2 2303 	umull	r2, r3, r2, r3
 8005464:	099b      	lsrs	r3, r3, #6
 8005466:	3301      	adds	r3, #1
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	430b      	orrs	r3, r1
 800546e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800547a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	495c      	ldr	r1, [pc, #368]	; (80055f4 <HAL_I2C_Init+0x274>)
 8005484:	428b      	cmp	r3, r1
 8005486:	d819      	bhi.n	80054bc <HAL_I2C_Init+0x13c>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	1e59      	subs	r1, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	fbb1 f3f3 	udiv	r3, r1, r3
 8005496:	1c59      	adds	r1, r3, #1
 8005498:	f640 73fc 	movw	r3, #4092	; 0xffc
 800549c:	400b      	ands	r3, r1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_I2C_Init+0x138>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	1e59      	subs	r1, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80054b0:	3301      	adds	r3, #1
 80054b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b6:	e051      	b.n	800555c <HAL_I2C_Init+0x1dc>
 80054b8:	2304      	movs	r3, #4
 80054ba:	e04f      	b.n	800555c <HAL_I2C_Init+0x1dc>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d111      	bne.n	80054e8 <HAL_I2C_Init+0x168>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	1e58      	subs	r0, r3, #1
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6859      	ldr	r1, [r3, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	440b      	add	r3, r1
 80054d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054d6:	3301      	adds	r3, #1
 80054d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bf0c      	ite	eq
 80054e0:	2301      	moveq	r3, #1
 80054e2:	2300      	movne	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e012      	b.n	800550e <HAL_I2C_Init+0x18e>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	1e58      	subs	r0, r3, #1
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6859      	ldr	r1, [r3, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	0099      	lsls	r1, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80054fe:	3301      	adds	r3, #1
 8005500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005504:	2b00      	cmp	r3, #0
 8005506:	bf0c      	ite	eq
 8005508:	2301      	moveq	r3, #1
 800550a:	2300      	movne	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_I2C_Init+0x196>
 8005512:	2301      	movs	r3, #1
 8005514:	e022      	b.n	800555c <HAL_I2C_Init+0x1dc>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10e      	bne.n	800553c <HAL_I2C_Init+0x1bc>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1e58      	subs	r0, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6859      	ldr	r1, [r3, #4]
 8005526:	460b      	mov	r3, r1
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	440b      	add	r3, r1
 800552c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005530:	3301      	adds	r3, #1
 8005532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553a:	e00f      	b.n	800555c <HAL_I2C_Init+0x1dc>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	1e58      	subs	r0, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	0099      	lsls	r1, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005552:	3301      	adds	r3, #1
 8005554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	6809      	ldr	r1, [r1, #0]
 8005560:	4313      	orrs	r3, r2
 8005562:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69da      	ldr	r2, [r3, #28]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800558a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6911      	ldr	r1, [r2, #16]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	68d2      	ldr	r2, [r2, #12]
 8005596:	4311      	orrs	r1, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	430b      	orrs	r3, r1
 800559e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0201 	orr.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	000186a0 	.word	0x000186a0
 80055f8:	001e847f 	.word	0x001e847f
 80055fc:	003d08ff 	.word	0x003d08ff
 8005600:	431bde83 	.word	0x431bde83
 8005604:	10624dd3 	.word	0x10624dd3

08005608 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561a:	2b80      	cmp	r3, #128	; 0x80
 800561c:	d103      	bne.n	8005626 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2200      	movs	r2, #0
 8005624:	611a      	str	r2, [r3, #16]
  }
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr

08005630 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	; 0x28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005648:	2300      	movs	r3, #0
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005652:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d015      	beq.n	800568a <HAL_I2C_ER_IRQHandler+0x5a>
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005664:	2b00      	cmp	r3, #0
 8005666:	d010      	beq.n	800568a <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005678:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005688:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00d      	beq.n	80056b0 <HAL_I2C_ER_IRQHandler+0x80>
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	f043 0302 	orr.w	r3, r3, #2
 80056a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80056ae:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d03e      	beq.n	8005738 <HAL_I2C_ER_IRQHandler+0x108>
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d039      	beq.n	8005738 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 80056c4:	7efb      	ldrb	r3, [r7, #27]
 80056c6:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d6:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80056de:	7ebb      	ldrb	r3, [r7, #26]
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d112      	bne.n	800570a <HAL_I2C_ER_IRQHandler+0xda>
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10f      	bne.n	800570a <HAL_I2C_ER_IRQHandler+0xda>
 80056ea:	7cfb      	ldrb	r3, [r7, #19]
 80056ec:	2b21      	cmp	r3, #33	; 0x21
 80056ee:	d008      	beq.n	8005702 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80056f0:	7cfb      	ldrb	r3, [r7, #19]
 80056f2:	2b29      	cmp	r3, #41	; 0x29
 80056f4:	d005      	beq.n	8005702 <HAL_I2C_ER_IRQHandler+0xd2>
 80056f6:	7cfb      	ldrb	r3, [r7, #19]
 80056f8:	2b28      	cmp	r3, #40	; 0x28
 80056fa:	d106      	bne.n	800570a <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b21      	cmp	r3, #33	; 0x21
 8005700:	d103      	bne.n	800570a <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f860 	bl	80057c8 <I2C_Slave_AF>
 8005708:	e016      	b.n	8005738 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005712:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	f043 0304 	orr.w	r3, r3, #4
 800571a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800571c:	7efb      	ldrb	r3, [r7, #27]
 800571e:	2b10      	cmp	r3, #16
 8005720:	d002      	beq.n	8005728 <HAL_I2C_ER_IRQHandler+0xf8>
 8005722:	7efb      	ldrb	r3, [r7, #27]
 8005724:	2b40      	cmp	r3, #64	; 0x40
 8005726:	d107      	bne.n	8005738 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005736:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00d      	beq.n	800575e <HAL_I2C_ER_IRQHandler+0x12e>
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	f043 0308 	orr.w	r3, r3, #8
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800575c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f89d 	bl	80058b0 <I2C_ITError>
  }
}
 8005776:	bf00      	nop
 8005778:	3728      	adds	r7, #40	; 0x28
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr

08005790 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr

080057a2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr

080057b4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bc80      	pop	{r7}
 80057c4:	4770      	bx	lr
	...

080057c8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d002      	beq.n	80057ea <I2C_Slave_AF+0x22>
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d129      	bne.n	800583e <I2C_Slave_AF+0x76>
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b28      	cmp	r3, #40	; 0x28
 80057ee:	d126      	bne.n	800583e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a2e      	ldr	r2, [pc, #184]	; (80058ac <I2C_Slave_AF+0xe4>)
 80057f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005804:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800580e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff ffaa 	bl	8005790 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800583c:	e031      	b.n	80058a2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	2b21      	cmp	r3, #33	; 0x21
 8005842:	d129      	bne.n	8005898 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a19      	ldr	r2, [pc, #100]	; (80058ac <I2C_Slave_AF+0xe4>)
 8005848:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2221      	movs	r2, #33	; 0x21
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800586e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005878:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005888:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff febc 	bl	8005608 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff ff74 	bl	800577e <HAL_I2C_SlaveTxCpltCallback>
}
 8005896:	e004      	b.n	80058a2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058a0:	615a      	str	r2, [r3, #20]
}
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	ffff0000 	.word	0xffff0000

080058b0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058c8:	7bbb      	ldrb	r3, [r7, #14]
 80058ca:	2b10      	cmp	r3, #16
 80058cc:	d002      	beq.n	80058d4 <I2C_ITError+0x24>
 80058ce:	7bbb      	ldrb	r3, [r7, #14]
 80058d0:	2b40      	cmp	r3, #64	; 0x40
 80058d2:	d10a      	bne.n	80058ea <I2C_ITError+0x3a>
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b22      	cmp	r3, #34	; 0x22
 80058d8:	d107      	bne.n	80058ea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058e8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058f0:	2b28      	cmp	r3, #40	; 0x28
 80058f2:	d107      	bne.n	8005904 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2228      	movs	r2, #40	; 0x28
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005902:	e015      	b.n	8005930 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005912:	d00a      	beq.n	800592a <I2C_ITError+0x7a>
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	2b60      	cmp	r3, #96	; 0x60
 8005918:	d007      	beq.n	800592a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2220      	movs	r2, #32
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800593a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593e:	d162      	bne.n	8005a06 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800594e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005954:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b01      	cmp	r3, #1
 800595c:	d020      	beq.n	80059a0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005962:	4a6a      	ldr	r2, [pc, #424]	; (8005b0c <I2C_ITError+0x25c>)
 8005964:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596a:	4618      	mov	r0, r3
 800596c:	f7ff fa96 	bl	8004e9c <HAL_DMA_Abort_IT>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 8089 	beq.w	8005a8a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0201 	bic.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800599a:	4610      	mov	r0, r2
 800599c:	4798      	blx	r3
 800599e:	e074      	b.n	8005a8a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	4a59      	ldr	r2, [pc, #356]	; (8005b0c <I2C_ITError+0x25c>)
 80059a6:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff fa75 	bl	8004e9c <HAL_DMA_Abort_IT>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d068      	beq.n	8005a8a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c2:	2b40      	cmp	r3, #64	; 0x40
 80059c4:	d10b      	bne.n	80059de <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0201 	bic.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a00:	4610      	mov	r0, r2
 8005a02:	4798      	blx	r3
 8005a04:	e041      	b.n	8005a8a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b60      	cmp	r3, #96	; 0x60
 8005a10:	d125      	bne.n	8005a5e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b40      	cmp	r3, #64	; 0x40
 8005a2c:	d10b      	bne.n	8005a46 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0201 	bic.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff feac 	bl	80057b4 <HAL_I2C_AbortCpltCallback>
 8005a5c:	e015      	b.n	8005a8a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a68:	2b40      	cmp	r3, #64	; 0x40
 8005a6a:	d10b      	bne.n	8005a84 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691a      	ldr	r2, [r3, #16]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff fe8c 	bl	80057a2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10e      	bne.n	8005ab8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d109      	bne.n	8005ab8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ac6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ace:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d113      	bne.n	8005b04 <I2C_ITError+0x254>
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	2b28      	cmp	r3, #40	; 0x28
 8005ae0:	d110      	bne.n	8005b04 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a0a      	ldr	r2, [pc, #40]	; (8005b10 <I2C_ITError+0x260>)
 8005ae6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7ff fe46 	bl	8005790 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	08005b15 	.word	0x08005b15
 8005b10:	ffff0000 	.word	0xffff0000

08005b14 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b2e:	4b4b      	ldr	r3, [pc, #300]	; (8005c5c <I2C_DMAAbort+0x148>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	08db      	lsrs	r3, r3, #3
 8005b34:	4a4a      	ldr	r2, [pc, #296]	; (8005c60 <I2C_DMAAbort+0x14c>)
 8005b36:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3a:	0a1a      	lsrs	r2, r3, #8
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	00da      	lsls	r2, r3, #3
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f043 0220 	orr.w	r2, r3, #32
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005b5a:	e00a      	b.n	8005b72 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b70:	d0ea      	beq.n	8005b48 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7e:	2200      	movs	r2, #0
 8005b80:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	2200      	movs	r2, #0
 8005b90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0201 	bic.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b60      	cmp	r3, #96	; 0x60
 8005be2:	d10e      	bne.n	8005c02 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005bfa:	6978      	ldr	r0, [r7, #20]
 8005bfc:	f7ff fdda 	bl	80057b4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c00:	e027      	b.n	8005c52 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c02:	7cfb      	ldrb	r3, [r7, #19]
 8005c04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c08:	2b28      	cmp	r3, #40	; 0x28
 8005c0a:	d117      	bne.n	8005c3c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2228      	movs	r2, #40	; 0x28
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c3a:	e007      	b.n	8005c4c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005c4c:	6978      	ldr	r0, [r7, #20]
 8005c4e:	f7ff fda8 	bl	80057a2 <HAL_I2C_ErrorCallback>
}
 8005c52:	bf00      	nop
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20000054 	.word	0x20000054
 8005c60:	14f8b589 	.word	0x14f8b589

08005c64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c66:	b08b      	sub	sp, #44	; 0x2c
 8005c68:	af06      	add	r7, sp, #24
 8005c6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e0f1      	b.n	8005e5a <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f007 fe9e 	bl	800d9cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2203      	movs	r2, #3
 8005c94:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f003 fe13 	bl	80098c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	687e      	ldr	r6, [r7, #4]
 8005caa:	466d      	mov	r5, sp
 8005cac:	f106 0410 	add.w	r4, r6, #16
 8005cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	602b      	str	r3, [r5, #0]
 8005cb8:	1d33      	adds	r3, r6, #4
 8005cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cbc:	6838      	ldr	r0, [r7, #0]
 8005cbe:	f003 fddd 	bl	800987c <USB_CoreInit>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0c2      	b.n	8005e5a <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f003 fe0e 	bl	80098fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	73fb      	strb	r3, [r7, #15]
 8005ce4:	e040      	b.n	8005d68 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	440b      	add	r3, r1
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	440b      	add	r3, r1
 8005d0c:	7bfa      	ldrb	r2, [r7, #15]
 8005d0e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	440b      	add	r3, r1
 8005d20:	3303      	adds	r3, #3
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d26:	7bfa      	ldrb	r2, [r7, #15]
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	440b      	add	r3, r1
 8005d34:	3338      	adds	r3, #56	; 0x38
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d3a:	7bfa      	ldrb	r2, [r7, #15]
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	440b      	add	r3, r1
 8005d48:	333c      	adds	r3, #60	; 0x3c
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d4e:	7bfa      	ldrb	r2, [r7, #15]
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	440b      	add	r3, r1
 8005d5c:	3340      	adds	r3, #64	; 0x40
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	3301      	adds	r3, #1
 8005d66:	73fb      	strb	r3, [r7, #15]
 8005d68:	7bfa      	ldrb	r2, [r7, #15]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d3b9      	bcc.n	8005ce6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
 8005d76:	e044      	b.n	8005e02 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d78:	7bfa      	ldrb	r2, [r7, #15]
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	440b      	add	r3, r1
 8005d86:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d8e:	7bfa      	ldrb	r2, [r7, #15]
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	440b      	add	r3, r1
 8005d9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005da0:	7bfa      	ldrb	r2, [r7, #15]
 8005da2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005da4:	7bfa      	ldrb	r2, [r7, #15]
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	4613      	mov	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	440b      	add	r3, r1
 8005db2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005dba:	7bfa      	ldrb	r2, [r7, #15]
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	440b      	add	r3, r1
 8005dc8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005dcc:	2200      	movs	r2, #0
 8005dce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005dd0:	7bfa      	ldrb	r2, [r7, #15]
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	440b      	add	r3, r1
 8005dde:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005de6:	7bfa      	ldrb	r2, [r7, #15]
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	440b      	add	r3, r1
 8005df4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	73fb      	strb	r3, [r7, #15]
 8005e02:	7bfa      	ldrb	r2, [r7, #15]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d3b5      	bcc.n	8005d78 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	603b      	str	r3, [r7, #0]
 8005e12:	687e      	ldr	r6, [r7, #4]
 8005e14:	466d      	mov	r5, sp
 8005e16:	f106 0410 	add.w	r4, r6, #16
 8005e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	1d33      	adds	r3, r6, #4
 8005e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e26:	6838      	ldr	r0, [r7, #0]
 8005e28:	f003 fd74 	bl	8009914 <USB_DevInit>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e00d      	b.n	8005e5a <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f005 fff5 	bl	800be42 <USB_DevDisconnect>

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_PCD_Start+0x16>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e016      	b.n	8005ea6 <HAL_PCD_Start+0x44>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f003 fd09 	bl	800989c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f008 f810 	bl	800deb2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f005 ffc9 	bl	800be2e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b088      	sub	sp, #32
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f005 ffcb 	bl	800be56 <USB_ReadInterrupts>
 8005ec0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fb1b 	bl	8006508 <PCD_EP_ISR_Handler>

    return;
 8005ed2:	e119      	b.n	8006108 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d013      	beq.n	8005f06 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef0:	b292      	uxth	r2, r2
 8005ef2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f007 fde3 	bl	800dac2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005efc:	2100      	movs	r1, #0
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f905 	bl	800610e <HAL_PCD_SetAddress>

    return;
 8005f04:	e100      	b.n	8006108 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00c      	beq.n	8005f2a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f22:	b292      	uxth	r2, r2
 8005f24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005f28:	e0ee      	b.n	8006108 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00c      	beq.n	8005f4e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f46:	b292      	uxth	r2, r2
 8005f48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005f4c:	e0dc      	b.n	8006108 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d027      	beq.n	8005fa8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 0204 	bic.w	r2, r2, #4
 8005f6a:	b292      	uxth	r2, r2
 8005f6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0208 	bic.w	r2, r2, #8
 8005f82:	b292      	uxth	r2, r2
 8005f84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f007 fdd3 	bl	800db34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fa0:	b292      	uxth	r2, r2
 8005fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005fa6:	e0af      	b.n	8006108 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 8083 	beq.w	80060ba <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e010      	b.n	8005fdc <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	7ffb      	ldrb	r3, [r7, #31]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	441a      	add	r2, r3
 8005fc6:	7ffb      	ldrb	r3, [r7, #31]
 8005fc8:	8812      	ldrh	r2, [r2, #0]
 8005fca:	b292      	uxth	r2, r2
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	3320      	adds	r3, #32
 8005fd0:	443b      	add	r3, r7
 8005fd2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8005fd6:	7ffb      	ldrb	r3, [r7, #31]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	77fb      	strb	r3, [r7, #31]
 8005fdc:	7ffb      	ldrb	r3, [r7, #31]
 8005fde:	2b07      	cmp	r3, #7
 8005fe0:	d9eb      	bls.n	8005fba <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f042 0201 	orr.w	r2, r2, #1
 8005ff4:	b292      	uxth	r2, r2
 8005ff6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006002:	b29a      	uxth	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0201 	bic.w	r2, r2, #1
 800600c:	b292      	uxth	r2, r2
 800600e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8006012:	bf00      	nop
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800601c:	b29b      	uxth	r3, r3
 800601e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0f6      	beq.n	8006014 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800602e:	b29a      	uxth	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006038:	b292      	uxth	r2, r2
 800603a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800603e:	2300      	movs	r3, #0
 8006040:	77fb      	strb	r3, [r7, #31]
 8006042:	e00f      	b.n	8006064 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8006044:	7ffb      	ldrb	r3, [r7, #31]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6812      	ldr	r2, [r2, #0]
 800604a:	4611      	mov	r1, r2
 800604c:	7ffa      	ldrb	r2, [r7, #31]
 800604e:	0092      	lsls	r2, r2, #2
 8006050:	440a      	add	r2, r1
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	3320      	adds	r3, #32
 8006056:	443b      	add	r3, r7
 8006058:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800605c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800605e:	7ffb      	ldrb	r3, [r7, #31]
 8006060:	3301      	adds	r3, #1
 8006062:	77fb      	strb	r3, [r7, #31]
 8006064:	7ffb      	ldrb	r3, [r7, #31]
 8006066:	2b07      	cmp	r3, #7
 8006068:	d9ec      	bls.n	8006044 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006072:	b29a      	uxth	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0208 	orr.w	r2, r2, #8
 800607c:	b292      	uxth	r2, r2
 800607e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800608a:	b29a      	uxth	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006094:	b292      	uxth	r2, r2
 8006096:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 0204 	orr.w	r2, r2, #4
 80060ac:	b292      	uxth	r2, r2
 80060ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f007 fd24 	bl	800db00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80060b8:	e026      	b.n	8006108 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00f      	beq.n	80060e4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80060d6:	b292      	uxth	r2, r2
 80060d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f007 fce2 	bl	800daa6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80060e2:	e011      	b.n	8006108 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00c      	beq.n	8006108 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006100:	b292      	uxth	r2, r2
 8006102:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006106:	bf00      	nop
  }
}
 8006108:	3720      	adds	r7, #32
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b082      	sub	sp, #8
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_PCD_SetAddress+0x1a>
 8006124:	2302      	movs	r3, #2
 8006126:	e013      	b.n	8006150 <HAL_PCD_SetAddress+0x42>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	78fa      	ldrb	r2, [r7, #3]
 8006134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	78fa      	ldrb	r2, [r7, #3]
 800613e:	4611      	mov	r1, r2
 8006140:	4618      	mov	r0, r3
 8006142:	f005 fe61 	bl	800be08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	4608      	mov	r0, r1
 8006162:	4611      	mov	r1, r2
 8006164:	461a      	mov	r2, r3
 8006166:	4603      	mov	r3, r0
 8006168:	70fb      	strb	r3, [r7, #3]
 800616a:	460b      	mov	r3, r1
 800616c:	803b      	strh	r3, [r7, #0]
 800616e:	4613      	mov	r3, r2
 8006170:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800617a:	2b00      	cmp	r3, #0
 800617c:	da0e      	bge.n	800619c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800617e:	78fb      	ldrb	r3, [r7, #3]
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	4413      	add	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	705a      	strb	r2, [r3, #1]
 800619a:	e00e      	b.n	80061ba <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	f003 0207 	and.w	r2, r3, #7
 80061a2:	4613      	mov	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	4413      	add	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80061c6:	883a      	ldrh	r2, [r7, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	78ba      	ldrb	r2, [r7, #2]
 80061d0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80061d2:	78bb      	ldrb	r3, [r7, #2]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d102      	bne.n	80061de <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_PCD_EP_Open+0x94>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e00e      	b.n	800620a <HAL_PCD_EP_Open+0xb2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68f9      	ldr	r1, [r7, #12]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f003 fbaa 	bl	8009954 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8006208:	7afb      	ldrb	r3, [r7, #11]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	460b      	mov	r3, r1
 800621c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800621e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006222:	2b00      	cmp	r3, #0
 8006224:	da0e      	bge.n	8006244 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006226:	78fb      	ldrb	r3, [r7, #3]
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	4413      	add	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	705a      	strb	r2, [r3, #1]
 8006242:	e00e      	b.n	8006262 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	f003 0207 	and.w	r2, r3, #7
 800624a:	4613      	mov	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	4413      	add	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	f003 0307 	and.w	r3, r3, #7
 8006268:	b2da      	uxtb	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_PCD_EP_Close+0x6a>
 8006278:	2302      	movs	r3, #2
 800627a:	e00e      	b.n	800629a <HAL_PCD_EP_Close+0x88>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68f9      	ldr	r1, [r7, #12]
 800628a:	4618      	mov	r0, r3
 800628c:	f003 ff22 	bl	800a0d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b086      	sub	sp, #24
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
 80062ae:	460b      	mov	r3, r1
 80062b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062b2:	7afb      	ldrb	r3, [r7, #11]
 80062b4:	f003 0207 	and.w	r2, r3, #7
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2200      	movs	r2, #0
 80062da:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2200      	movs	r2, #0
 80062e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062e2:	7afb      	ldrb	r3, [r7, #11]
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6979      	ldr	r1, [r7, #20]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f004 f8d9 	bl	800a4ac <USB_EPStartXfer>

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	f003 0207 	and.w	r2, r3, #7
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	4613      	mov	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	440b      	add	r3, r1
 8006322:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006326:	681b      	ldr	r3, [r3, #0]
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	4770      	bx	lr

08006332 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b086      	sub	sp, #24
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
 800633e:	460b      	mov	r3, r1
 8006340:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006342:	7afb      	ldrb	r3, [r7, #11]
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2200      	movs	r2, #0
 8006376:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2201      	movs	r2, #1
 800637c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800637e:	7afb      	ldrb	r3, [r7, #11]
 8006380:	f003 0307 	and.w	r3, r3, #7
 8006384:	b2da      	uxtb	r2, r3
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6979      	ldr	r1, [r7, #20]
 8006390:	4618      	mov	r0, r3
 8006392:	f004 f88b 	bl	800a4ac <USB_EPStartXfer>

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	f003 0207 	and.w	r2, r3, #7
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d901      	bls.n	80063be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e04c      	b.n	8006458 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80063be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	da0e      	bge.n	80063e4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	4413      	add	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	705a      	strb	r2, [r3, #1]
 80063e2:	e00c      	b.n	80063fe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80063e4:	78fa      	ldrb	r2, [r7, #3]
 80063e6:	4613      	mov	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	4413      	add	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2201      	movs	r2, #1
 8006402:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	b2da      	uxtb	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_PCD_EP_SetStall+0x7e>
 800641a:	2302      	movs	r3, #2
 800641c:	e01c      	b.n	8006458 <HAL_PCD_EP_SetStall+0xb8>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	4618      	mov	r0, r3
 800642e:	f005 fbee 	bl	800bc0e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	2b00      	cmp	r3, #0
 800643a:	d108      	bne.n	800644e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006446:	4619      	mov	r1, r3
 8006448:	4610      	mov	r0, r2
 800644a:	f005 fd13 	bl	800be74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800646c:	78fb      	ldrb	r3, [r7, #3]
 800646e:	f003 020f 	and.w	r2, r3, #15
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	429a      	cmp	r2, r3
 8006478:	d901      	bls.n	800647e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e040      	b.n	8006500 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800647e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006482:	2b00      	cmp	r3, #0
 8006484:	da0e      	bge.n	80064a4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006486:	78fb      	ldrb	r3, [r7, #3]
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	4413      	add	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2201      	movs	r2, #1
 80064a0:	705a      	strb	r2, [r3, #1]
 80064a2:	e00e      	b.n	80064c2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064a4:	78fb      	ldrb	r3, [r7, #3]
 80064a6:	f003 0207 	and.w	r2, r3, #7
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	4413      	add	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	f003 0307 	and.w	r3, r3, #7
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_PCD_EP_ClrStall+0x82>
 80064de:	2302      	movs	r3, #2
 80064e0:	e00e      	b.n	8006500 <HAL_PCD_EP_ClrStall+0xa0>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68f9      	ldr	r1, [r7, #12]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f005 fbdc 	bl	800bcae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b096      	sub	sp, #88	; 0x58
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006510:	e3bf      	b.n	8006c92 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800651a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800651e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f003 030f 	and.w	r3, r3, #15
 8006528:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800652c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006530:	2b00      	cmp	r3, #0
 8006532:	f040 8179 	bne.w	8006828 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006536:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800653a:	f003 0310 	and.w	r3, r3, #16
 800653e:	2b00      	cmp	r3, #0
 8006540:	d152      	bne.n	80065e8 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800654e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006552:	81fb      	strh	r3, [r7, #14]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	89fb      	ldrh	r3, [r7, #14]
 800655a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800655e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006562:	b29b      	uxth	r3, r3
 8006564:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3328      	adds	r3, #40	; 0x28
 800656a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006574:	b29b      	uxth	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	4413      	add	r3, r2
 8006580:	3302      	adds	r3, #2
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006596:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800659a:	695a      	ldr	r2, [r3, #20]
 800659c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	441a      	add	r2, r3
 80065a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80065a6:	2100      	movs	r1, #0
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f007 fa62 	bl	800da72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 836b 	beq.w	8006c92 <PCD_EP_ISR_Handler+0x78a>
 80065bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f040 8366 	bne.w	8006c92 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	b292      	uxth	r2, r2
 80065da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80065e6:	e354      	b.n	8006c92 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80065ee:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80065fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80065fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006602:	2b00      	cmp	r3, #0
 8006604:	d034      	beq.n	8006670 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660e:	b29b      	uxth	r3, r3
 8006610:	461a      	mov	r2, r3
 8006612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	4413      	add	r3, r2
 800661a:	3306      	adds	r3, #6
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6812      	ldr	r2, [r2, #0]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800662e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006630:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800663c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800663e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006642:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006644:	b29b      	uxth	r3, r3
 8006646:	f005 fc65 	bl	800bf14 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29a      	uxth	r2, r3
 8006652:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006656:	4013      	ands	r3, r2
 8006658:	823b      	strh	r3, [r7, #16]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	8a3a      	ldrh	r2, [r7, #16]
 8006660:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006664:	b292      	uxth	r2, r2
 8006666:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f007 f9d5 	bl	800da18 <HAL_PCD_SetupStageCallback>
 800666e:	e310      	b.n	8006c92 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006670:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006674:	2b00      	cmp	r3, #0
 8006676:	f280 830c 	bge.w	8006c92 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	b29a      	uxth	r2, r3
 8006682:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006686:	4013      	ands	r3, r2
 8006688:	83fb      	strh	r3, [r7, #30]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	8bfa      	ldrh	r2, [r7, #30]
 8006690:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006694:	b292      	uxth	r2, r2
 8006696:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	4413      	add	r3, r2
 80066ac:	3306      	adds	r3, #6
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6812      	ldr	r2, [r2, #0]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80066c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066c2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80066c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d019      	beq.n	8006700 <PCD_EP_ISR_Handler+0x1f8>
 80066cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d015      	beq.n	8006700 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066da:	6959      	ldr	r1, [r3, #20]
 80066dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066de:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80066e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066e2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f005 fc15 	bl	800bf14 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80066ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ec:	695a      	ldr	r2, [r3, #20]
 80066ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	441a      	add	r2, r3
 80066f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066f6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80066f8:	2100      	movs	r1, #0
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f007 f99e 	bl	800da3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800670a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800670e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006712:	2b00      	cmp	r3, #0
 8006714:	f040 82bd 	bne.w	8006c92 <PCD_EP_ISR_Handler+0x78a>
 8006718:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800671c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006720:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006724:	f000 82b5 	beq.w	8006c92 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	61bb      	str	r3, [r7, #24]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006736:	b29b      	uxth	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	4413      	add	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006752:	b29a      	uxth	r2, r3
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	2b3e      	cmp	r3, #62	; 0x3e
 800675e:	d91d      	bls.n	800679c <PCD_EP_ISR_Handler+0x294>
 8006760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	647b      	str	r3, [r7, #68]	; 0x44
 8006768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f003 031f 	and.w	r3, r3, #31
 8006770:	2b00      	cmp	r3, #0
 8006772:	d102      	bne.n	800677a <PCD_EP_ISR_Handler+0x272>
 8006774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006776:	3b01      	subs	r3, #1
 8006778:	647b      	str	r3, [r7, #68]	; 0x44
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	b29a      	uxth	r2, r3
 8006780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006782:	b29b      	uxth	r3, r3
 8006784:	029b      	lsls	r3, r3, #10
 8006786:	b29b      	uxth	r3, r3
 8006788:	4313      	orrs	r3, r2
 800678a:	b29b      	uxth	r3, r3
 800678c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006794:	b29a      	uxth	r2, r3
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	801a      	strh	r2, [r3, #0]
 800679a:	e026      	b.n	80067ea <PCD_EP_ISR_Handler+0x2e2>
 800679c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <PCD_EP_ISR_Handler+0x2b2>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	801a      	strh	r2, [r3, #0]
 80067b8:	e017      	b.n	80067ea <PCD_EP_ISR_Handler+0x2e2>
 80067ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	647b      	str	r3, [r7, #68]	; 0x44
 80067c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <PCD_EP_ISR_Handler+0x2cc>
 80067ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067d0:	3301      	adds	r3, #1
 80067d2:	647b      	str	r3, [r7, #68]	; 0x44
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	b29a      	uxth	r2, r3
 80067da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067dc:	b29b      	uxth	r3, r3
 80067de:	029b      	lsls	r3, r3, #10
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	4313      	orrs	r3, r2
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fa:	827b      	strh	r3, [r7, #18]
 80067fc:	8a7b      	ldrh	r3, [r7, #18]
 80067fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006802:	827b      	strh	r3, [r7, #18]
 8006804:	8a7b      	ldrh	r3, [r7, #18]
 8006806:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800680a:	827b      	strh	r3, [r7, #18]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	8a7b      	ldrh	r3, [r7, #18]
 8006812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006822:	b29b      	uxth	r3, r3
 8006824:	8013      	strh	r3, [r2, #0]
 8006826:	e234      	b.n	8006c92 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800683c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006840:	2b00      	cmp	r3, #0
 8006842:	f280 80fc 	bge.w	8006a3e <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	b29a      	uxth	r2, r3
 8006858:	f640 738f 	movw	r3, #3983	; 0xf8f
 800685c:	4013      	ands	r3, r2
 800685e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006874:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006878:	b292      	uxth	r2, r2
 800687a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800687c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	4413      	add	r3, r2
 8006890:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006894:	7b1b      	ldrb	r3, [r3, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d125      	bne.n	80068e6 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	4413      	add	r3, r2
 80068ae:	3306      	adds	r3, #6
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068c2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80068c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8092 	beq.w	80069f4 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068d6:	6959      	ldr	r1, [r3, #20]
 80068d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068da:	88da      	ldrh	r2, [r3, #6]
 80068dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80068e0:	f005 fb18 	bl	800bf14 <USB_ReadPMA>
 80068e4:	e086      	b.n	80069f4 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80068e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068e8:	78db      	ldrb	r3, [r3, #3]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d10a      	bne.n	8006904 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80068ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80068f2:	461a      	mov	r2, r3
 80068f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f9d9 	bl	8006cae <HAL_PCD_EP_DB_Receive>
 80068fc:	4603      	mov	r3, r0
 80068fe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006902:	e077      	b.n	80069f4 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29b      	uxth	r3, r3
 8006916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800691a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	461a      	mov	r2, r3
 8006928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	441a      	add	r2, r3
 8006930:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800693c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006940:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006944:	b29b      	uxth	r3, r3
 8006946:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	b29b      	uxth	r3, r3
 800695a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d024      	beq.n	80069ac <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800696a:	b29b      	uxth	r3, r3
 800696c:	461a      	mov	r2, r3
 800696e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	4413      	add	r3, r2
 8006976:	3302      	adds	r3, #2
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6812      	ldr	r2, [r2, #0]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800698a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800698e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006992:	2b00      	cmp	r3, #0
 8006994:	d02e      	beq.n	80069f4 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800699c:	6959      	ldr	r1, [r3, #20]
 800699e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069a0:	891a      	ldrh	r2, [r3, #8]
 80069a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80069a6:	f005 fab5 	bl	800bf14 <USB_ReadPMA>
 80069aa:	e023      	b.n	80069f4 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	4413      	add	r3, r2
 80069c0:	3306      	adds	r3, #6
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6812      	ldr	r2, [r2, #0]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069d4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80069d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d009      	beq.n	80069f4 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069e6:	6959      	ldr	r1, [r3, #20]
 80069e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ea:	895a      	ldrh	r2, [r3, #10]
 80069ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80069f0:	f005 fa90 	bl	800bf14 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80069f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069f6:	69da      	ldr	r2, [r3, #28]
 80069f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80069fc:	441a      	add	r2, r3
 80069fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a00:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a04:	695a      	ldr	r2, [r3, #20]
 8006a06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006a0a:	441a      	add	r2, r3
 8006a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a0e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <PCD_EP_ISR_Handler+0x51c>
 8006a18:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d206      	bcs.n	8006a32 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f007 f806 	bl	800da3c <HAL_PCD_DataOutStageCallback>
 8006a30:	e005      	b.n	8006a3e <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f003 fd37 	bl	800a4ac <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006a3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 8123 	beq.w	8006c92 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8006a4c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	00db      	lsls	r3, r3, #3
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	441a      	add	r2, r3
 8006a8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a9e:	78db      	ldrb	r3, [r3, #3]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	f040 80a2 	bne.w	8006bea <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8006aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aae:	7b1b      	ldrb	r3, [r3, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8093 	beq.w	8006bdc <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006ab6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d046      	beq.n	8006b50 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ac4:	785b      	ldrb	r3, [r3, #1]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d126      	bne.n	8006b18 <PCD_EP_ISR_Handler+0x610>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	4413      	add	r3, r2
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	011a      	lsls	r2, r3, #4
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	4413      	add	r3, r2
 8006aec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006af0:	623b      	str	r3, [r7, #32]
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	801a      	strh	r2, [r3, #0]
 8006b16:	e061      	b.n	8006bdc <PCD_EP_ISR_Handler+0x6d4>
 8006b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d15d      	bne.n	8006bdc <PCD_EP_ISR_Handler+0x6d4>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	4413      	add	r3, r2
 8006b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	011a      	lsls	r2, r3, #4
 8006b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b40:	4413      	add	r3, r2
 8006b42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	801a      	strh	r2, [r3, #0]
 8006b4e:	e045      	b.n	8006bdc <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b58:	785b      	ldrb	r3, [r3, #1]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d126      	bne.n	8006bac <PCD_EP_ISR_Handler+0x6a4>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	637b      	str	r3, [r7, #52]	; 0x34
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b72:	4413      	add	r3, r2
 8006b74:	637b      	str	r3, [r7, #52]	; 0x34
 8006b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	011a      	lsls	r2, r3, #4
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7e:	4413      	add	r3, r2
 8006b80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b84:	633b      	str	r3, [r7, #48]	; 0x30
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	801a      	strh	r2, [r3, #0]
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	801a      	strh	r2, [r3, #0]
 8006baa:	e017      	b.n	8006bdc <PCD_EP_ISR_Handler+0x6d4>
 8006bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d113      	bne.n	8006bdc <PCD_EP_ISR_Handler+0x6d4>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc2:	4413      	add	r3, r2
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	011a      	lsls	r2, r3, #4
 8006bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bce:	4413      	add	r3, r2
 8006bd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	2200      	movs	r2, #0
 8006bda:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f006 ff45 	bl	800da72 <HAL_PCD_DataInStageCallback>
 8006be8:	e053      	b.n	8006c92 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006bea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d146      	bne.n	8006c84 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	461a      	mov	r2, r3
 8006c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	4413      	add	r3, r2
 8006c0a:	3302      	adds	r3, #2
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	6812      	ldr	r2, [r2, #0]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d907      	bls.n	8006c3e <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8006c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c36:	1ad2      	subs	r2, r2, r3
 8006c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c3a:	619a      	str	r2, [r3, #24]
 8006c3c:	e002      	b.n	8006c44 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8006c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c40:	2200      	movs	r2, #0
 8006c42:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d106      	bne.n	8006c5a <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f006 ff0d 	bl	800da72 <HAL_PCD_DataInStageCallback>
 8006c58:	e01b      	b.n	8006c92 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c5c:	695a      	ldr	r2, [r3, #20]
 8006c5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c62:	441a      	add	r2, r3
 8006c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c66:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c6a:	69da      	ldr	r2, [r3, #28]
 8006c6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c70:	441a      	add	r2, r3
 8006c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c74:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f003 fc15 	bl	800a4ac <USB_EPStartXfer>
 8006c82:	e006      	b.n	8006c92 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006c84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f91b 	bl	8006ec8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	b21b      	sxth	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f6ff ac37 	blt.w	8006512 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3758      	adds	r7, #88	; 0x58
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b088      	sub	sp, #32
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d07e      	beq.n	8006dc4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	00db      	lsls	r3, r3, #3
 8006cd8:	4413      	add	r3, r2
 8006cda:	3302      	adds	r3, #2
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	6812      	ldr	r2, [r2, #0]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	699a      	ldr	r2, [r3, #24]
 8006cf4:	8b7b      	ldrh	r3, [r7, #26]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d306      	bcc.n	8006d08 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	699a      	ldr	r2, [r3, #24]
 8006cfe:	8b7b      	ldrh	r3, [r7, #26]
 8006d00:	1ad2      	subs	r2, r2, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	619a      	str	r2, [r3, #24]
 8006d06:	e002      	b.n	8006d0e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d123      	bne.n	8006d5e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d30:	833b      	strh	r3, [r7, #24]
 8006d32:	8b3b      	ldrh	r3, [r7, #24]
 8006d34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d38:	833b      	strh	r3, [r7, #24]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	441a      	add	r2, r3
 8006d48:	8b3b      	ldrh	r3, [r7, #24]
 8006d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006d5e:	88fb      	ldrh	r3, [r7, #6]
 8006d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01f      	beq.n	8006da8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	82fb      	strh	r3, [r7, #22]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	441a      	add	r2, r3
 8006d92:	8afb      	ldrh	r3, [r7, #22]
 8006d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006da8:	8b7b      	ldrh	r3, [r7, #26]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 8087 	beq.w	8006ebe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6818      	ldr	r0, [r3, #0]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	6959      	ldr	r1, [r3, #20]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	891a      	ldrh	r2, [r3, #8]
 8006dbc:	8b7b      	ldrh	r3, [r7, #26]
 8006dbe:	f005 f8a9 	bl	800bf14 <USB_ReadPMA>
 8006dc2:	e07c      	b.n	8006ebe <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	461a      	mov	r2, r3
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	4413      	add	r3, r2
 8006dd8:	3306      	adds	r3, #6
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	6812      	ldr	r2, [r2, #0]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	699a      	ldr	r2, [r3, #24]
 8006df2:	8b7b      	ldrh	r3, [r7, #26]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d306      	bcc.n	8006e06 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	699a      	ldr	r2, [r3, #24]
 8006dfc:	8b7b      	ldrh	r3, [r7, #26]
 8006dfe:	1ad2      	subs	r2, r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	619a      	str	r2, [r3, #24]
 8006e04:	e002      	b.n	8006e0c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d123      	bne.n	8006e5c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2e:	83fb      	strh	r3, [r7, #30]
 8006e30:	8bfb      	ldrh	r3, [r7, #30]
 8006e32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e36:	83fb      	strh	r3, [r7, #30]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	441a      	add	r2, r3
 8006e46:	8bfb      	ldrh	r3, [r7, #30]
 8006e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006e5c:	88fb      	ldrh	r3, [r7, #6]
 8006e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d11f      	bne.n	8006ea6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e80:	83bb      	strh	r3, [r7, #28]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	441a      	add	r2, r3
 8006e90:	8bbb      	ldrh	r3, [r7, #28]
 8006e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006ea6:	8b7b      	ldrh	r3, [r7, #26]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d008      	beq.n	8006ebe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	6959      	ldr	r1, [r3, #20]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	895a      	ldrh	r2, [r3, #10]
 8006eb8:	8b7b      	ldrh	r3, [r7, #26]
 8006eba:	f005 f82b 	bl	800bf14 <USB_ReadPMA>
    }
  }

  return count;
 8006ebe:	8b7b      	ldrh	r3, [r7, #26]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3720      	adds	r7, #32
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b0a4      	sub	sp, #144	; 0x90
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006ed6:	88fb      	ldrh	r3, [r7, #6]
 8006ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 81dd 	beq.w	800729c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	461a      	mov	r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	4413      	add	r3, r2
 8006ef6:	3302      	adds	r3, #2
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f0a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	699a      	ldr	r2, [r3, #24]
 8006f12:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d907      	bls.n	8006f2a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	699a      	ldr	r2, [r3, #24]
 8006f1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006f22:	1ad2      	subs	r2, r2, r3
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	619a      	str	r2, [r3, #24]
 8006f28:	e002      	b.n	8006f30 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f040 80b9 	bne.w	80070ac <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	785b      	ldrb	r3, [r3, #1]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d126      	bne.n	8006f90 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	461a      	mov	r2, r3
 8006f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f56:	4413      	add	r3, r2
 8006f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	011a      	lsls	r2, r3, #4
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	4413      	add	r3, r2
 8006f64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f78:	801a      	strh	r2, [r3, #0]
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8c:	801a      	strh	r2, [r3, #0]
 8006f8e:	e01a      	b.n	8006fc6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d116      	bne.n	8006fc6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fac:	4413      	add	r3, r2
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	011a      	lsls	r2, r3, #4
 8006fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb8:	4413      	add	r3, r2
 8006fba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	785b      	ldrb	r3, [r3, #1]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d126      	bne.n	8007022 <HAL_PCD_EP_DB_Transmit+0x15a>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	61fb      	str	r3, [r7, #28]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	4413      	add	r3, r2
 8006fea:	61fb      	str	r3, [r7, #28]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	011a      	lsls	r2, r3, #4
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ffa:	61bb      	str	r3, [r7, #24]
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007006:	b29a      	uxth	r2, r3
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	801a      	strh	r2, [r3, #0]
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701a:	b29a      	uxth	r2, r3
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	e017      	b.n	8007052 <HAL_PCD_EP_DB_Transmit+0x18a>
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d113      	bne.n	8007052 <HAL_PCD_EP_DB_Transmit+0x18a>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007032:	b29b      	uxth	r3, r3
 8007034:	461a      	mov	r2, r3
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	4413      	add	r3, r2
 800703a:	627b      	str	r3, [r7, #36]	; 0x24
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	011a      	lsls	r2, r3, #4
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	4413      	add	r3, r2
 8007046:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800704a:	623b      	str	r3, [r7, #32]
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	2200      	movs	r2, #0
 8007050:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	4619      	mov	r1, r3
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f006 fd0a 	bl	800da72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800705e:	88fb      	ldrh	r3, [r7, #6]
 8007060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 82fc 	beq.w	8007662 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	b29b      	uxth	r3, r3
 800707c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007084:	82fb      	strh	r3, [r7, #22]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	441a      	add	r2, r3
 8007094:	8afb      	ldrh	r3, [r7, #22]
 8007096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800709a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800709e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	8013      	strh	r3, [r2, #0]
 80070aa:	e2da      	b.n	8007662 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80070ac:	88fb      	ldrh	r3, [r7, #6]
 80070ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d021      	beq.n	80070fa <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	441a      	add	r2, r3
 80070e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80070e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007100:	2b01      	cmp	r3, #1
 8007102:	f040 82ae 	bne.w	8007662 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	695a      	ldr	r2, [r3, #20]
 800710a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800710e:	441a      	add	r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	69da      	ldr	r2, [r3, #28]
 8007118:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800711c:	441a      	add	r2, r3
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	6a1a      	ldr	r2, [r3, #32]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	429a      	cmp	r2, r3
 800712c:	d30b      	bcc.n	8007146 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800713e:	1ad2      	subs	r2, r2, r3
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	621a      	str	r2, [r3, #32]
 8007144:	e017      	b.n	8007176 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d108      	bne.n	8007160 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800714e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800715e:	e00a      	b.n	8007176 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6a1b      	ldr	r3, [r3, #32]
 800716c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2200      	movs	r2, #0
 8007174:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	785b      	ldrb	r3, [r3, #1]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d165      	bne.n	800724a <HAL_PCD_EP_DB_Transmit+0x382>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800718c:	b29b      	uxth	r3, r3
 800718e:	461a      	mov	r2, r3
 8007190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007192:	4413      	add	r3, r2
 8007194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	011a      	lsls	r2, r3, #4
 800719c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800719e:	4413      	add	r3, r2
 80071a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	801a      	strh	r2, [r3, #0]
 80071b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071ba:	2b3e      	cmp	r3, #62	; 0x3e
 80071bc:	d91d      	bls.n	80071fa <HAL_PCD_EP_DB_Transmit+0x332>
 80071be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071c2:	095b      	lsrs	r3, r3, #5
 80071c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071ca:	f003 031f 	and.w	r3, r3, #31
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d102      	bne.n	80071d8 <HAL_PCD_EP_DB_Transmit+0x310>
 80071d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d4:	3b01      	subs	r3, #1
 80071d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	b29a      	uxth	r2, r3
 80071de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	029b      	lsls	r3, r3, #10
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	4313      	orrs	r3, r2
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f6:	801a      	strh	r2, [r3, #0]
 80071f8:	e044      	b.n	8007284 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80071fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10a      	bne.n	8007218 <HAL_PCD_EP_DB_Transmit+0x350>
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	b29b      	uxth	r3, r3
 8007208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800720c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007210:	b29a      	uxth	r2, r3
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	801a      	strh	r2, [r3, #0]
 8007216:	e035      	b.n	8007284 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800721c:	085b      	lsrs	r3, r3, #1
 800721e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007220:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <HAL_PCD_EP_DB_Transmit+0x36a>
 800722c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800722e:	3301      	adds	r3, #1
 8007230:	64bb      	str	r3, [r7, #72]	; 0x48
 8007232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29a      	uxth	r2, r3
 8007238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800723a:	b29b      	uxth	r3, r3
 800723c:	029b      	lsls	r3, r3, #10
 800723e:	b29b      	uxth	r3, r3
 8007240:	4313      	orrs	r3, r2
 8007242:	b29a      	uxth	r2, r3
 8007244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007246:	801a      	strh	r2, [r3, #0]
 8007248:	e01c      	b.n	8007284 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	785b      	ldrb	r3, [r3, #1]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d118      	bne.n	8007284 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	647b      	str	r3, [r7, #68]	; 0x44
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007260:	b29b      	uxth	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007266:	4413      	add	r3, r2
 8007268:	647b      	str	r3, [r7, #68]	; 0x44
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	011a      	lsls	r2, r3, #4
 8007270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007272:	4413      	add	r3, r2
 8007274:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007278:	643b      	str	r3, [r7, #64]	; 0x40
 800727a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800727e:	b29a      	uxth	r2, r3
 8007280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007282:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6818      	ldr	r0, [r3, #0]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6959      	ldr	r1, [r3, #20]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	891a      	ldrh	r2, [r3, #8]
 8007290:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007294:	b29b      	uxth	r3, r3
 8007296:	f004 fdf8 	bl	800be8a <USB_WritePMA>
 800729a:	e1e2      	b.n	8007662 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	461a      	mov	r2, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	00db      	lsls	r3, r3, #3
 80072ae:	4413      	add	r3, r2
 80072b0:	3306      	adds	r3, #6
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	6812      	ldr	r2, [r2, #0]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072c4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	699a      	ldr	r2, [r3, #24]
 80072cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d307      	bcc.n	80072e4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	699a      	ldr	r2, [r3, #24]
 80072d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80072dc:	1ad2      	subs	r2, r2, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	619a      	str	r2, [r3, #24]
 80072e2:	e002      	b.n	80072ea <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2200      	movs	r2, #0
 80072e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f040 80c0 	bne.w	8007474 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	785b      	ldrb	r3, [r3, #1]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d126      	bne.n	800734a <HAL_PCD_EP_DB_Transmit+0x482>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800730a:	b29b      	uxth	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007310:	4413      	add	r3, r2
 8007312:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	011a      	lsls	r2, r3, #4
 800731a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800731c:	4413      	add	r3, r2
 800731e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007322:	67bb      	str	r3, [r7, #120]	; 0x78
 8007324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800732e:	b29a      	uxth	r2, r3
 8007330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007332:	801a      	strh	r2, [r3, #0]
 8007334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007342:	b29a      	uxth	r2, r3
 8007344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007346:	801a      	strh	r2, [r3, #0]
 8007348:	e01a      	b.n	8007380 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	785b      	ldrb	r3, [r3, #1]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d116      	bne.n	8007380 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	667b      	str	r3, [r7, #100]	; 0x64
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007360:	b29b      	uxth	r3, r3
 8007362:	461a      	mov	r2, r3
 8007364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007366:	4413      	add	r3, r2
 8007368:	667b      	str	r3, [r7, #100]	; 0x64
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	011a      	lsls	r2, r3, #4
 8007370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007372:	4413      	add	r3, r2
 8007374:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007378:	663b      	str	r3, [r7, #96]	; 0x60
 800737a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800737c:	2200      	movs	r2, #0
 800737e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	677b      	str	r3, [r7, #116]	; 0x74
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	785b      	ldrb	r3, [r3, #1]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d12b      	bne.n	80073e6 <HAL_PCD_EP_DB_Transmit+0x51e>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800739c:	b29b      	uxth	r3, r3
 800739e:	461a      	mov	r2, r3
 80073a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a2:	4413      	add	r3, r2
 80073a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	011a      	lsls	r2, r3, #4
 80073ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ae:	4413      	add	r3, r2
 80073b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073ca:	801a      	strh	r2, [r3, #0]
 80073cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073dc:	b29a      	uxth	r2, r3
 80073de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073e2:	801a      	strh	r2, [r3, #0]
 80073e4:	e017      	b.n	8007416 <HAL_PCD_EP_DB_Transmit+0x54e>
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	785b      	ldrb	r3, [r3, #1]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d113      	bne.n	8007416 <HAL_PCD_EP_DB_Transmit+0x54e>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	461a      	mov	r2, r3
 80073fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073fc:	4413      	add	r3, r2
 80073fe:	677b      	str	r3, [r7, #116]	; 0x74
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	011a      	lsls	r2, r3, #4
 8007406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007408:	4413      	add	r3, r2
 800740a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800740e:	673b      	str	r3, [r7, #112]	; 0x70
 8007410:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007412:	2200      	movs	r2, #0
 8007414:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	4619      	mov	r1, r3
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f006 fb28 	bl	800da72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007422:	88fb      	ldrh	r3, [r7, #6]
 8007424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007428:	2b00      	cmp	r3, #0
 800742a:	f040 811a 	bne.w	8007662 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007448:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	441a      	add	r2, r3
 800745a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800745e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007466:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800746a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746e:	b29b      	uxth	r3, r3
 8007470:	8013      	strh	r3, [r2, #0]
 8007472:	e0f6      	b.n	8007662 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007474:	88fb      	ldrh	r3, [r7, #6]
 8007476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d121      	bne.n	80074c2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	b29b      	uxth	r3, r3
 8007490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007498:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	441a      	add	r2, r3
 80074aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074be:	b29b      	uxth	r3, r3
 80074c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	f040 80ca 	bne.w	8007662 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	695a      	ldr	r2, [r3, #20]
 80074d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80074d6:	441a      	add	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	69da      	ldr	r2, [r3, #28]
 80074e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80074e4:	441a      	add	r2, r3
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	6a1a      	ldr	r2, [r3, #32]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d30b      	bcc.n	800750e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	6a1a      	ldr	r2, [r3, #32]
 8007502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007506:	1ad2      	subs	r2, r2, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	621a      	str	r2, [r3, #32]
 800750c:	e017      	b.n	800753e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d108      	bne.n	8007528 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8007516:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800751a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007526:	e00a      	b.n	800753e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	6a1b      	ldr	r3, [r3, #32]
 800752c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2200      	movs	r2, #0
 8007534:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	657b      	str	r3, [r7, #84]	; 0x54
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	785b      	ldrb	r3, [r3, #1]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d165      	bne.n	8007618 <HAL_PCD_EP_DB_Transmit+0x750>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800755a:	b29b      	uxth	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007560:	4413      	add	r3, r2
 8007562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	011a      	lsls	r2, r3, #4
 800756a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800756c:	4413      	add	r3, r2
 800756e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007572:	65bb      	str	r3, [r7, #88]	; 0x58
 8007574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	b29b      	uxth	r3, r3
 800757a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800757e:	b29a      	uxth	r2, r3
 8007580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007582:	801a      	strh	r2, [r3, #0]
 8007584:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007588:	2b3e      	cmp	r3, #62	; 0x3e
 800758a:	d91d      	bls.n	80075c8 <HAL_PCD_EP_DB_Transmit+0x700>
 800758c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	66bb      	str	r3, [r7, #104]	; 0x68
 8007594:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007598:	f003 031f 	and.w	r3, r3, #31
 800759c:	2b00      	cmp	r3, #0
 800759e:	d102      	bne.n	80075a6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80075a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075a2:	3b01      	subs	r3, #1
 80075a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80075a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	029b      	lsls	r3, r3, #10
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	4313      	orrs	r3, r2
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075c4:	801a      	strh	r2, [r3, #0]
 80075c6:	e041      	b.n	800764c <HAL_PCD_EP_DB_Transmit+0x784>
 80075c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10a      	bne.n	80075e6 <HAL_PCD_EP_DB_Transmit+0x71e>
 80075d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075de:	b29a      	uxth	r2, r3
 80075e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075e2:	801a      	strh	r2, [r3, #0]
 80075e4:	e032      	b.n	800764c <HAL_PCD_EP_DB_Transmit+0x784>
 80075e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075ea:	085b      	lsrs	r3, r3, #1
 80075ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80075ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <HAL_PCD_EP_DB_Transmit+0x738>
 80075fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075fc:	3301      	adds	r3, #1
 80075fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	b29a      	uxth	r2, r3
 8007606:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007608:	b29b      	uxth	r3, r3
 800760a:	029b      	lsls	r3, r3, #10
 800760c:	b29b      	uxth	r3, r3
 800760e:	4313      	orrs	r3, r2
 8007610:	b29a      	uxth	r2, r3
 8007612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007614:	801a      	strh	r2, [r3, #0]
 8007616:	e019      	b.n	800764c <HAL_PCD_EP_DB_Transmit+0x784>
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	785b      	ldrb	r3, [r3, #1]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d115      	bne.n	800764c <HAL_PCD_EP_DB_Transmit+0x784>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007628:	b29b      	uxth	r3, r3
 800762a:	461a      	mov	r2, r3
 800762c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800762e:	4413      	add	r3, r2
 8007630:	657b      	str	r3, [r7, #84]	; 0x54
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	011a      	lsls	r2, r3, #4
 8007638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800763a:	4413      	add	r3, r2
 800763c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007640:	653b      	str	r3, [r7, #80]	; 0x50
 8007642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007646:	b29a      	uxth	r2, r3
 8007648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800764a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6818      	ldr	r0, [r3, #0]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	6959      	ldr	r1, [r3, #20]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	895a      	ldrh	r2, [r3, #10]
 8007658:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800765c:	b29b      	uxth	r3, r3
 800765e:	f004 fc14 	bl	800be8a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800767c:	82bb      	strh	r3, [r7, #20]
 800767e:	8abb      	ldrh	r3, [r7, #20]
 8007680:	f083 0310 	eor.w	r3, r3, #16
 8007684:	82bb      	strh	r3, [r7, #20]
 8007686:	8abb      	ldrh	r3, [r7, #20]
 8007688:	f083 0320 	eor.w	r3, r3, #32
 800768c:	82bb      	strh	r3, [r7, #20]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	441a      	add	r2, r3
 800769c:	8abb      	ldrh	r3, [r7, #20]
 800769e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3790      	adds	r7, #144	; 0x90
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	607b      	str	r3, [r7, #4]
 80076c6:	460b      	mov	r3, r1
 80076c8:	817b      	strh	r3, [r7, #10]
 80076ca:	4613      	mov	r3, r2
 80076cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80076ce:	897b      	ldrh	r3, [r7, #10]
 80076d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076da:	897b      	ldrh	r3, [r7, #10]
 80076dc:	f003 0307 	and.w	r3, r3, #7
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4413      	add	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]
 80076f0:	e009      	b.n	8007706 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80076f2:	897a      	ldrh	r2, [r7, #10]
 80076f4:	4613      	mov	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	00db      	lsls	r3, r3, #3
 80076fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	4413      	add	r3, r2
 8007704:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007706:	893b      	ldrh	r3, [r7, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d107      	bne.n	800771c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2200      	movs	r2, #0
 8007710:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	b29a      	uxth	r2, r3
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	80da      	strh	r2, [r3, #6]
 800771a:	e00b      	b.n	8007734 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2201      	movs	r2, #1
 8007720:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	b29a      	uxth	r2, r3
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	0c1b      	lsrs	r3, r3, #16
 800772e:	b29a      	uxth	r2, r3
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	371c      	adds	r7, #28
 800773a:	46bd      	mov	sp, r7
 800773c:	bc80      	pop	{r7}
 800773e:	4770      	bx	lr

08007740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e272      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 8087 	beq.w	800786e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007760:	4b92      	ldr	r3, [pc, #584]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f003 030c 	and.w	r3, r3, #12
 8007768:	2b04      	cmp	r3, #4
 800776a:	d00c      	beq.n	8007786 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800776c:	4b8f      	ldr	r3, [pc, #572]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f003 030c 	and.w	r3, r3, #12
 8007774:	2b08      	cmp	r3, #8
 8007776:	d112      	bne.n	800779e <HAL_RCC_OscConfig+0x5e>
 8007778:	4b8c      	ldr	r3, [pc, #560]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007784:	d10b      	bne.n	800779e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007786:	4b89      	ldr	r3, [pc, #548]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d06c      	beq.n	800786c <HAL_RCC_OscConfig+0x12c>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d168      	bne.n	800786c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e24c      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a6:	d106      	bne.n	80077b6 <HAL_RCC_OscConfig+0x76>
 80077a8:	4b80      	ldr	r3, [pc, #512]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a7f      	ldr	r2, [pc, #508]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 80077ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	e02e      	b.n	8007814 <HAL_RCC_OscConfig+0xd4>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10c      	bne.n	80077d8 <HAL_RCC_OscConfig+0x98>
 80077be:	4b7b      	ldr	r3, [pc, #492]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a7a      	ldr	r2, [pc, #488]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 80077c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	4b78      	ldr	r3, [pc, #480]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a77      	ldr	r2, [pc, #476]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 80077d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	e01d      	b.n	8007814 <HAL_RCC_OscConfig+0xd4>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077e0:	d10c      	bne.n	80077fc <HAL_RCC_OscConfig+0xbc>
 80077e2:	4b72      	ldr	r3, [pc, #456]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a71      	ldr	r2, [pc, #452]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 80077e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	4b6f      	ldr	r3, [pc, #444]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a6e      	ldr	r2, [pc, #440]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 80077f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	e00b      	b.n	8007814 <HAL_RCC_OscConfig+0xd4>
 80077fc:	4b6b      	ldr	r3, [pc, #428]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a6a      	ldr	r2, [pc, #424]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 8007802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	4b68      	ldr	r3, [pc, #416]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a67      	ldr	r2, [pc, #412]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 800780e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007812:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d013      	beq.n	8007844 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800781c:	f7fc fcce 	bl	80041bc <HAL_GetTick>
 8007820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007822:	e008      	b.n	8007836 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007824:	f7fc fcca 	bl	80041bc <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b64      	cmp	r3, #100	; 0x64
 8007830:	d901      	bls.n	8007836 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e200      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007836:	4b5d      	ldr	r3, [pc, #372]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0f0      	beq.n	8007824 <HAL_RCC_OscConfig+0xe4>
 8007842:	e014      	b.n	800786e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007844:	f7fc fcba 	bl	80041bc <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800784a:	e008      	b.n	800785e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800784c:	f7fc fcb6 	bl	80041bc <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b64      	cmp	r3, #100	; 0x64
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e1ec      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800785e:	4b53      	ldr	r3, [pc, #332]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1f0      	bne.n	800784c <HAL_RCC_OscConfig+0x10c>
 800786a:	e000      	b.n	800786e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800786c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d063      	beq.n	8007942 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800787a:	4b4c      	ldr	r3, [pc, #304]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f003 030c 	and.w	r3, r3, #12
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00b      	beq.n	800789e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007886:	4b49      	ldr	r3, [pc, #292]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f003 030c 	and.w	r3, r3, #12
 800788e:	2b08      	cmp	r3, #8
 8007890:	d11c      	bne.n	80078cc <HAL_RCC_OscConfig+0x18c>
 8007892:	4b46      	ldr	r3, [pc, #280]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d116      	bne.n	80078cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800789e:	4b43      	ldr	r3, [pc, #268]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <HAL_RCC_OscConfig+0x176>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d001      	beq.n	80078b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e1c0      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078b6:	4b3d      	ldr	r3, [pc, #244]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	4939      	ldr	r1, [pc, #228]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ca:	e03a      	b.n	8007942 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d020      	beq.n	8007916 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078d4:	4b36      	ldr	r3, [pc, #216]	; (80079b0 <HAL_RCC_OscConfig+0x270>)
 80078d6:	2201      	movs	r2, #1
 80078d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078da:	f7fc fc6f 	bl	80041bc <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078e0:	e008      	b.n	80078f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078e2:	f7fc fc6b 	bl	80041bc <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e1a1      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078f4:	4b2d      	ldr	r3, [pc, #180]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0f0      	beq.n	80078e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007900:	4b2a      	ldr	r3, [pc, #168]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	4927      	ldr	r1, [pc, #156]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 8007910:	4313      	orrs	r3, r2
 8007912:	600b      	str	r3, [r1, #0]
 8007914:	e015      	b.n	8007942 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007916:	4b26      	ldr	r3, [pc, #152]	; (80079b0 <HAL_RCC_OscConfig+0x270>)
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800791c:	f7fc fc4e 	bl	80041bc <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007924:	f7fc fc4a 	bl	80041bc <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e180      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007936:	4b1d      	ldr	r3, [pc, #116]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f0      	bne.n	8007924 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b00      	cmp	r3, #0
 800794c:	d03a      	beq.n	80079c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d019      	beq.n	800798a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007956:	4b17      	ldr	r3, [pc, #92]	; (80079b4 <HAL_RCC_OscConfig+0x274>)
 8007958:	2201      	movs	r2, #1
 800795a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800795c:	f7fc fc2e 	bl	80041bc <HAL_GetTick>
 8007960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007962:	e008      	b.n	8007976 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007964:	f7fc fc2a 	bl	80041bc <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b02      	cmp	r3, #2
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e160      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007976:	4b0d      	ldr	r3, [pc, #52]	; (80079ac <HAL_RCC_OscConfig+0x26c>)
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0f0      	beq.n	8007964 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007982:	2001      	movs	r0, #1
 8007984:	f000 face 	bl	8007f24 <RCC_Delay>
 8007988:	e01c      	b.n	80079c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800798a:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <HAL_RCC_OscConfig+0x274>)
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007990:	f7fc fc14 	bl	80041bc <HAL_GetTick>
 8007994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007996:	e00f      	b.n	80079b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007998:	f7fc fc10 	bl	80041bc <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d908      	bls.n	80079b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e146      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
 80079aa:	bf00      	nop
 80079ac:	40021000 	.word	0x40021000
 80079b0:	42420000 	.word	0x42420000
 80079b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079b8:	4b92      	ldr	r3, [pc, #584]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e9      	bne.n	8007998 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80a6 	beq.w	8007b1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079d2:	2300      	movs	r3, #0
 80079d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079d6:	4b8b      	ldr	r3, [pc, #556]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10d      	bne.n	80079fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079e2:	4b88      	ldr	r3, [pc, #544]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	4a87      	ldr	r2, [pc, #540]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 80079e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ec:	61d3      	str	r3, [r2, #28]
 80079ee:	4b85      	ldr	r3, [pc, #532]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f6:	60bb      	str	r3, [r7, #8]
 80079f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079fa:	2301      	movs	r3, #1
 80079fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079fe:	4b82      	ldr	r3, [pc, #520]	; (8007c08 <HAL_RCC_OscConfig+0x4c8>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d118      	bne.n	8007a3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a0a:	4b7f      	ldr	r3, [pc, #508]	; (8007c08 <HAL_RCC_OscConfig+0x4c8>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a7e      	ldr	r2, [pc, #504]	; (8007c08 <HAL_RCC_OscConfig+0x4c8>)
 8007a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a16:	f7fc fbd1 	bl	80041bc <HAL_GetTick>
 8007a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a1c:	e008      	b.n	8007a30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a1e:	f7fc fbcd 	bl	80041bc <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	2b64      	cmp	r3, #100	; 0x64
 8007a2a:	d901      	bls.n	8007a30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e103      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a30:	4b75      	ldr	r3, [pc, #468]	; (8007c08 <HAL_RCC_OscConfig+0x4c8>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d0f0      	beq.n	8007a1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d106      	bne.n	8007a52 <HAL_RCC_OscConfig+0x312>
 8007a44:	4b6f      	ldr	r3, [pc, #444]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007a46:	6a1b      	ldr	r3, [r3, #32]
 8007a48:	4a6e      	ldr	r2, [pc, #440]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007a4a:	f043 0301 	orr.w	r3, r3, #1
 8007a4e:	6213      	str	r3, [r2, #32]
 8007a50:	e02d      	b.n	8007aae <HAL_RCC_OscConfig+0x36e>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10c      	bne.n	8007a74 <HAL_RCC_OscConfig+0x334>
 8007a5a:	4b6a      	ldr	r3, [pc, #424]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	4a69      	ldr	r2, [pc, #420]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007a60:	f023 0301 	bic.w	r3, r3, #1
 8007a64:	6213      	str	r3, [r2, #32]
 8007a66:	4b67      	ldr	r3, [pc, #412]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	4a66      	ldr	r2, [pc, #408]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007a6c:	f023 0304 	bic.w	r3, r3, #4
 8007a70:	6213      	str	r3, [r2, #32]
 8007a72:	e01c      	b.n	8007aae <HAL_RCC_OscConfig+0x36e>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	2b05      	cmp	r3, #5
 8007a7a:	d10c      	bne.n	8007a96 <HAL_RCC_OscConfig+0x356>
 8007a7c:	4b61      	ldr	r3, [pc, #388]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	4a60      	ldr	r2, [pc, #384]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007a82:	f043 0304 	orr.w	r3, r3, #4
 8007a86:	6213      	str	r3, [r2, #32]
 8007a88:	4b5e      	ldr	r3, [pc, #376]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007a8a:	6a1b      	ldr	r3, [r3, #32]
 8007a8c:	4a5d      	ldr	r2, [pc, #372]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007a8e:	f043 0301 	orr.w	r3, r3, #1
 8007a92:	6213      	str	r3, [r2, #32]
 8007a94:	e00b      	b.n	8007aae <HAL_RCC_OscConfig+0x36e>
 8007a96:	4b5b      	ldr	r3, [pc, #364]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	4a5a      	ldr	r2, [pc, #360]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	6213      	str	r3, [r2, #32]
 8007aa2:	4b58      	ldr	r3, [pc, #352]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	4a57      	ldr	r2, [pc, #348]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007aa8:	f023 0304 	bic.w	r3, r3, #4
 8007aac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d015      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ab6:	f7fc fb81 	bl	80041bc <HAL_GetTick>
 8007aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007abc:	e00a      	b.n	8007ad4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007abe:	f7fc fb7d 	bl	80041bc <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d901      	bls.n	8007ad4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e0b1      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ad4:	4b4b      	ldr	r3, [pc, #300]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d0ee      	beq.n	8007abe <HAL_RCC_OscConfig+0x37e>
 8007ae0:	e014      	b.n	8007b0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ae2:	f7fc fb6b 	bl	80041bc <HAL_GetTick>
 8007ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ae8:	e00a      	b.n	8007b00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aea:	f7fc fb67 	bl	80041bc <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d901      	bls.n	8007b00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e09b      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b00:	4b40      	ldr	r3, [pc, #256]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1ee      	bne.n	8007aea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d105      	bne.n	8007b1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b12:	4b3c      	ldr	r3, [pc, #240]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	4a3b      	ldr	r2, [pc, #236]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 8087 	beq.w	8007c36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b28:	4b36      	ldr	r3, [pc, #216]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f003 030c 	and.w	r3, r3, #12
 8007b30:	2b08      	cmp	r3, #8
 8007b32:	d061      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d146      	bne.n	8007bca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b3c:	4b33      	ldr	r3, [pc, #204]	; (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b42:	f7fc fb3b 	bl	80041bc <HAL_GetTick>
 8007b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b48:	e008      	b.n	8007b5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b4a:	f7fc fb37 	bl	80041bc <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d901      	bls.n	8007b5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e06d      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b5c:	4b29      	ldr	r3, [pc, #164]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1f0      	bne.n	8007b4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b70:	d108      	bne.n	8007b84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007b72:	4b24      	ldr	r3, [pc, #144]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	4921      	ldr	r1, [pc, #132]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b84:	4b1f      	ldr	r3, [pc, #124]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a19      	ldr	r1, [r3, #32]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	430b      	orrs	r3, r1
 8007b96:	491b      	ldr	r1, [pc, #108]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b9c:	4b1b      	ldr	r3, [pc, #108]	; (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba2:	f7fc fb0b 	bl	80041bc <HAL_GetTick>
 8007ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007ba8:	e008      	b.n	8007bbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007baa:	f7fc fb07 	bl	80041bc <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d901      	bls.n	8007bbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e03d      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007bbc:	4b11      	ldr	r3, [pc, #68]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0f0      	beq.n	8007baa <HAL_RCC_OscConfig+0x46a>
 8007bc8:	e035      	b.n	8007c36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bca:	4b10      	ldr	r3, [pc, #64]	; (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bd0:	f7fc faf4 	bl	80041bc <HAL_GetTick>
 8007bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bd8:	f7fc faf0 	bl	80041bc <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e026      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007bea:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <HAL_RCC_OscConfig+0x4c4>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1f0      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x498>
 8007bf6:	e01e      	b.n	8007c36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d107      	bne.n	8007c10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e019      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
 8007c04:	40021000 	.word	0x40021000
 8007c08:	40007000 	.word	0x40007000
 8007c0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007c10:	4b0b      	ldr	r3, [pc, #44]	; (8007c40 <HAL_RCC_OscConfig+0x500>)
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d106      	bne.n	8007c32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d001      	beq.n	8007c36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e000      	b.n	8007c38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	40021000 	.word	0x40021000

08007c44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e0d0      	b.n	8007dfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c58:	4b6a      	ldr	r3, [pc, #424]	; (8007e04 <HAL_RCC_ClockConfig+0x1c0>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d910      	bls.n	8007c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c66:	4b67      	ldr	r3, [pc, #412]	; (8007e04 <HAL_RCC_ClockConfig+0x1c0>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f023 0207 	bic.w	r2, r3, #7
 8007c6e:	4965      	ldr	r1, [pc, #404]	; (8007e04 <HAL_RCC_ClockConfig+0x1c0>)
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c76:	4b63      	ldr	r3, [pc, #396]	; (8007e04 <HAL_RCC_ClockConfig+0x1c0>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0307 	and.w	r3, r3, #7
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d001      	beq.n	8007c88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e0b8      	b.n	8007dfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d020      	beq.n	8007cd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ca0:	4b59      	ldr	r3, [pc, #356]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	4a58      	ldr	r2, [pc, #352]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007ca6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007caa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0308 	and.w	r3, r3, #8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cb8:	4b53      	ldr	r3, [pc, #332]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	4a52      	ldr	r2, [pc, #328]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007cbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007cc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cc4:	4b50      	ldr	r3, [pc, #320]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	494d      	ldr	r1, [pc, #308]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d040      	beq.n	8007d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d107      	bne.n	8007cfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cea:	4b47      	ldr	r3, [pc, #284]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d115      	bne.n	8007d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e07f      	b.n	8007dfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d107      	bne.n	8007d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d02:	4b41      	ldr	r3, [pc, #260]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e073      	b.n	8007dfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d12:	4b3d      	ldr	r3, [pc, #244]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e06b      	b.n	8007dfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d22:	4b39      	ldr	r3, [pc, #228]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f023 0203 	bic.w	r2, r3, #3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	4936      	ldr	r1, [pc, #216]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d34:	f7fc fa42 	bl	80041bc <HAL_GetTick>
 8007d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d3a:	e00a      	b.n	8007d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d3c:	f7fc fa3e 	bl	80041bc <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e053      	b.n	8007dfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d52:	4b2d      	ldr	r3, [pc, #180]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f003 020c 	and.w	r2, r3, #12
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d1eb      	bne.n	8007d3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d64:	4b27      	ldr	r3, [pc, #156]	; (8007e04 <HAL_RCC_ClockConfig+0x1c0>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0307 	and.w	r3, r3, #7
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d210      	bcs.n	8007d94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d72:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <HAL_RCC_ClockConfig+0x1c0>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f023 0207 	bic.w	r2, r3, #7
 8007d7a:	4922      	ldr	r1, [pc, #136]	; (8007e04 <HAL_RCC_ClockConfig+0x1c0>)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d82:	4b20      	ldr	r3, [pc, #128]	; (8007e04 <HAL_RCC_ClockConfig+0x1c0>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d001      	beq.n	8007d94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e032      	b.n	8007dfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d008      	beq.n	8007db2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007da0:	4b19      	ldr	r3, [pc, #100]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	4916      	ldr	r1, [pc, #88]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007dbe:	4b12      	ldr	r3, [pc, #72]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	490e      	ldr	r1, [pc, #56]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007dd2:	f000 f821 	bl	8007e18 <HAL_RCC_GetSysClockFreq>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	091b      	lsrs	r3, r3, #4
 8007dde:	f003 030f 	and.w	r3, r3, #15
 8007de2:	490a      	ldr	r1, [pc, #40]	; (8007e0c <HAL_RCC_ClockConfig+0x1c8>)
 8007de4:	5ccb      	ldrb	r3, [r1, r3]
 8007de6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dea:	4a09      	ldr	r2, [pc, #36]	; (8007e10 <HAL_RCC_ClockConfig+0x1cc>)
 8007dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <HAL_RCC_ClockConfig+0x1d0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fc f9a0 	bl	8004138 <HAL_InitTick>

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	40022000 	.word	0x40022000
 8007e08:	40021000 	.word	0x40021000
 8007e0c:	08016190 	.word	0x08016190
 8007e10:	20000054 	.word	0x20000054
 8007e14:	20000058 	.word	0x20000058

08007e18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	2300      	movs	r3, #0
 8007e24:	60bb      	str	r3, [r7, #8]
 8007e26:	2300      	movs	r3, #0
 8007e28:	617b      	str	r3, [r7, #20]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007e32:	4b1e      	ldr	r3, [pc, #120]	; (8007eac <HAL_RCC_GetSysClockFreq+0x94>)
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f003 030c 	and.w	r3, r3, #12
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d002      	beq.n	8007e48 <HAL_RCC_GetSysClockFreq+0x30>
 8007e42:	2b08      	cmp	r3, #8
 8007e44:	d003      	beq.n	8007e4e <HAL_RCC_GetSysClockFreq+0x36>
 8007e46:	e027      	b.n	8007e98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007e48:	4b19      	ldr	r3, [pc, #100]	; (8007eb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8007e4a:	613b      	str	r3, [r7, #16]
      break;
 8007e4c:	e027      	b.n	8007e9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	0c9b      	lsrs	r3, r3, #18
 8007e52:	f003 030f 	and.w	r3, r3, #15
 8007e56:	4a17      	ldr	r2, [pc, #92]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007e58:	5cd3      	ldrb	r3, [r2, r3]
 8007e5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d010      	beq.n	8007e88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007e66:	4b11      	ldr	r3, [pc, #68]	; (8007eac <HAL_RCC_GetSysClockFreq+0x94>)
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	0c5b      	lsrs	r3, r3, #17
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	4a11      	ldr	r2, [pc, #68]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007e72:	5cd3      	ldrb	r3, [r2, r3]
 8007e74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a0d      	ldr	r2, [pc, #52]	; (8007eb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8007e7a:	fb03 f202 	mul.w	r2, r3, r2
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e84:	617b      	str	r3, [r7, #20]
 8007e86:	e004      	b.n	8007e92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a0c      	ldr	r2, [pc, #48]	; (8007ebc <HAL_RCC_GetSysClockFreq+0xa4>)
 8007e8c:	fb02 f303 	mul.w	r3, r2, r3
 8007e90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	613b      	str	r3, [r7, #16]
      break;
 8007e96:	e002      	b.n	8007e9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007e98:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8007e9a:	613b      	str	r3, [r7, #16]
      break;
 8007e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e9e:	693b      	ldr	r3, [r7, #16]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	371c      	adds	r7, #28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bc80      	pop	{r7}
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	40021000 	.word	0x40021000
 8007eb0:	007a1200 	.word	0x007a1200
 8007eb4:	080161a8 	.word	0x080161a8
 8007eb8:	080161b8 	.word	0x080161b8
 8007ebc:	003d0900 	.word	0x003d0900

08007ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ec4:	4b02      	ldr	r3, [pc, #8]	; (8007ed0 <HAL_RCC_GetHCLKFreq+0x10>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bc80      	pop	{r7}
 8007ece:	4770      	bx	lr
 8007ed0:	20000054 	.word	0x20000054

08007ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ed8:	f7ff fff2 	bl	8007ec0 <HAL_RCC_GetHCLKFreq>
 8007edc:	4602      	mov	r2, r0
 8007ede:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	0a1b      	lsrs	r3, r3, #8
 8007ee4:	f003 0307 	and.w	r3, r3, #7
 8007ee8:	4903      	ldr	r1, [pc, #12]	; (8007ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eea:	5ccb      	ldrb	r3, [r1, r3]
 8007eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	40021000 	.word	0x40021000
 8007ef8:	080161a0 	.word	0x080161a0

08007efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007f00:	f7ff ffde 	bl	8007ec0 <HAL_RCC_GetHCLKFreq>
 8007f04:	4602      	mov	r2, r0
 8007f06:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	0adb      	lsrs	r3, r3, #11
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	4903      	ldr	r1, [pc, #12]	; (8007f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f12:	5ccb      	ldrb	r3, [r1, r3]
 8007f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	40021000 	.word	0x40021000
 8007f20:	080161a0 	.word	0x080161a0

08007f24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007f2c:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <RCC_Delay+0x34>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a0a      	ldr	r2, [pc, #40]	; (8007f5c <RCC_Delay+0x38>)
 8007f32:	fba2 2303 	umull	r2, r3, r2, r3
 8007f36:	0a5b      	lsrs	r3, r3, #9
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	fb02 f303 	mul.w	r3, r2, r3
 8007f3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007f40:	bf00      	nop
  }
  while (Delay --);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	1e5a      	subs	r2, r3, #1
 8007f46:	60fa      	str	r2, [r7, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1f9      	bne.n	8007f40 <RCC_Delay+0x1c>
}
 8007f4c:	bf00      	nop
 8007f4e:	bf00      	nop
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bc80      	pop	{r7}
 8007f56:	4770      	bx	lr
 8007f58:	20000054 	.word	0x20000054
 8007f5c:	10624dd3 	.word	0x10624dd3

08007f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	613b      	str	r3, [r7, #16]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d07d      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f80:	4b4f      	ldr	r3, [pc, #316]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10d      	bne.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f8c:	4b4c      	ldr	r3, [pc, #304]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	4a4b      	ldr	r2, [pc, #300]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f96:	61d3      	str	r3, [r2, #28]
 8007f98:	4b49      	ldr	r3, [pc, #292]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f9a:	69db      	ldr	r3, [r3, #28]
 8007f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fa0:	60bb      	str	r3, [r7, #8]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fa8:	4b46      	ldr	r3, [pc, #280]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d118      	bne.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fb4:	4b43      	ldr	r3, [pc, #268]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a42      	ldr	r2, [pc, #264]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fc0:	f7fc f8fc 	bl	80041bc <HAL_GetTick>
 8007fc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fc6:	e008      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fc8:	f7fc f8f8 	bl	80041bc <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b64      	cmp	r3, #100	; 0x64
 8007fd4:	d901      	bls.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e06d      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fda:	4b3a      	ldr	r3, [pc, #232]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0f0      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007fe6:	4b36      	ldr	r3, [pc, #216]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d02e      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	429a      	cmp	r2, r3
 8008002:	d027      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008004:	4b2e      	ldr	r3, [pc, #184]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800800c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800800e:	4b2e      	ldr	r3, [pc, #184]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008010:	2201      	movs	r2, #1
 8008012:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008014:	4b2c      	ldr	r3, [pc, #176]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800801a:	4a29      	ldr	r2, [pc, #164]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d014      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800802a:	f7fc f8c7 	bl	80041bc <HAL_GetTick>
 800802e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008030:	e00a      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008032:	f7fc f8c3 	bl	80041bc <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008040:	4293      	cmp	r3, r2
 8008042:	d901      	bls.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e036      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008048:	4b1d      	ldr	r3, [pc, #116]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	f003 0302 	and.w	r3, r3, #2
 8008050:	2b00      	cmp	r3, #0
 8008052:	d0ee      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008054:	4b1a      	ldr	r3, [pc, #104]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	4917      	ldr	r1, [pc, #92]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008062:	4313      	orrs	r3, r2
 8008064:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008066:	7dfb      	ldrb	r3, [r7, #23]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d105      	bne.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800806c:	4b14      	ldr	r3, [pc, #80]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	4a13      	ldr	r2, [pc, #76]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008076:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d008      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008084:	4b0e      	ldr	r3, [pc, #56]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	490b      	ldr	r1, [pc, #44]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008092:	4313      	orrs	r3, r2
 8008094:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0310 	and.w	r3, r3, #16
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d008      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080a2:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	4904      	ldr	r1, [pc, #16]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	40021000 	.word	0x40021000
 80080c4:	40007000 	.word	0x40007000
 80080c8:	42420440 	.word	0x42420440

080080cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b088      	sub	sp, #32
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	2300      	movs	r3, #0
 80080da:	61fb      	str	r3, [r7, #28]
 80080dc:	2300      	movs	r3, #0
 80080de:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	2300      	movs	r3, #0
 80080e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b10      	cmp	r3, #16
 80080ec:	d00a      	beq.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b10      	cmp	r3, #16
 80080f2:	f200 808a 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d045      	beq.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d075      	beq.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8008102:	e082      	b.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8008104:	4b46      	ldr	r3, [pc, #280]	; (8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800810a:	4b45      	ldr	r3, [pc, #276]	; (8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d07b      	beq.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	0c9b      	lsrs	r3, r3, #18
 800811a:	f003 030f 	and.w	r3, r3, #15
 800811e:	4a41      	ldr	r2, [pc, #260]	; (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8008120:	5cd3      	ldrb	r3, [r2, r3]
 8008122:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d015      	beq.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800812e:	4b3c      	ldr	r3, [pc, #240]	; (8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	0c5b      	lsrs	r3, r3, #17
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	4a3b      	ldr	r2, [pc, #236]	; (8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800813a:	5cd3      	ldrb	r3, [r2, r3]
 800813c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00d      	beq.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008148:	4a38      	ldr	r2, [pc, #224]	; (800822c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	fb02 f303 	mul.w	r3, r2, r3
 8008156:	61fb      	str	r3, [r7, #28]
 8008158:	e004      	b.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	4a34      	ldr	r2, [pc, #208]	; (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800815e:	fb02 f303 	mul.w	r3, r2, r3
 8008162:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008164:	4b2e      	ldr	r3, [pc, #184]	; (8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800816c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008170:	d102      	bne.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	61bb      	str	r3, [r7, #24]
      break;
 8008176:	e04a      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	4a2d      	ldr	r2, [pc, #180]	; (8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800817e:	fba2 2303 	umull	r2, r3, r2, r3
 8008182:	085b      	lsrs	r3, r3, #1
 8008184:	61bb      	str	r3, [r7, #24]
      break;
 8008186:	e042      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8008188:	4b25      	ldr	r3, [pc, #148]	; (8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008198:	d108      	bne.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80081a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	e01f      	b.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b6:	d109      	bne.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80081b8:	4b19      	ldr	r3, [pc, #100]	; (8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80081c4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80081c8:	61bb      	str	r3, [r7, #24]
 80081ca:	e00f      	b.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081d6:	d11c      	bne.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80081d8:	4b11      	ldr	r3, [pc, #68]	; (8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d016      	beq.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80081e4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80081e8:	61bb      	str	r3, [r7, #24]
      break;
 80081ea:	e012      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80081ec:	e011      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80081ee:	f7ff fe85 	bl	8007efc <HAL_RCC_GetPCLK2Freq>
 80081f2:	4602      	mov	r2, r0
 80081f4:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	0b9b      	lsrs	r3, r3, #14
 80081fa:	f003 0303 	and.w	r3, r3, #3
 80081fe:	3301      	adds	r3, #1
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	fbb2 f3f3 	udiv	r3, r2, r3
 8008206:	61bb      	str	r3, [r7, #24]
      break;
 8008208:	e004      	b.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800820a:	bf00      	nop
 800820c:	e002      	b.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800820e:	bf00      	nop
 8008210:	e000      	b.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008212:	bf00      	nop
    }
  }
  return (frequency);
 8008214:	69bb      	ldr	r3, [r7, #24]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3720      	adds	r7, #32
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	40021000 	.word	0x40021000
 8008224:	080161bc 	.word	0x080161bc
 8008228:	080161cc 	.word	0x080161cc
 800822c:	007a1200 	.word	0x007a1200
 8008230:	003d0900 	.word	0x003d0900
 8008234:	aaaaaaab 	.word	0xaaaaaaab

08008238 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e076      	b.n	8008338 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824e:	2b00      	cmp	r3, #0
 8008250:	d108      	bne.n	8008264 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800825a:	d009      	beq.n	8008270 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	61da      	str	r2, [r3, #28]
 8008262:	e005      	b.n	8008270 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d106      	bne.n	8008290 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7fb fd26 	bl	8003cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2202      	movs	r2, #2
 8008294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80082b8:	431a      	orrs	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082c2:	431a      	orrs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	431a      	orrs	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	431a      	orrs	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082e0:	431a      	orrs	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a1b      	ldr	r3, [r3, #32]
 80082f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f4:	ea42 0103 	orr.w	r1, r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	0c1a      	lsrs	r2, r3, #16
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f002 0204 	and.w	r2, r2, #4
 8008316:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	69da      	ldr	r2, [r3, #28]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008326:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08c      	sub	sp, #48	; 0x30
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
 800834c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800834e:	2301      	movs	r3, #1
 8008350:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_SPI_TransmitReceive+0x26>
 8008362:	2302      	movs	r3, #2
 8008364:	e198      	b.n	8008698 <HAL_SPI_TransmitReceive+0x358>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800836e:	f7fb ff25 	bl	80041bc <HAL_GetTick>
 8008372:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800837a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008384:	887b      	ldrh	r3, [r7, #2]
 8008386:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800838c:	2b01      	cmp	r3, #1
 800838e:	d00f      	beq.n	80083b0 <HAL_SPI_TransmitReceive+0x70>
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008396:	d107      	bne.n	80083a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d103      	bne.n	80083a8 <HAL_SPI_TransmitReceive+0x68>
 80083a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d003      	beq.n	80083b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80083a8:	2302      	movs	r3, #2
 80083aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083ae:	e16d      	b.n	800868c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <HAL_SPI_TransmitReceive+0x82>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d002      	beq.n	80083c2 <HAL_SPI_TransmitReceive+0x82>
 80083bc:	887b      	ldrh	r3, [r7, #2]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d103      	bne.n	80083ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083c8:	e160      	b.n	800868c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b04      	cmp	r3, #4
 80083d4:	d003      	beq.n	80083de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2205      	movs	r2, #5
 80083da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	887a      	ldrh	r2, [r7, #2]
 80083ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	887a      	ldrh	r2, [r7, #2]
 80083f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	887a      	ldrh	r2, [r7, #2]
 8008400:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	887a      	ldrh	r2, [r7, #2]
 8008406:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841e:	2b40      	cmp	r3, #64	; 0x40
 8008420:	d007      	beq.n	8008432 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008430:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800843a:	d17c      	bne.n	8008536 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <HAL_SPI_TransmitReceive+0x10a>
 8008444:	8b7b      	ldrh	r3, [r7, #26]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d16a      	bne.n	8008520 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844e:	881a      	ldrh	r2, [r3, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	1c9a      	adds	r2, r3, #2
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008464:	b29b      	uxth	r3, r3
 8008466:	3b01      	subs	r3, #1
 8008468:	b29a      	uxth	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800846e:	e057      	b.n	8008520 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b02      	cmp	r3, #2
 800847c:	d11b      	bne.n	80084b6 <HAL_SPI_TransmitReceive+0x176>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008482:	b29b      	uxth	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	d016      	beq.n	80084b6 <HAL_SPI_TransmitReceive+0x176>
 8008488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848a:	2b01      	cmp	r3, #1
 800848c:	d113      	bne.n	80084b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008492:	881a      	ldrh	r2, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849e:	1c9a      	adds	r2, r3, #2
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	3b01      	subs	r3, #1
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d119      	bne.n	80084f8 <HAL_SPI_TransmitReceive+0x1b8>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d014      	beq.n	80084f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68da      	ldr	r2, [r3, #12]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d8:	b292      	uxth	r2, r2
 80084da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	1c9a      	adds	r2, r3, #2
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	3b01      	subs	r3, #1
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084f4:	2301      	movs	r3, #1
 80084f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80084f8:	f7fb fe60 	bl	80041bc <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008504:	429a      	cmp	r2, r3
 8008506:	d80b      	bhi.n	8008520 <HAL_SPI_TransmitReceive+0x1e0>
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850e:	d007      	beq.n	8008520 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800851e:	e0b5      	b.n	800868c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008524:	b29b      	uxth	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1a2      	bne.n	8008470 <HAL_SPI_TransmitReceive+0x130>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800852e:	b29b      	uxth	r3, r3
 8008530:	2b00      	cmp	r3, #0
 8008532:	d19d      	bne.n	8008470 <HAL_SPI_TransmitReceive+0x130>
 8008534:	e080      	b.n	8008638 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d002      	beq.n	8008544 <HAL_SPI_TransmitReceive+0x204>
 800853e:	8b7b      	ldrh	r3, [r7, #26]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d16f      	bne.n	8008624 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	330c      	adds	r3, #12
 800854e:	7812      	ldrb	r2, [r2, #0]
 8008550:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008560:	b29b      	uxth	r3, r3
 8008562:	3b01      	subs	r3, #1
 8008564:	b29a      	uxth	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800856a:	e05b      	b.n	8008624 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b02      	cmp	r3, #2
 8008578:	d11c      	bne.n	80085b4 <HAL_SPI_TransmitReceive+0x274>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800857e:	b29b      	uxth	r3, r3
 8008580:	2b00      	cmp	r3, #0
 8008582:	d017      	beq.n	80085b4 <HAL_SPI_TransmitReceive+0x274>
 8008584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008586:	2b01      	cmp	r3, #1
 8008588:	d114      	bne.n	80085b4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	330c      	adds	r3, #12
 8008594:	7812      	ldrb	r2, [r2, #0]
 8008596:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	3b01      	subs	r3, #1
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d119      	bne.n	80085f6 <HAL_SPI_TransmitReceive+0x2b6>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d014      	beq.n	80085f6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d6:	b2d2      	uxtb	r2, r2
 80085d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	3b01      	subs	r3, #1
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085f2:	2301      	movs	r3, #1
 80085f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085f6:	f7fb fde1 	bl	80041bc <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008602:	429a      	cmp	r2, r3
 8008604:	d803      	bhi.n	800860e <HAL_SPI_TransmitReceive+0x2ce>
 8008606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860c:	d102      	bne.n	8008614 <HAL_SPI_TransmitReceive+0x2d4>
 800860e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008610:	2b00      	cmp	r3, #0
 8008612:	d107      	bne.n	8008624 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008622:	e033      	b.n	800868c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008628:	b29b      	uxth	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	d19e      	bne.n	800856c <HAL_SPI_TransmitReceive+0x22c>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008632:	b29b      	uxth	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d199      	bne.n	800856c <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 f8c5 	bl	80087cc <SPI_EndRxTxTransaction>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d006      	beq.n	8008656 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2220      	movs	r2, #32
 8008652:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008654:	e01a      	b.n	800868c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10a      	bne.n	8008674 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800865e:	2300      	movs	r3, #0
 8008660:	617b      	str	r3, [r7, #20]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	617b      	str	r3, [r7, #20]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008682:	e003      	b.n	800868c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008694:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008698:	4618      	mov	r0, r3
 800869a:	3730      	adds	r7, #48	; 0x30
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086ae:	b2db      	uxtb	r3, r3
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr
	...

080086bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	4613      	mov	r3, r2
 80086ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086cc:	f7fb fd76 	bl	80041bc <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	1a9b      	subs	r3, r3, r2
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	4413      	add	r3, r2
 80086da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086dc:	f7fb fd6e 	bl	80041bc <HAL_GetTick>
 80086e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086e2:	4b39      	ldr	r3, [pc, #228]	; (80087c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	015b      	lsls	r3, r3, #5
 80086e8:	0d1b      	lsrs	r3, r3, #20
 80086ea:	69fa      	ldr	r2, [r7, #28]
 80086ec:	fb02 f303 	mul.w	r3, r2, r3
 80086f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086f2:	e054      	b.n	800879e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086fa:	d050      	beq.n	800879e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086fc:	f7fb fd5e 	bl	80041bc <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	69fa      	ldr	r2, [r7, #28]
 8008708:	429a      	cmp	r2, r3
 800870a:	d902      	bls.n	8008712 <SPI_WaitFlagStateUntilTimeout+0x56>
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d13d      	bne.n	800878e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008720:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800872a:	d111      	bne.n	8008750 <SPI_WaitFlagStateUntilTimeout+0x94>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008734:	d004      	beq.n	8008740 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800873e:	d107      	bne.n	8008750 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800874e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008758:	d10f      	bne.n	800877a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008778:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e017      	b.n	80087be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	3b01      	subs	r3, #1
 800879c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689a      	ldr	r2, [r3, #8]
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	4013      	ands	r3, r2
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	bf0c      	ite	eq
 80087ae:	2301      	moveq	r3, #1
 80087b0:	2300      	movne	r3, #0
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	461a      	mov	r2, r3
 80087b6:	79fb      	ldrb	r3, [r7, #7]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d19b      	bne.n	80086f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3720      	adds	r7, #32
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20000054 	.word	0x20000054

080087cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af02      	add	r7, sp, #8
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2200      	movs	r2, #0
 80087e0:	2180      	movs	r1, #128	; 0x80
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f7ff ff6a 	bl	80086bc <SPI_WaitFlagStateUntilTimeout>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d007      	beq.n	80087fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f2:	f043 0220 	orr.w	r2, r3, #32
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e000      	b.n	8008800 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e041      	b.n	800889e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d106      	bne.n	8008834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7fb faa0 	bl	8003d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2202      	movs	r2, #2
 8008838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	3304      	adds	r3, #4
 8008844:	4619      	mov	r1, r3
 8008846:	4610      	mov	r0, r2
 8008848:	f000 fa74 	bl	8008d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
	...

080088a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d001      	beq.n	80088c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e03a      	b.n	8008936 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2202      	movs	r2, #2
 80088c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f042 0201 	orr.w	r2, r2, #1
 80088d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a18      	ldr	r2, [pc, #96]	; (8008940 <HAL_TIM_Base_Start_IT+0x98>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d00e      	beq.n	8008900 <HAL_TIM_Base_Start_IT+0x58>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ea:	d009      	beq.n	8008900 <HAL_TIM_Base_Start_IT+0x58>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a14      	ldr	r2, [pc, #80]	; (8008944 <HAL_TIM_Base_Start_IT+0x9c>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d004      	beq.n	8008900 <HAL_TIM_Base_Start_IT+0x58>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a13      	ldr	r2, [pc, #76]	; (8008948 <HAL_TIM_Base_Start_IT+0xa0>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d111      	bne.n	8008924 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2b06      	cmp	r3, #6
 8008910:	d010      	beq.n	8008934 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f042 0201 	orr.w	r2, r2, #1
 8008920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008922:	e007      	b.n	8008934 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f042 0201 	orr.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	bc80      	pop	{r7}
 800893e:	4770      	bx	lr
 8008940:	40012c00 	.word	0x40012c00
 8008944:	40000400 	.word	0x40000400
 8008948:	40000800 	.word	0x40000800

0800894c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	f003 0302 	and.w	r3, r3, #2
 800895e:	2b02      	cmp	r3, #2
 8008960:	d122      	bne.n	80089a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b02      	cmp	r3, #2
 800896e:	d11b      	bne.n	80089a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f06f 0202 	mvn.w	r2, #2
 8008978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f9b4 	bl	8008cfc <HAL_TIM_IC_CaptureCallback>
 8008994:	e005      	b.n	80089a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f9a7 	bl	8008cea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f9b6 	bl	8008d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	f003 0304 	and.w	r3, r3, #4
 80089b2:	2b04      	cmp	r3, #4
 80089b4:	d122      	bne.n	80089fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f003 0304 	and.w	r3, r3, #4
 80089c0:	2b04      	cmp	r3, #4
 80089c2:	d11b      	bne.n	80089fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f06f 0204 	mvn.w	r2, #4
 80089cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2202      	movs	r2, #2
 80089d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f98a 	bl	8008cfc <HAL_TIM_IC_CaptureCallback>
 80089e8:	e005      	b.n	80089f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f97d 	bl	8008cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f98c 	bl	8008d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	f003 0308 	and.w	r3, r3, #8
 8008a06:	2b08      	cmp	r3, #8
 8008a08:	d122      	bne.n	8008a50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	f003 0308 	and.w	r3, r3, #8
 8008a14:	2b08      	cmp	r3, #8
 8008a16:	d11b      	bne.n	8008a50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f06f 0208 	mvn.w	r2, #8
 8008a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2204      	movs	r2, #4
 8008a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	f003 0303 	and.w	r3, r3, #3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d003      	beq.n	8008a3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f960 	bl	8008cfc <HAL_TIM_IC_CaptureCallback>
 8008a3c:	e005      	b.n	8008a4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f953 	bl	8008cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f962 	bl	8008d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	f003 0310 	and.w	r3, r3, #16
 8008a5a:	2b10      	cmp	r3, #16
 8008a5c:	d122      	bne.n	8008aa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	f003 0310 	and.w	r3, r3, #16
 8008a68:	2b10      	cmp	r3, #16
 8008a6a:	d11b      	bne.n	8008aa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f06f 0210 	mvn.w	r2, #16
 8008a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2208      	movs	r2, #8
 8008a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d003      	beq.n	8008a92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f936 	bl	8008cfc <HAL_TIM_IC_CaptureCallback>
 8008a90:	e005      	b.n	8008a9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f929 	bl	8008cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f938 	bl	8008d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d10e      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d107      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f06f 0201 	mvn.w	r2, #1
 8008ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7fa f8ea 	bl	8002ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ada:	2b80      	cmp	r3, #128	; 0x80
 8008adc:	d10e      	bne.n	8008afc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae8:	2b80      	cmp	r3, #128	; 0x80
 8008aea:	d107      	bne.n	8008afc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fa7b 	bl	8008ff2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b06:	2b40      	cmp	r3, #64	; 0x40
 8008b08:	d10e      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b14:	2b40      	cmp	r3, #64	; 0x40
 8008b16:	d107      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f8fc 	bl	8008d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	f003 0320 	and.w	r3, r3, #32
 8008b32:	2b20      	cmp	r3, #32
 8008b34:	d10e      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b20      	cmp	r3, #32
 8008b42:	d107      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f06f 0220 	mvn.w	r2, #32
 8008b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fa46 	bl	8008fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b54:	bf00      	nop
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d101      	bne.n	8008b78 <HAL_TIM_ConfigClockSource+0x1c>
 8008b74:	2302      	movs	r3, #2
 8008b76:	e0b4      	b.n	8008ce2 <HAL_TIM_ConfigClockSource+0x186>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2202      	movs	r2, #2
 8008b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bb0:	d03e      	beq.n	8008c30 <HAL_TIM_ConfigClockSource+0xd4>
 8008bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bb6:	f200 8087 	bhi.w	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bbe:	f000 8086 	beq.w	8008cce <HAL_TIM_ConfigClockSource+0x172>
 8008bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc6:	d87f      	bhi.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008bc8:	2b70      	cmp	r3, #112	; 0x70
 8008bca:	d01a      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0xa6>
 8008bcc:	2b70      	cmp	r3, #112	; 0x70
 8008bce:	d87b      	bhi.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008bd0:	2b60      	cmp	r3, #96	; 0x60
 8008bd2:	d050      	beq.n	8008c76 <HAL_TIM_ConfigClockSource+0x11a>
 8008bd4:	2b60      	cmp	r3, #96	; 0x60
 8008bd6:	d877      	bhi.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008bd8:	2b50      	cmp	r3, #80	; 0x50
 8008bda:	d03c      	beq.n	8008c56 <HAL_TIM_ConfigClockSource+0xfa>
 8008bdc:	2b50      	cmp	r3, #80	; 0x50
 8008bde:	d873      	bhi.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008be0:	2b40      	cmp	r3, #64	; 0x40
 8008be2:	d058      	beq.n	8008c96 <HAL_TIM_ConfigClockSource+0x13a>
 8008be4:	2b40      	cmp	r3, #64	; 0x40
 8008be6:	d86f      	bhi.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008be8:	2b30      	cmp	r3, #48	; 0x30
 8008bea:	d064      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8008bec:	2b30      	cmp	r3, #48	; 0x30
 8008bee:	d86b      	bhi.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008bf0:	2b20      	cmp	r3, #32
 8008bf2:	d060      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	d867      	bhi.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d05c      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8008bfc:	2b10      	cmp	r3, #16
 8008bfe:	d05a      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8008c00:	e062      	b.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c12:	f000 f968 	bl	8008ee6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	609a      	str	r2, [r3, #8]
      break;
 8008c2e:	e04f      	b.n	8008cd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c40:	f000 f951 	bl	8008ee6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	689a      	ldr	r2, [r3, #8]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c52:	609a      	str	r2, [r3, #8]
      break;
 8008c54:	e03c      	b.n	8008cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c62:	461a      	mov	r2, r3
 8008c64:	f000 f8c8 	bl	8008df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2150      	movs	r1, #80	; 0x50
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 f91f 	bl	8008eb2 <TIM_ITRx_SetConfig>
      break;
 8008c74:	e02c      	b.n	8008cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c82:	461a      	mov	r2, r3
 8008c84:	f000 f8e6 	bl	8008e54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2160      	movs	r1, #96	; 0x60
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 f90f 	bl	8008eb2 <TIM_ITRx_SetConfig>
      break;
 8008c94:	e01c      	b.n	8008cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f000 f8a8 	bl	8008df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2140      	movs	r1, #64	; 0x40
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 f8ff 	bl	8008eb2 <TIM_ITRx_SetConfig>
      break;
 8008cb4:	e00c      	b.n	8008cd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	f000 f8f6 	bl	8008eb2 <TIM_ITRx_SetConfig>
      break;
 8008cc6:	e003      	b.n	8008cd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	73fb      	strb	r3, [r7, #15]
      break;
 8008ccc:	e000      	b.n	8008cd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008cce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cf2:	bf00      	nop
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bc80      	pop	{r7}
 8008cfa:	4770      	bx	lr

08008cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc80      	pop	{r7}
 8008d0c:	4770      	bx	lr

08008d0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b083      	sub	sp, #12
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d16:	bf00      	nop
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bc80      	pop	{r7}
 8008d1e:	4770      	bx	lr

08008d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bc80      	pop	{r7}
 8008d30:	4770      	bx	lr
	...

08008d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a29      	ldr	r2, [pc, #164]	; (8008dec <TIM_Base_SetConfig+0xb8>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d00b      	beq.n	8008d64 <TIM_Base_SetConfig+0x30>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d52:	d007      	beq.n	8008d64 <TIM_Base_SetConfig+0x30>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a26      	ldr	r2, [pc, #152]	; (8008df0 <TIM_Base_SetConfig+0xbc>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d003      	beq.n	8008d64 <TIM_Base_SetConfig+0x30>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a25      	ldr	r2, [pc, #148]	; (8008df4 <TIM_Base_SetConfig+0xc0>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d108      	bne.n	8008d76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a1c      	ldr	r2, [pc, #112]	; (8008dec <TIM_Base_SetConfig+0xb8>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d00b      	beq.n	8008d96 <TIM_Base_SetConfig+0x62>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d84:	d007      	beq.n	8008d96 <TIM_Base_SetConfig+0x62>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a19      	ldr	r2, [pc, #100]	; (8008df0 <TIM_Base_SetConfig+0xbc>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d003      	beq.n	8008d96 <TIM_Base_SetConfig+0x62>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a18      	ldr	r2, [pc, #96]	; (8008df4 <TIM_Base_SetConfig+0xc0>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d108      	bne.n	8008da8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	689a      	ldr	r2, [r3, #8]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a07      	ldr	r2, [pc, #28]	; (8008dec <TIM_Base_SetConfig+0xb8>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d103      	bne.n	8008ddc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	691a      	ldr	r2, [r3, #16]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	615a      	str	r2, [r3, #20]
}
 8008de2:	bf00      	nop
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bc80      	pop	{r7}
 8008dea:	4770      	bx	lr
 8008dec:	40012c00 	.word	0x40012c00
 8008df0:	40000400 	.word	0x40000400
 8008df4:	40000800 	.word	0x40000800

08008df8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6a1b      	ldr	r3, [r3, #32]
 8008e08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	f023 0201 	bic.w	r2, r3, #1
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	011b      	lsls	r3, r3, #4
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	f023 030a 	bic.w	r3, r3, #10
 8008e34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	621a      	str	r2, [r3, #32]
}
 8008e4a:	bf00      	nop
 8008e4c:	371c      	adds	r7, #28
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bc80      	pop	{r7}
 8008e52:	4770      	bx	lr

08008e54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6a1b      	ldr	r3, [r3, #32]
 8008e6a:	f023 0210 	bic.w	r2, r3, #16
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	031b      	lsls	r3, r3, #12
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	011b      	lsls	r3, r3, #4
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	621a      	str	r2, [r3, #32]
}
 8008ea8:	bf00      	nop
 8008eaa:	371c      	adds	r7, #28
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bc80      	pop	{r7}
 8008eb0:	4770      	bx	lr

08008eb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b085      	sub	sp, #20
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	f043 0307 	orr.w	r3, r3, #7
 8008ed4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	609a      	str	r2, [r3, #8]
}
 8008edc:	bf00      	nop
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bc80      	pop	{r7}
 8008ee4:	4770      	bx	lr

08008ee6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b087      	sub	sp, #28
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	607a      	str	r2, [r7, #4]
 8008ef2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	021a      	lsls	r2, r3, #8
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	431a      	orrs	r2, r3
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	609a      	str	r2, [r3, #8]
}
 8008f1a:	bf00      	nop
 8008f1c:	371c      	adds	r7, #28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bc80      	pop	{r7}
 8008f22:	4770      	bx	lr

08008f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d101      	bne.n	8008f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e046      	b.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a16      	ldr	r2, [pc, #88]	; (8008fd4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d00e      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f88:	d009      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a12      	ldr	r2, [pc, #72]	; (8008fd8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d004      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a10      	ldr	r2, [pc, #64]	; (8008fdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d10c      	bne.n	8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bc80      	pop	{r7}
 8008fd2:	4770      	bx	lr
 8008fd4:	40012c00 	.word	0x40012c00
 8008fd8:	40000400 	.word	0x40000400
 8008fdc:	40000800 	.word	0x40000800

08008fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bc80      	pop	{r7}
 8008ff0:	4770      	bx	lr

08008ff2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b083      	sub	sp, #12
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ffa:	bf00      	nop
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bc80      	pop	{r7}
 8009002:	4770      	bx	lr

08009004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d101      	bne.n	8009016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e042      	b.n	800909c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800901c:	b2db      	uxtb	r3, r3
 800901e:	2b00      	cmp	r3, #0
 8009020:	d106      	bne.n	8009030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7fa fec8 	bl	8003dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2224      	movs	r2, #36	; 0x24
 8009034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fb89 	bl	8009760 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	691a      	ldr	r2, [r3, #16]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800905c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	695a      	ldr	r2, [r3, #20]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800906c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68da      	ldr	r2, [r3, #12]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800907c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2220      	movs	r2, #32
 8009088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2220      	movs	r2, #32
 8009090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b08a      	sub	sp, #40	; 0x28
 80090a8:	af02      	add	r7, sp, #8
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	603b      	str	r3, [r7, #0]
 80090b0:	4613      	mov	r3, r2
 80090b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80090b4:	2300      	movs	r3, #0
 80090b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b20      	cmp	r3, #32
 80090c2:	d16d      	bne.n	80091a0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d002      	beq.n	80090d0 <HAL_UART_Transmit+0x2c>
 80090ca:	88fb      	ldrh	r3, [r7, #6]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d101      	bne.n	80090d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	e066      	b.n	80091a2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2221      	movs	r2, #33	; 0x21
 80090de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80090e2:	f7fb f86b 	bl	80041bc <HAL_GetTick>
 80090e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	88fa      	ldrh	r2, [r7, #6]
 80090ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	88fa      	ldrh	r2, [r7, #6]
 80090f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090fc:	d108      	bne.n	8009110 <HAL_UART_Transmit+0x6c>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d104      	bne.n	8009110 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009106:	2300      	movs	r3, #0
 8009108:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	61bb      	str	r3, [r7, #24]
 800910e:	e003      	b.n	8009118 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009114:	2300      	movs	r3, #0
 8009116:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009118:	e02a      	b.n	8009170 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2200      	movs	r2, #0
 8009122:	2180      	movs	r1, #128	; 0x80
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f000 f989 	bl	800943c <UART_WaitOnFlagUntilTimeout>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	e036      	b.n	80091a2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10b      	bne.n	8009152 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009148:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	3302      	adds	r3, #2
 800914e:	61bb      	str	r3, [r7, #24]
 8009150:	e007      	b.n	8009162 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	781a      	ldrb	r2, [r3, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	3301      	adds	r3, #1
 8009160:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009166:	b29b      	uxth	r3, r3
 8009168:	3b01      	subs	r3, #1
 800916a:	b29a      	uxth	r2, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009174:	b29b      	uxth	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1cf      	bne.n	800911a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2200      	movs	r2, #0
 8009182:	2140      	movs	r1, #64	; 0x40
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f000 f959 	bl	800943c <UART_WaitOnFlagUntilTimeout>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d001      	beq.n	8009194 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e006      	b.n	80091a2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2220      	movs	r2, #32
 8009198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	e000      	b.n	80091a2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80091a0:	2302      	movs	r3, #2
  }
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3720      	adds	r7, #32
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	4613      	mov	r3, r2
 80091b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b20      	cmp	r3, #32
 80091c2:	d112      	bne.n	80091ea <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <HAL_UART_Receive_DMA+0x26>
 80091ca:	88fb      	ldrh	r3, [r7, #6]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e00b      	b.n	80091ec <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80091da:	88fb      	ldrh	r3, [r7, #6]
 80091dc:	461a      	mov	r2, r3
 80091de:	68b9      	ldr	r1, [r7, #8]
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f000 f999 	bl	8009518 <UART_Start_Receive_DMA>
 80091e6:	4603      	mov	r3, r0
 80091e8:	e000      	b.n	80091ec <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80091ea:	2302      	movs	r3, #2
  }
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	bc80      	pop	{r7}
 8009204:	4770      	bx	lr

08009206 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009206:	b480      	push	{r7}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800920e:	bf00      	nop
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	bc80      	pop	{r7}
 8009216:	4770      	bx	lr

08009218 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	bc80      	pop	{r7}
 8009228:	4770      	bx	lr

0800922a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	460b      	mov	r3, r1
 8009234:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009236:	bf00      	nop
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	bc80      	pop	{r7}
 800923e:	4770      	bx	lr

08009240 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b09c      	sub	sp, #112	; 0x70
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0320 	and.w	r3, r3, #32
 8009258:	2b00      	cmp	r3, #0
 800925a:	d172      	bne.n	8009342 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800925c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800925e:	2200      	movs	r2, #0
 8009260:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	330c      	adds	r3, #12
 8009268:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800926c:	e853 3f00 	ldrex	r3, [r3]
 8009270:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009278:	66bb      	str	r3, [r7, #104]	; 0x68
 800927a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	330c      	adds	r3, #12
 8009280:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009282:	65ba      	str	r2, [r7, #88]	; 0x58
 8009284:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800928a:	e841 2300 	strex	r3, r2, [r1]
 800928e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e5      	bne.n	8009262 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3314      	adds	r3, #20
 800929c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a0:	e853 3f00 	ldrex	r3, [r3]
 80092a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a8:	f023 0301 	bic.w	r3, r3, #1
 80092ac:	667b      	str	r3, [r7, #100]	; 0x64
 80092ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3314      	adds	r3, #20
 80092b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80092b6:	647a      	str	r2, [r7, #68]	; 0x44
 80092b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092be:	e841 2300 	strex	r3, r2, [r1]
 80092c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1e5      	bne.n	8009296 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3314      	adds	r3, #20
 80092d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	e853 3f00 	ldrex	r3, [r3]
 80092d8:	623b      	str	r3, [r7, #32]
   return(result);
 80092da:	6a3b      	ldr	r3, [r7, #32]
 80092dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092e0:	663b      	str	r3, [r7, #96]	; 0x60
 80092e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3314      	adds	r3, #20
 80092e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092ea:	633a      	str	r2, [r7, #48]	; 0x30
 80092ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e5      	bne.n	80092ca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80092fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009300:	2220      	movs	r2, #32
 8009302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930a:	2b01      	cmp	r3, #1
 800930c:	d119      	bne.n	8009342 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800930e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	330c      	adds	r3, #12
 8009314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	60fb      	str	r3, [r7, #12]
   return(result);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f023 0310 	bic.w	r3, r3, #16
 8009324:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	330c      	adds	r3, #12
 800932c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800932e:	61fa      	str	r2, [r7, #28]
 8009330:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	69b9      	ldr	r1, [r7, #24]
 8009334:	69fa      	ldr	r2, [r7, #28]
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	617b      	str	r3, [r7, #20]
   return(result);
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e5      	bne.n	800930e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009344:	2200      	movs	r2, #0
 8009346:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800934a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934c:	2b01      	cmp	r3, #1
 800934e:	d106      	bne.n	800935e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009352:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009354:	4619      	mov	r1, r3
 8009356:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009358:	f7ff ff67 	bl	800922a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800935c:	e002      	b.n	8009364 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800935e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009360:	f7ff ff48 	bl	80091f4 <HAL_UART_RxCpltCallback>
}
 8009364:	bf00      	nop
 8009366:	3770      	adds	r7, #112	; 0x70
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2201      	movs	r2, #1
 800937e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009384:	2b01      	cmp	r3, #1
 8009386:	d108      	bne.n	800939a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800938c:	085b      	lsrs	r3, r3, #1
 800938e:	b29b      	uxth	r3, r3
 8009390:	4619      	mov	r1, r3
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f7ff ff49 	bl	800922a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009398:	e002      	b.n	80093a0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f7ff ff33 	bl	8009206 <HAL_UART_RxHalfCpltCallback>
}
 80093a0:	bf00      	nop
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80093b0:	2300      	movs	r3, #0
 80093b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	695b      	ldr	r3, [r3, #20]
 80093c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	bf14      	ite	ne
 80093c8:	2301      	movne	r3, #1
 80093ca:	2300      	moveq	r3, #0
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b21      	cmp	r3, #33	; 0x21
 80093da:	d108      	bne.n	80093ee <UART_DMAError+0x46>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d005      	beq.n	80093ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	2200      	movs	r2, #0
 80093e6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80093e8:	68b8      	ldr	r0, [r7, #8]
 80093ea:	f000 f92f 	bl	800964c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	695b      	ldr	r3, [r3, #20]
 80093f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	bf14      	ite	ne
 80093fc:	2301      	movne	r3, #1
 80093fe:	2300      	moveq	r3, #0
 8009400:	b2db      	uxtb	r3, r3
 8009402:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b22      	cmp	r3, #34	; 0x22
 800940e:	d108      	bne.n	8009422 <UART_DMAError+0x7a>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d005      	beq.n	8009422 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	2200      	movs	r2, #0
 800941a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800941c:	68b8      	ldr	r0, [r7, #8]
 800941e:	f000 f93c 	bl	800969a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009426:	f043 0210 	orr.w	r2, r3, #16
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800942e:	68b8      	ldr	r0, [r7, #8]
 8009430:	f7ff fef2 	bl	8009218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009434:	bf00      	nop
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b090      	sub	sp, #64	; 0x40
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	603b      	str	r3, [r7, #0]
 8009448:	4613      	mov	r3, r2
 800944a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800944c:	e050      	b.n	80094f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800944e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009454:	d04c      	beq.n	80094f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009458:	2b00      	cmp	r3, #0
 800945a:	d007      	beq.n	800946c <UART_WaitOnFlagUntilTimeout+0x30>
 800945c:	f7fa feae 	bl	80041bc <HAL_GetTick>
 8009460:	4602      	mov	r2, r0
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009468:	429a      	cmp	r2, r3
 800946a:	d241      	bcs.n	80094f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	330c      	adds	r3, #12
 8009472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	e853 3f00 	ldrex	r3, [r3]
 800947a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	330c      	adds	r3, #12
 800948a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800948c:	637a      	str	r2, [r7, #52]	; 0x34
 800948e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009494:	e841 2300 	strex	r3, r2, [r1]
 8009498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800949a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1e5      	bne.n	800946c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3314      	adds	r3, #20
 80094a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	e853 3f00 	ldrex	r3, [r3]
 80094ae:	613b      	str	r3, [r7, #16]
   return(result);
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	f023 0301 	bic.w	r3, r3, #1
 80094b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	3314      	adds	r3, #20
 80094be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094c0:	623a      	str	r2, [r7, #32]
 80094c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c4:	69f9      	ldr	r1, [r7, #28]
 80094c6:	6a3a      	ldr	r2, [r7, #32]
 80094c8:	e841 2300 	strex	r3, r2, [r1]
 80094cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e5      	bne.n	80094a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2220      	movs	r2, #32
 80094d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2220      	movs	r2, #32
 80094e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e00f      	b.n	8009510 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	4013      	ands	r3, r2
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	bf0c      	ite	eq
 8009500:	2301      	moveq	r3, #1
 8009502:	2300      	movne	r3, #0
 8009504:	b2db      	uxtb	r3, r3
 8009506:	461a      	mov	r2, r3
 8009508:	79fb      	ldrb	r3, [r7, #7]
 800950a:	429a      	cmp	r2, r3
 800950c:	d09f      	beq.n	800944e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3740      	adds	r7, #64	; 0x40
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b098      	sub	sp, #96	; 0x60
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	4613      	mov	r3, r2
 8009524:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	88fa      	ldrh	r2, [r7, #6]
 8009530:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2222      	movs	r2, #34	; 0x22
 800953c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009544:	4a3e      	ldr	r2, [pc, #248]	; (8009640 <UART_Start_Receive_DMA+0x128>)
 8009546:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954c:	4a3d      	ldr	r2, [pc, #244]	; (8009644 <UART_Start_Receive_DMA+0x12c>)
 800954e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009554:	4a3c      	ldr	r2, [pc, #240]	; (8009648 <UART_Start_Receive_DMA+0x130>)
 8009556:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955c:	2200      	movs	r2, #0
 800955e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009560:	f107 0308 	add.w	r3, r7, #8
 8009564:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3304      	adds	r3, #4
 8009570:	4619      	mov	r1, r3
 8009572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	88fb      	ldrh	r3, [r7, #6]
 8009578:	f7fb fc30 	bl	8004ddc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800957c:	2300      	movs	r3, #0
 800957e:	613b      	str	r3, [r7, #16]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	613b      	str	r3, [r7, #16]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d019      	beq.n	80095ce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	330c      	adds	r3, #12
 80095a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	330c      	adds	r3, #12
 80095b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80095bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80095c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80095c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e5      	bne.n	800959a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3314      	adds	r3, #20
 80095d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	f043 0301 	orr.w	r3, r3, #1
 80095e4:	657b      	str	r3, [r7, #84]	; 0x54
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3314      	adds	r3, #20
 80095ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80095f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80095f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095f6:	e841 2300 	strex	r3, r2, [r1]
 80095fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e5      	bne.n	80095ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3314      	adds	r3, #20
 8009608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	617b      	str	r3, [r7, #20]
   return(result);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009618:	653b      	str	r3, [r7, #80]	; 0x50
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3314      	adds	r3, #20
 8009620:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009622:	627a      	str	r2, [r7, #36]	; 0x24
 8009624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	6a39      	ldr	r1, [r7, #32]
 8009628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1e5      	bne.n	8009602 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3760      	adds	r7, #96	; 0x60
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	08009241 	.word	0x08009241
 8009644:	0800936d 	.word	0x0800936d
 8009648:	080093a9 	.word	0x080093a9

0800964c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b089      	sub	sp, #36	; 0x24
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	330c      	adds	r3, #12
 800965a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	60bb      	str	r3, [r7, #8]
   return(result);
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800966a:	61fb      	str	r3, [r7, #28]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	330c      	adds	r3, #12
 8009672:	69fa      	ldr	r2, [r7, #28]
 8009674:	61ba      	str	r2, [r7, #24]
 8009676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009678:	6979      	ldr	r1, [r7, #20]
 800967a:	69ba      	ldr	r2, [r7, #24]
 800967c:	e841 2300 	strex	r3, r2, [r1]
 8009680:	613b      	str	r3, [r7, #16]
   return(result);
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e5      	bne.n	8009654 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2220      	movs	r2, #32
 800968c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8009690:	bf00      	nop
 8009692:	3724      	adds	r7, #36	; 0x24
 8009694:	46bd      	mov	sp, r7
 8009696:	bc80      	pop	{r7}
 8009698:	4770      	bx	lr

0800969a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800969a:	b480      	push	{r7}
 800969c:	b095      	sub	sp, #84	; 0x54
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	330c      	adds	r3, #12
 80096a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ac:	e853 3f00 	ldrex	r3, [r3]
 80096b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	330c      	adds	r3, #12
 80096c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096c2:	643a      	str	r2, [r7, #64]	; 0x40
 80096c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096ca:	e841 2300 	strex	r3, r2, [r1]
 80096ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1e5      	bne.n	80096a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3314      	adds	r3, #20
 80096dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	e853 3f00 	ldrex	r3, [r3]
 80096e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	f023 0301 	bic.w	r3, r3, #1
 80096ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3314      	adds	r3, #20
 80096f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096fe:	e841 2300 	strex	r3, r2, [r1]
 8009702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1e5      	bne.n	80096d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970e:	2b01      	cmp	r3, #1
 8009710:	d119      	bne.n	8009746 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	330c      	adds	r3, #12
 8009718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	e853 3f00 	ldrex	r3, [r3]
 8009720:	60bb      	str	r3, [r7, #8]
   return(result);
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	f023 0310 	bic.w	r3, r3, #16
 8009728:	647b      	str	r3, [r7, #68]	; 0x44
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	330c      	adds	r3, #12
 8009730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009732:	61ba      	str	r2, [r7, #24]
 8009734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009736:	6979      	ldr	r1, [r7, #20]
 8009738:	69ba      	ldr	r2, [r7, #24]
 800973a:	e841 2300 	strex	r3, r2, [r1]
 800973e:	613b      	str	r3, [r7, #16]
   return(result);
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1e5      	bne.n	8009712 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2220      	movs	r2, #32
 800974a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009754:	bf00      	nop
 8009756:	3754      	adds	r7, #84	; 0x54
 8009758:	46bd      	mov	sp, r7
 800975a:	bc80      	pop	{r7}
 800975c:	4770      	bx	lr
	...

08009760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68da      	ldr	r2, [r3, #12]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	430a      	orrs	r2, r1
 800977c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	689a      	ldr	r2, [r3, #8]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	431a      	orrs	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	4313      	orrs	r3, r2
 800978e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800979a:	f023 030c 	bic.w	r3, r3, #12
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	6812      	ldr	r2, [r2, #0]
 80097a2:	68b9      	ldr	r1, [r7, #8]
 80097a4:	430b      	orrs	r3, r1
 80097a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	699a      	ldr	r2, [r3, #24]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a2c      	ldr	r2, [pc, #176]	; (8009874 <UART_SetConfig+0x114>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d103      	bne.n	80097d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80097c8:	f7fe fb98 	bl	8007efc <HAL_RCC_GetPCLK2Freq>
 80097cc:	60f8      	str	r0, [r7, #12]
 80097ce:	e002      	b.n	80097d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80097d0:	f7fe fb80 	bl	8007ed4 <HAL_RCC_GetPCLK1Freq>
 80097d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	4613      	mov	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	009a      	lsls	r2, r3, #2
 80097e0:	441a      	add	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ec:	4a22      	ldr	r2, [pc, #136]	; (8009878 <UART_SetConfig+0x118>)
 80097ee:	fba2 2303 	umull	r2, r3, r2, r3
 80097f2:	095b      	lsrs	r3, r3, #5
 80097f4:	0119      	lsls	r1, r3, #4
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	009a      	lsls	r2, r3, #2
 8009800:	441a      	add	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	fbb2 f2f3 	udiv	r2, r2, r3
 800980c:	4b1a      	ldr	r3, [pc, #104]	; (8009878 <UART_SetConfig+0x118>)
 800980e:	fba3 0302 	umull	r0, r3, r3, r2
 8009812:	095b      	lsrs	r3, r3, #5
 8009814:	2064      	movs	r0, #100	; 0x64
 8009816:	fb00 f303 	mul.w	r3, r0, r3
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	011b      	lsls	r3, r3, #4
 800981e:	3332      	adds	r3, #50	; 0x32
 8009820:	4a15      	ldr	r2, [pc, #84]	; (8009878 <UART_SetConfig+0x118>)
 8009822:	fba2 2303 	umull	r2, r3, r2, r3
 8009826:	095b      	lsrs	r3, r3, #5
 8009828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800982c:	4419      	add	r1, r3
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	4613      	mov	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	009a      	lsls	r2, r3, #2
 8009838:	441a      	add	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	fbb2 f2f3 	udiv	r2, r2, r3
 8009844:	4b0c      	ldr	r3, [pc, #48]	; (8009878 <UART_SetConfig+0x118>)
 8009846:	fba3 0302 	umull	r0, r3, r3, r2
 800984a:	095b      	lsrs	r3, r3, #5
 800984c:	2064      	movs	r0, #100	; 0x64
 800984e:	fb00 f303 	mul.w	r3, r0, r3
 8009852:	1ad3      	subs	r3, r2, r3
 8009854:	011b      	lsls	r3, r3, #4
 8009856:	3332      	adds	r3, #50	; 0x32
 8009858:	4a07      	ldr	r2, [pc, #28]	; (8009878 <UART_SetConfig+0x118>)
 800985a:	fba2 2303 	umull	r2, r3, r2, r3
 800985e:	095b      	lsrs	r3, r3, #5
 8009860:	f003 020f 	and.w	r2, r3, #15
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	440a      	add	r2, r1
 800986a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800986c:	bf00      	nop
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	40013800 	.word	0x40013800
 8009878:	51eb851f 	.word	0x51eb851f

0800987c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800987c:	b084      	sub	sp, #16
 800987e:	b480      	push	{r7}
 8009880:	b083      	sub	sp, #12
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	f107 0014 	add.w	r0, r7, #20
 800988a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	bc80      	pop	{r7}
 8009898:	b004      	add	sp, #16
 800989a:	4770      	bx	lr

0800989c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80098ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80098b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bc80      	pop	{r7}
 80098c6:	4770      	bx	lr

080098c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80098d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80098d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80098dc:	b29a      	uxth	r2, r3
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	43db      	mvns	r3, r3
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	4013      	ands	r3, r2
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3714      	adds	r7, #20
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bc80      	pop	{r7}
 80098fa:	4770      	bx	lr

080098fc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	460b      	mov	r3, r1
 8009906:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	370c      	adds	r7, #12
 800990e:	46bd      	mov	sp, r7
 8009910:	bc80      	pop	{r7}
 8009912:	4770      	bx	lr

08009914 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009914:	b084      	sub	sp, #16
 8009916:	b480      	push	{r7}
 8009918:	b083      	sub	sp, #12
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	f107 0014 	add.w	r0, r7, #20
 8009922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	bc80      	pop	{r7}
 8009950:	b004      	add	sp, #16
 8009952:	4770      	bx	lr

08009954 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009954:	b480      	push	{r7}
 8009956:	b09d      	sub	sp, #116	; 0x74
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	b29b      	uxth	r3, r3
 8009972:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800997a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	78db      	ldrb	r3, [r3, #3]
 8009982:	2b03      	cmp	r3, #3
 8009984:	d81f      	bhi.n	80099c6 <USB_ActivateEndpoint+0x72>
 8009986:	a201      	add	r2, pc, #4	; (adr r2, 800998c <USB_ActivateEndpoint+0x38>)
 8009988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998c:	0800999d 	.word	0x0800999d
 8009990:	080099b9 	.word	0x080099b9
 8009994:	080099cf 	.word	0x080099cf
 8009998:	080099ab 	.word	0x080099ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800999c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80099a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80099a8:	e012      	b.n	80099d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80099aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80099ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80099b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80099b6:	e00b      	b.n	80099d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80099b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80099bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80099c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80099c4:	e004      	b.n	80099d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80099cc:	e000      	b.n	80099d0 <USB_ActivateEndpoint+0x7c>
      break;
 80099ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	441a      	add	r2, r3
 80099da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80099de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	881b      	ldrh	r3, [r3, #0]
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	4313      	orrs	r3, r2
 8009a12:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	441a      	add	r2, r3
 8009a20:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	7b1b      	ldrb	r3, [r3, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f040 8178 	bne.w	8009d32 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 8084 	beq.w	8009b54 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	61bb      	str	r3, [r7, #24]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	461a      	mov	r2, r3
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	61bb      	str	r3, [r7, #24]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	011a      	lsls	r2, r3, #4
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a6e:	617b      	str	r3, [r7, #20]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	88db      	ldrh	r3, [r3, #6]
 8009a74:	085b      	lsrs	r3, r3, #1
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	881b      	ldrh	r3, [r3, #0]
 8009a8c:	827b      	strh	r3, [r7, #18]
 8009a8e:	8a7b      	ldrh	r3, [r7, #18]
 8009a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d01b      	beq.n	8009ad0 <USB_ActivateEndpoint+0x17c>
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aae:	823b      	strh	r3, [r7, #16]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	441a      	add	r2, r3
 8009aba:	8a3b      	ldrh	r3, [r7, #16]
 8009abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ac8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	78db      	ldrb	r3, [r3, #3]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d020      	beq.n	8009b1a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009aee:	81bb      	strh	r3, [r7, #12]
 8009af0:	89bb      	ldrh	r3, [r7, #12]
 8009af2:	f083 0320 	eor.w	r3, r3, #32
 8009af6:	81bb      	strh	r3, [r7, #12]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	441a      	add	r2, r3
 8009b02:	89bb      	ldrh	r3, [r7, #12]
 8009b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	8013      	strh	r3, [r2, #0]
 8009b18:	e2d5      	b.n	800a0c6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	4413      	add	r3, r2
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b30:	81fb      	strh	r3, [r7, #14]
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	441a      	add	r2, r3
 8009b3c:	89fb      	ldrh	r3, [r7, #14]
 8009b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	8013      	strh	r3, [r2, #0]
 8009b52:	e2b8      	b.n	800a0c6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	633b      	str	r3, [r7, #48]	; 0x30
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	461a      	mov	r2, r3
 8009b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b64:	4413      	add	r3, r2
 8009b66:	633b      	str	r3, [r7, #48]	; 0x30
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	011a      	lsls	r2, r3, #4
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	88db      	ldrh	r3, [r3, #6]
 8009b7c:	085b      	lsrs	r3, r3, #1
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	005b      	lsls	r3, r3, #1
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b86:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	461a      	mov	r2, r3
 8009b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b98:	4413      	add	r3, r2
 8009b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	011a      	lsls	r2, r3, #4
 8009ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009baa:	627b      	str	r3, [r7, #36]	; 0x24
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	801a      	strh	r2, [r3, #0]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	2b3e      	cmp	r3, #62	; 0x3e
 8009bc2:	d91d      	bls.n	8009c00 <USB_ActivateEndpoint+0x2ac>
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	095b      	lsrs	r3, r3, #5
 8009bca:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	f003 031f 	and.w	r3, r3, #31
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d102      	bne.n	8009bde <USB_ActivateEndpoint+0x28a>
 8009bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	881b      	ldrh	r3, [r3, #0]
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	029b      	lsls	r3, r3, #10
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	4313      	orrs	r3, r2
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	801a      	strh	r2, [r3, #0]
 8009bfe:	e026      	b.n	8009c4e <USB_ActivateEndpoint+0x2fa>
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d10a      	bne.n	8009c1e <USB_ActivateEndpoint+0x2ca>
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	881b      	ldrh	r3, [r3, #0]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	801a      	strh	r2, [r3, #0]
 8009c1c:	e017      	b.n	8009c4e <USB_ActivateEndpoint+0x2fa>
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	085b      	lsrs	r3, r3, #1
 8009c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d002      	beq.n	8009c38 <USB_ActivateEndpoint+0x2e4>
 8009c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c34:	3301      	adds	r3, #1
 8009c36:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	029b      	lsls	r3, r3, #10
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	4313      	orrs	r3, r2
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	881b      	ldrh	r3, [r3, #0]
 8009c5a:	847b      	strh	r3, [r7, #34]	; 0x22
 8009c5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d01b      	beq.n	8009c9e <USB_ActivateEndpoint+0x34a>
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	4413      	add	r3, r2
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c7c:	843b      	strh	r3, [r7, #32]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	441a      	add	r2, r3
 8009c88:	8c3b      	ldrh	r3, [r7, #32]
 8009c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d124      	bne.n	8009cf0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	881b      	ldrh	r3, [r3, #0]
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cbc:	83bb      	strh	r3, [r7, #28]
 8009cbe:	8bbb      	ldrh	r3, [r7, #28]
 8009cc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009cc4:	83bb      	strh	r3, [r7, #28]
 8009cc6:	8bbb      	ldrh	r3, [r7, #28]
 8009cc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ccc:	83bb      	strh	r3, [r7, #28]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	441a      	add	r2, r3
 8009cd8:	8bbb      	ldrh	r3, [r7, #28]
 8009cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	8013      	strh	r3, [r2, #0]
 8009cee:	e1ea      	b.n	800a0c6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d06:	83fb      	strh	r3, [r7, #30]
 8009d08:	8bfb      	ldrh	r3, [r7, #30]
 8009d0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009d0e:	83fb      	strh	r3, [r7, #30]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	441a      	add	r2, r3
 8009d1a:	8bfb      	ldrh	r3, [r7, #30]
 8009d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	8013      	strh	r3, [r2, #0]
 8009d30:	e1c9      	b.n	800a0c6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	78db      	ldrb	r3, [r3, #3]
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d11e      	bne.n	8009d78 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d50:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	441a      	add	r2, r3
 8009d5e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d6a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	8013      	strh	r3, [r2, #0]
 8009d76:	e01d      	b.n	8009db4 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	4413      	add	r3, r2
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d8e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	441a      	add	r2, r3
 8009d9c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dc4:	4413      	add	r3, r2
 8009dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	011a      	lsls	r2, r3, #4
 8009dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	891b      	ldrh	r3, [r3, #8]
 8009ddc:	085b      	lsrs	r3, r3, #1
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009de6:	801a      	strh	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	657b      	str	r3, [r7, #84]	; 0x54
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	461a      	mov	r2, r3
 8009df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009df8:	4413      	add	r3, r2
 8009dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	011a      	lsls	r2, r3, #4
 8009e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e04:	4413      	add	r3, r2
 8009e06:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009e0a:	653b      	str	r3, [r7, #80]	; 0x50
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	895b      	ldrh	r3, [r3, #10]
 8009e10:	085b      	lsrs	r3, r3, #1
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	005b      	lsls	r3, r3, #1
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e1a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	785b      	ldrb	r3, [r3, #1]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f040 8093 	bne.w	8009f4c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009e36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d01b      	beq.n	8009e7a <USB_ActivateEndpoint+0x526>
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	4413      	add	r3, r2
 8009e4c:	881b      	ldrh	r3, [r3, #0]
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e58:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	441a      	add	r2, r3
 8009e64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4413      	add	r3, r2
 8009e84:	881b      	ldrh	r3, [r3, #0]
 8009e86:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009e88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d01b      	beq.n	8009eca <USB_ActivateEndpoint+0x576>
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4413      	add	r3, r2
 8009e9c:	881b      	ldrh	r3, [r3, #0]
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	441a      	add	r2, r3
 8009eb4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ec2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee0:	873b      	strh	r3, [r7, #56]	; 0x38
 8009ee2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009ee4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ee8:	873b      	strh	r3, [r7, #56]	; 0x38
 8009eea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009eec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ef0:	873b      	strh	r3, [r7, #56]	; 0x38
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	441a      	add	r2, r3
 8009efc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	4413      	add	r3, r2
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f28:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	441a      	add	r2, r3
 8009f34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	8013      	strh	r3, [r2, #0]
 8009f4a:	e0bc      	b.n	800a0c6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4413      	add	r3, r2
 8009f56:	881b      	ldrh	r3, [r3, #0]
 8009f58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009f5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d01d      	beq.n	8009fa4 <USB_ActivateEndpoint+0x650>
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f7e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	441a      	add	r2, r3
 8009f8c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	4413      	add	r3, r2
 8009fae:	881b      	ldrh	r3, [r3, #0]
 8009fb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009fb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d01d      	beq.n	8009ffc <USB_ActivateEndpoint+0x6a8>
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	881b      	ldrh	r3, [r3, #0]
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fd6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	441a      	add	r2, r3
 8009fe4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ff4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	78db      	ldrb	r3, [r3, #3]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d024      	beq.n	800a04e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	881b      	ldrh	r3, [r3, #0]
 800a010:	b29b      	uxth	r3, r3
 800a012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a01a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a01e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a022:	f083 0320 	eor.w	r3, r3, #32
 800a026:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	441a      	add	r2, r3
 800a034:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a03c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a048:	b29b      	uxth	r3, r3
 800a04a:	8013      	strh	r3, [r2, #0]
 800a04c:	e01d      	b.n	800a08a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a064:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	441a      	add	r2, r3
 800a072:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a07a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a07e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a086:	b29b      	uxth	r3, r3
 800a088:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	881b      	ldrh	r3, [r3, #0]
 800a096:	b29b      	uxth	r3, r3
 800a098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a09c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	441a      	add	r2, r3
 800a0ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a0b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a0c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3774      	adds	r7, #116	; 0x74
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bc80      	pop	{r7}
 800a0d2:	4770      	bx	lr

0800a0d4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b08d      	sub	sp, #52	; 0x34
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	7b1b      	ldrb	r3, [r3, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f040 808e 	bne.w	800a204 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	785b      	ldrb	r3, [r3, #1]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d044      	beq.n	800a17a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4413      	add	r3, r2
 800a0fa:	881b      	ldrh	r3, [r3, #0]
 800a0fc:	81bb      	strh	r3, [r7, #12]
 800a0fe:	89bb      	ldrh	r3, [r7, #12]
 800a100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a104:	2b00      	cmp	r3, #0
 800a106:	d01b      	beq.n	800a140 <USB_DeactivateEndpoint+0x6c>
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	b29b      	uxth	r3, r3
 800a116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a11e:	817b      	strh	r3, [r7, #10]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	441a      	add	r2, r3
 800a12a:	897b      	ldrh	r3, [r7, #10]
 800a12c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a138:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a156:	813b      	strh	r3, [r7, #8]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	441a      	add	r2, r3
 800a162:	893b      	ldrh	r3, [r7, #8]
 800a164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a16c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a174:	b29b      	uxth	r3, r3
 800a176:	8013      	strh	r3, [r2, #0]
 800a178:	e192      	b.n	800a4a0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	4413      	add	r3, r2
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	827b      	strh	r3, [r7, #18]
 800a188:	8a7b      	ldrh	r3, [r7, #18]
 800a18a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d01b      	beq.n	800a1ca <USB_DeactivateEndpoint+0xf6>
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1a8:	823b      	strh	r3, [r7, #16]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	441a      	add	r2, r3
 800a1b4:	8a3b      	ldrh	r3, [r7, #16]
 800a1b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	881b      	ldrh	r3, [r3, #0]
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1e0:	81fb      	strh	r3, [r7, #14]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	441a      	add	r2, r3
 800a1ec:	89fb      	ldrh	r3, [r7, #14]
 800a1ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	8013      	strh	r3, [r2, #0]
 800a202:	e14d      	b.n	800a4a0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	785b      	ldrb	r3, [r3, #1]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f040 80a5 	bne.w	800a358 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	881b      	ldrh	r3, [r3, #0]
 800a21a:	843b      	strh	r3, [r7, #32]
 800a21c:	8c3b      	ldrh	r3, [r7, #32]
 800a21e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a222:	2b00      	cmp	r3, #0
 800a224:	d01b      	beq.n	800a25e <USB_DeactivateEndpoint+0x18a>
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	881b      	ldrh	r3, [r3, #0]
 800a232:	b29b      	uxth	r3, r3
 800a234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a23c:	83fb      	strh	r3, [r7, #30]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	441a      	add	r2, r3
 800a248:	8bfb      	ldrh	r3, [r7, #30]
 800a24a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a24e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a252:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	881b      	ldrh	r3, [r3, #0]
 800a26a:	83bb      	strh	r3, [r7, #28]
 800a26c:	8bbb      	ldrh	r3, [r7, #28]
 800a26e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01b      	beq.n	800a2ae <USB_DeactivateEndpoint+0x1da>
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4413      	add	r3, r2
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	b29b      	uxth	r3, r3
 800a284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a28c:	837b      	strh	r3, [r7, #26]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	441a      	add	r2, r3
 800a298:	8b7b      	ldrh	r3, [r7, #26]
 800a29a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a29e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	881b      	ldrh	r3, [r3, #0]
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2c4:	833b      	strh	r3, [r7, #24]
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	441a      	add	r2, r3
 800a2d0:	8b3b      	ldrh	r3, [r7, #24]
 800a2d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2fc:	82fb      	strh	r3, [r7, #22]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	441a      	add	r2, r3
 800a308:	8afb      	ldrh	r3, [r7, #22]
 800a30a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a30e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a334:	82bb      	strh	r3, [r7, #20]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	441a      	add	r2, r3
 800a340:	8abb      	ldrh	r3, [r7, #20]
 800a342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a34a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a34e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a352:	b29b      	uxth	r3, r3
 800a354:	8013      	strh	r3, [r2, #0]
 800a356:	e0a3      	b.n	800a4a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	881b      	ldrh	r3, [r3, #0]
 800a364:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a366:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d01b      	beq.n	800a3a8 <USB_DeactivateEndpoint+0x2d4>
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4413      	add	r3, r2
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a386:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	441a      	add	r2, r3
 800a392:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a39c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a3a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a3b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d01b      	beq.n	800a3f8 <USB_DeactivateEndpoint+0x324>
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	881b      	ldrh	r3, [r3, #0]
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3d6:	853b      	strh	r3, [r7, #40]	; 0x28
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	441a      	add	r2, r3
 800a3e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a3e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4413      	add	r3, r2
 800a402:	881b      	ldrh	r3, [r3, #0]
 800a404:	b29b      	uxth	r3, r3
 800a406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a40a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a40e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	441a      	add	r2, r3
 800a41a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a41c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a424:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	881b      	ldrh	r3, [r3, #0]
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a446:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	441a      	add	r2, r3
 800a452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a45c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a464:	b29b      	uxth	r3, r3
 800a466:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	4413      	add	r3, r2
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	b29b      	uxth	r3, r3
 800a476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a47a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a47e:	847b      	strh	r3, [r7, #34]	; 0x22
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	441a      	add	r2, r3
 800a48a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a48c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3734      	adds	r7, #52	; 0x34
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bc80      	pop	{r7}
 800a4aa:	4770      	bx	lr

0800a4ac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b0c2      	sub	sp, #264	; 0x108
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4ba:	6018      	str	r0, [r3, #0]
 800a4bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a4c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	785b      	ldrb	r3, [r3, #1]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	f040 86b7 	bne.w	800b246 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a4d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	699a      	ldr	r2, [r3, #24]
 800a4e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d908      	bls.n	800a506 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a4f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a504:	e007      	b.n	800a516 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a50a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a51a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	7b1b      	ldrb	r3, [r3, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d13a      	bne.n	800a59c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6959      	ldr	r1, [r3, #20]
 800a532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	88da      	ldrh	r2, [r3, #6]
 800a53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a542:	b29b      	uxth	r3, r3
 800a544:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a548:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a54c:	6800      	ldr	r0, [r0, #0]
 800a54e:	f001 fc9c 	bl	800be8a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	613b      	str	r3, [r7, #16]
 800a55e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	461a      	mov	r2, r3
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	4413      	add	r3, r2
 800a574:	613b      	str	r3, [r7, #16]
 800a576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a57a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	011a      	lsls	r2, r3, #4
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	4413      	add	r3, r2
 800a588:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a58c:	60fb      	str	r3, [r7, #12]
 800a58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a592:	b29a      	uxth	r2, r3
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	801a      	strh	r2, [r3, #0]
 800a598:	f000 be1f 	b.w	800b1da <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a59c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	78db      	ldrb	r3, [r3, #3]
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	f040 8462 	bne.w	800ae72 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a5ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6a1a      	ldr	r2, [r3, #32]
 800a5ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	f240 83df 	bls.w	800ad8a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a5cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	4413      	add	r3, r2
 800a5e6:	881b      	ldrh	r3, [r3, #0]
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5f2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	441a      	add	r2, r3
 800a610:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a61c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a624:	b29b      	uxth	r3, r3
 800a626:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a62c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	6a1a      	ldr	r2, [r3, #32]
 800a634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a638:	1ad2      	subs	r2, r2, r3
 800a63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a64a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4413      	add	r3, r2
 800a660:	881b      	ldrh	r3, [r3, #0]
 800a662:	b29b      	uxth	r3, r3
 800a664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 81c7 	beq.w	800a9fc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a66e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a672:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	633b      	str	r3, [r7, #48]	; 0x30
 800a67a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a67e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	785b      	ldrb	r3, [r3, #1]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d177      	bne.n	800a77a <USB_EPStartXfer+0x2ce>
 800a68a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a68e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	62bb      	str	r3, [r7, #40]	; 0x28
 800a696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a69a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6aa:	4413      	add	r3, r2
 800a6ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	011a      	lsls	r2, r3, #4
 800a6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6be:	4413      	add	r3, r2
 800a6c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a6c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c8:	881b      	ldrh	r3, [r3, #0]
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d4:	801a      	strh	r2, [r3, #0]
 800a6d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6da:	2b3e      	cmp	r3, #62	; 0x3e
 800a6dc:	d921      	bls.n	800a722 <USB_EPStartXfer+0x276>
 800a6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e2:	095b      	lsrs	r3, r3, #5
 800a6e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ec:	f003 031f 	and.w	r3, r3, #31
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d104      	bne.n	800a6fe <USB_EPStartXfer+0x252>
 800a6f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	b29a      	uxth	r2, r3
 800a704:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a708:	b29b      	uxth	r3, r3
 800a70a:	029b      	lsls	r3, r3, #10
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	4313      	orrs	r3, r2
 800a710:	b29b      	uxth	r3, r3
 800a712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71e:	801a      	strh	r2, [r3, #0]
 800a720:	e050      	b.n	800a7c4 <USB_EPStartXfer+0x318>
 800a722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10a      	bne.n	800a740 <USB_EPStartXfer+0x294>
 800a72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	b29b      	uxth	r3, r3
 800a730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a738:	b29a      	uxth	r2, r3
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	801a      	strh	r2, [r3, #0]
 800a73e:	e041      	b.n	800a7c4 <USB_EPStartXfer+0x318>
 800a740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a744:	085b      	lsrs	r3, r3, #1
 800a746:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	d004      	beq.n	800a760 <USB_EPStartXfer+0x2b4>
 800a756:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a75a:	3301      	adds	r3, #1
 800a75c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a762:	881b      	ldrh	r3, [r3, #0]
 800a764:	b29a      	uxth	r2, r3
 800a766:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	029b      	lsls	r3, r3, #10
 800a76e:	b29b      	uxth	r3, r3
 800a770:	4313      	orrs	r3, r2
 800a772:	b29a      	uxth	r2, r3
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	801a      	strh	r2, [r3, #0]
 800a778:	e024      	b.n	800a7c4 <USB_EPStartXfer+0x318>
 800a77a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a77e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	785b      	ldrb	r3, [r3, #1]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d11c      	bne.n	800a7c4 <USB_EPStartXfer+0x318>
 800a78a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a78e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a798:	b29b      	uxth	r3, r3
 800a79a:	461a      	mov	r2, r3
 800a79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79e:	4413      	add	r3, r2
 800a7a0:	633b      	str	r3, [r7, #48]	; 0x30
 800a7a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	011a      	lsls	r2, r3, #4
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b2:	4413      	add	r3, r2
 800a7b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7be:	b29a      	uxth	r2, r3
 800a7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a7c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	895b      	ldrh	r3, [r3, #10]
 800a7d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	6959      	ldr	r1, [r3, #20]
 800a7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a7ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a7ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a7f2:	6800      	ldr	r0, [r0, #0]
 800a7f4:	f001 fb49 	bl	800be8a <USB_WritePMA>
            ep->xfer_buff += len;
 800a7f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	695a      	ldr	r2, [r3, #20]
 800a804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a808:	441a      	add	r2, r3
 800a80a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a80e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a81a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	6a1a      	ldr	r2, [r3, #32]
 800a822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d90f      	bls.n	800a852 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	6a1a      	ldr	r2, [r3, #32]
 800a83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a842:	1ad2      	subs	r2, r2, r3
 800a844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	621a      	str	r2, [r3, #32]
 800a850:	e00e      	b.n	800a870 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6a1b      	ldr	r3, [r3, #32]
 800a85e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2200      	movs	r2, #0
 800a86e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	785b      	ldrb	r3, [r3, #1]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d177      	bne.n	800a970 <USB_EPStartXfer+0x4c4>
 800a880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	61bb      	str	r3, [r7, #24]
 800a88c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a890:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	461a      	mov	r2, r3
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	61bb      	str	r3, [r7, #24]
 800a8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	011a      	lsls	r2, r3, #4
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a8ba:	617b      	str	r3, [r7, #20]
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	801a      	strh	r2, [r3, #0]
 800a8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d0:	2b3e      	cmp	r3, #62	; 0x3e
 800a8d2:	d921      	bls.n	800a918 <USB_EPStartXfer+0x46c>
 800a8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d8:	095b      	lsrs	r3, r3, #5
 800a8da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a8de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e2:	f003 031f 	and.w	r3, r3, #31
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d104      	bne.n	800a8f4 <USB_EPStartXfer+0x448>
 800a8ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	029b      	lsls	r3, r3, #10
 800a902:	b29b      	uxth	r3, r3
 800a904:	4313      	orrs	r3, r2
 800a906:	b29b      	uxth	r3, r3
 800a908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a90c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a910:	b29a      	uxth	r2, r3
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	801a      	strh	r2, [r3, #0]
 800a916:	e056      	b.n	800a9c6 <USB_EPStartXfer+0x51a>
 800a918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10a      	bne.n	800a936 <USB_EPStartXfer+0x48a>
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	b29b      	uxth	r3, r3
 800a926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a92a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a92e:	b29a      	uxth	r2, r3
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	801a      	strh	r2, [r3, #0]
 800a934:	e047      	b.n	800a9c6 <USB_EPStartXfer+0x51a>
 800a936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a93a:	085b      	lsrs	r3, r3, #1
 800a93c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a944:	f003 0301 	and.w	r3, r3, #1
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d004      	beq.n	800a956 <USB_EPStartXfer+0x4aa>
 800a94c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a950:	3301      	adds	r3, #1
 800a952:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	881b      	ldrh	r3, [r3, #0]
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a960:	b29b      	uxth	r3, r3
 800a962:	029b      	lsls	r3, r3, #10
 800a964:	b29b      	uxth	r3, r3
 800a966:	4313      	orrs	r3, r2
 800a968:	b29a      	uxth	r2, r3
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	801a      	strh	r2, [r3, #0]
 800a96e:	e02a      	b.n	800a9c6 <USB_EPStartXfer+0x51a>
 800a970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	785b      	ldrb	r3, [r3, #1]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d122      	bne.n	800a9c6 <USB_EPStartXfer+0x51a>
 800a980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	623b      	str	r3, [r7, #32]
 800a98c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a990:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	461a      	mov	r2, r3
 800a99e:	6a3b      	ldr	r3, [r7, #32]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	623b      	str	r3, [r7, #32]
 800a9a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	011a      	lsls	r2, r3, #4
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a9ba:	61fb      	str	r3, [r7, #28]
 800a9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a9c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	891b      	ldrh	r3, [r3, #8]
 800a9d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6959      	ldr	r1, [r3, #20]
 800a9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a9ec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a9f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a9f4:	6800      	ldr	r0, [r0, #0]
 800a9f6:	f001 fa48 	bl	800be8a <USB_WritePMA>
 800a9fa:	e3ee      	b.n	800b1da <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a9fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	785b      	ldrb	r3, [r3, #1]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d177      	bne.n	800aafc <USB_EPStartXfer+0x650>
 800aa0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	461a      	mov	r2, r3
 800aa2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa2c:	4413      	add	r3, r2
 800aa2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	011a      	lsls	r2, r3, #4
 800aa3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa40:	4413      	add	r3, r2
 800aa42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aa46:	647b      	str	r3, [r7, #68]	; 0x44
 800aa48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa4a:	881b      	ldrh	r3, [r3, #0]
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa56:	801a      	strh	r2, [r3, #0]
 800aa58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa5c:	2b3e      	cmp	r3, #62	; 0x3e
 800aa5e:	d921      	bls.n	800aaa4 <USB_EPStartXfer+0x5f8>
 800aa60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa64:	095b      	lsrs	r3, r3, #5
 800aa66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa6e:	f003 031f 	and.w	r3, r3, #31
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d104      	bne.n	800aa80 <USB_EPStartXfer+0x5d4>
 800aa76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	029b      	lsls	r3, r3, #10
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	4313      	orrs	r3, r2
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa9c:	b29a      	uxth	r2, r3
 800aa9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaa0:	801a      	strh	r2, [r3, #0]
 800aaa2:	e056      	b.n	800ab52 <USB_EPStartXfer+0x6a6>
 800aaa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d10a      	bne.n	800aac2 <USB_EPStartXfer+0x616>
 800aaac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaae:	881b      	ldrh	r3, [r3, #0]
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aabe:	801a      	strh	r2, [r3, #0]
 800aac0:	e047      	b.n	800ab52 <USB_EPStartXfer+0x6a6>
 800aac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac6:	085b      	lsrs	r3, r3, #1
 800aac8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad0:	f003 0301 	and.w	r3, r3, #1
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d004      	beq.n	800aae2 <USB_EPStartXfer+0x636>
 800aad8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aadc:	3301      	adds	r3, #1
 800aade:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aae4:	881b      	ldrh	r3, [r3, #0]
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	029b      	lsls	r3, r3, #10
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaf8:	801a      	strh	r2, [r3, #0]
 800aafa:	e02a      	b.n	800ab52 <USB_EPStartXfer+0x6a6>
 800aafc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	785b      	ldrb	r3, [r3, #1]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d122      	bne.n	800ab52 <USB_EPStartXfer+0x6a6>
 800ab0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	653b      	str	r3, [r7, #80]	; 0x50
 800ab18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	461a      	mov	r2, r3
 800ab2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab2c:	4413      	add	r3, r2
 800ab2e:	653b      	str	r3, [r7, #80]	; 0x50
 800ab30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	011a      	lsls	r2, r3, #4
 800ab3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab40:	4413      	add	r3, r2
 800ab42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ab46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ab52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	891b      	ldrh	r3, [r3, #8]
 800ab5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6959      	ldr	r1, [r3, #20]
 800ab6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ab78:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ab7c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ab80:	6800      	ldr	r0, [r0, #0]
 800ab82:	f001 f982 	bl	800be8a <USB_WritePMA>
            ep->xfer_buff += len;
 800ab86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	695a      	ldr	r2, [r3, #20]
 800ab92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab96:	441a      	add	r2, r3
 800ab98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800aba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6a1a      	ldr	r2, [r3, #32]
 800abb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d90f      	bls.n	800abe0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800abc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	6a1a      	ldr	r2, [r3, #32]
 800abcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd0:	1ad2      	subs	r2, r2, r3
 800abd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	621a      	str	r2, [r3, #32]
 800abde:	e00e      	b.n	800abfe <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800abe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	6a1b      	ldr	r3, [r3, #32]
 800abec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800abf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2200      	movs	r2, #0
 800abfc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800abfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	643b      	str	r3, [r7, #64]	; 0x40
 800ac0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	785b      	ldrb	r3, [r3, #1]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d177      	bne.n	800ad0a <USB_EPStartXfer+0x85e>
 800ac1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	461a      	mov	r2, r3
 800ac38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3a:	4413      	add	r3, r2
 800ac3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	011a      	lsls	r2, r3, #4
 800ac4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4e:	4413      	add	r3, r2
 800ac50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ac54:	637b      	str	r3, [r7, #52]	; 0x34
 800ac56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac58:	881b      	ldrh	r3, [r3, #0]
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac64:	801a      	strh	r2, [r3, #0]
 800ac66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac6a:	2b3e      	cmp	r3, #62	; 0x3e
 800ac6c:	d921      	bls.n	800acb2 <USB_EPStartXfer+0x806>
 800ac6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac72:	095b      	lsrs	r3, r3, #5
 800ac74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac7c:	f003 031f 	and.w	r3, r3, #31
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d104      	bne.n	800ac8e <USB_EPStartXfer+0x7e2>
 800ac84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	029b      	lsls	r3, r3, #10
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acaa:	b29a      	uxth	r2, r3
 800acac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acae:	801a      	strh	r2, [r3, #0]
 800acb0:	e050      	b.n	800ad54 <USB_EPStartXfer+0x8a8>
 800acb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10a      	bne.n	800acd0 <USB_EPStartXfer+0x824>
 800acba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acc8:	b29a      	uxth	r2, r3
 800acca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800accc:	801a      	strh	r2, [r3, #0]
 800acce:	e041      	b.n	800ad54 <USB_EPStartXfer+0x8a8>
 800acd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd4:	085b      	lsrs	r3, r3, #1
 800acd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800acda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d004      	beq.n	800acf0 <USB_EPStartXfer+0x844>
 800ace6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acea:	3301      	adds	r3, #1
 800acec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800acf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf2:	881b      	ldrh	r3, [r3, #0]
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	029b      	lsls	r3, r3, #10
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	4313      	orrs	r3, r2
 800ad02:	b29a      	uxth	r2, r3
 800ad04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad06:	801a      	strh	r2, [r3, #0]
 800ad08:	e024      	b.n	800ad54 <USB_EPStartXfer+0x8a8>
 800ad0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	785b      	ldrb	r3, [r3, #1]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d11c      	bne.n	800ad54 <USB_EPStartXfer+0x8a8>
 800ad1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad2e:	4413      	add	r3, r2
 800ad30:	643b      	str	r3, [r7, #64]	; 0x40
 800ad32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	011a      	lsls	r2, r3, #4
 800ad40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad42:	4413      	add	r3, r2
 800ad44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ad48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ad54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	895b      	ldrh	r3, [r3, #10]
 800ad60:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	6959      	ldr	r1, [r3, #20]
 800ad70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ad7a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ad7e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ad82:	6800      	ldr	r0, [r0, #0]
 800ad84:	f001 f881 	bl	800be8a <USB_WritePMA>
 800ad88:	e227      	b.n	800b1da <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ad8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	6a1b      	ldr	r3, [r3, #32]
 800ad96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ad9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4413      	add	r3, r2
 800adb4:	881b      	ldrh	r3, [r3, #0]
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800adbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adc0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800adc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	441a      	add	r2, r3
 800adde:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ade2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ade6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800adf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	461a      	mov	r2, r3
 800ae14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae16:	4413      	add	r3, r2
 800ae18:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	011a      	lsls	r2, r3, #4
 800ae28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ae30:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ae3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	891b      	ldrh	r3, [r3, #8]
 800ae48:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6959      	ldr	r1, [r3, #20]
 800ae58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ae62:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ae66:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ae6a:	6800      	ldr	r0, [r0, #0]
 800ae6c:	f001 f80d 	bl	800be8a <USB_WritePMA>
 800ae70:	e1b3      	b.n	800b1da <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ae72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	6a1a      	ldr	r2, [r3, #32]
 800ae7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae82:	1ad2      	subs	r2, r2, r3
 800ae84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ae90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	4413      	add	r3, r2
 800aeaa:	881b      	ldrh	r3, [r3, #0]
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f000 80c6 	beq.w	800b044 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aeb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aebc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	673b      	str	r3, [r7, #112]	; 0x70
 800aec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	785b      	ldrb	r3, [r3, #1]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d177      	bne.n	800afc4 <USB_EPStartXfer+0xb18>
 800aed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	66bb      	str	r3, [r7, #104]	; 0x68
 800aee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	461a      	mov	r2, r3
 800aef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aef4:	4413      	add	r3, r2
 800aef6:	66bb      	str	r3, [r7, #104]	; 0x68
 800aef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aefc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	011a      	lsls	r2, r3, #4
 800af06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af08:	4413      	add	r3, r2
 800af0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800af0e:	667b      	str	r3, [r7, #100]	; 0x64
 800af10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af12:	881b      	ldrh	r3, [r3, #0]
 800af14:	b29b      	uxth	r3, r3
 800af16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af1e:	801a      	strh	r2, [r3, #0]
 800af20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af24:	2b3e      	cmp	r3, #62	; 0x3e
 800af26:	d921      	bls.n	800af6c <USB_EPStartXfer+0xac0>
 800af28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af2c:	095b      	lsrs	r3, r3, #5
 800af2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800af32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af36:	f003 031f 	and.w	r3, r3, #31
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d104      	bne.n	800af48 <USB_EPStartXfer+0xa9c>
 800af3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800af42:	3b01      	subs	r3, #1
 800af44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800af48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af4a:	881b      	ldrh	r3, [r3, #0]
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800af52:	b29b      	uxth	r3, r3
 800af54:	029b      	lsls	r3, r3, #10
 800af56:	b29b      	uxth	r3, r3
 800af58:	4313      	orrs	r3, r2
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af64:	b29a      	uxth	r2, r3
 800af66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af68:	801a      	strh	r2, [r3, #0]
 800af6a:	e050      	b.n	800b00e <USB_EPStartXfer+0xb62>
 800af6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10a      	bne.n	800af8a <USB_EPStartXfer+0xade>
 800af74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af76:	881b      	ldrh	r3, [r3, #0]
 800af78:	b29b      	uxth	r3, r3
 800af7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af82:	b29a      	uxth	r2, r3
 800af84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af86:	801a      	strh	r2, [r3, #0]
 800af88:	e041      	b.n	800b00e <USB_EPStartXfer+0xb62>
 800af8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af8e:	085b      	lsrs	r3, r3, #1
 800af90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800af94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af98:	f003 0301 	and.w	r3, r3, #1
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d004      	beq.n	800afaa <USB_EPStartXfer+0xafe>
 800afa0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800afa4:	3301      	adds	r3, #1
 800afa6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800afaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afac:	881b      	ldrh	r3, [r3, #0]
 800afae:	b29a      	uxth	r2, r3
 800afb0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	029b      	lsls	r3, r3, #10
 800afb8:	b29b      	uxth	r3, r3
 800afba:	4313      	orrs	r3, r2
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afc0:	801a      	strh	r2, [r3, #0]
 800afc2:	e024      	b.n	800b00e <USB_EPStartXfer+0xb62>
 800afc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	785b      	ldrb	r3, [r3, #1]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d11c      	bne.n	800b00e <USB_EPStartXfer+0xb62>
 800afd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	461a      	mov	r2, r3
 800afe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800afe8:	4413      	add	r3, r2
 800afea:	673b      	str	r3, [r7, #112]	; 0x70
 800afec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	011a      	lsls	r2, r3, #4
 800affa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800affc:	4413      	add	r3, r2
 800affe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b002:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b008:	b29a      	uxth	r2, r3
 800b00a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b00c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b00e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	895b      	ldrh	r3, [r3, #10]
 800b01a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b01e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	6959      	ldr	r1, [r3, #20]
 800b02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b02e:	b29b      	uxth	r3, r3
 800b030:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b034:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b038:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b03c:	6800      	ldr	r0, [r0, #0]
 800b03e:	f000 ff24 	bl	800be8a <USB_WritePMA>
 800b042:	e0ca      	b.n	800b1da <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	785b      	ldrb	r3, [r3, #1]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d177      	bne.n	800b144 <USB_EPStartXfer+0xc98>
 800b054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b058:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b064:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b06e:	b29b      	uxth	r3, r3
 800b070:	461a      	mov	r2, r3
 800b072:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b074:	4413      	add	r3, r2
 800b076:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b07c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	011a      	lsls	r2, r3, #4
 800b086:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b088:	4413      	add	r3, r2
 800b08a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b08e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b092:	881b      	ldrh	r3, [r3, #0]
 800b094:	b29b      	uxth	r3, r3
 800b096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b09a:	b29a      	uxth	r2, r3
 800b09c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b09e:	801a      	strh	r2, [r3, #0]
 800b0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a4:	2b3e      	cmp	r3, #62	; 0x3e
 800b0a6:	d921      	bls.n	800b0ec <USB_EPStartXfer+0xc40>
 800b0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ac:	095b      	lsrs	r3, r3, #5
 800b0ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b6:	f003 031f 	and.w	r3, r3, #31
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d104      	bne.n	800b0c8 <USB_EPStartXfer+0xc1c>
 800b0be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b0c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	029b      	lsls	r3, r3, #10
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0e8:	801a      	strh	r2, [r3, #0]
 800b0ea:	e05c      	b.n	800b1a6 <USB_EPStartXfer+0xcfa>
 800b0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10a      	bne.n	800b10a <USB_EPStartXfer+0xc5e>
 800b0f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0f6:	881b      	ldrh	r3, [r3, #0]
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b102:	b29a      	uxth	r2, r3
 800b104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b106:	801a      	strh	r2, [r3, #0]
 800b108:	e04d      	b.n	800b1a6 <USB_EPStartXfer+0xcfa>
 800b10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b10e:	085b      	lsrs	r3, r3, #1
 800b110:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b118:	f003 0301 	and.w	r3, r3, #1
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d004      	beq.n	800b12a <USB_EPStartXfer+0xc7e>
 800b120:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b124:	3301      	adds	r3, #1
 800b126:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b12a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	b29a      	uxth	r2, r3
 800b130:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b134:	b29b      	uxth	r3, r3
 800b136:	029b      	lsls	r3, r3, #10
 800b138:	b29b      	uxth	r3, r3
 800b13a:	4313      	orrs	r3, r2
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b140:	801a      	strh	r2, [r3, #0]
 800b142:	e030      	b.n	800b1a6 <USB_EPStartXfer+0xcfa>
 800b144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	785b      	ldrb	r3, [r3, #1]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d128      	bne.n	800b1a6 <USB_EPStartXfer+0xcfa>
 800b154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b170:	b29b      	uxth	r3, r3
 800b172:	461a      	mov	r2, r3
 800b174:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b178:	4413      	add	r3, r2
 800b17a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b17e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	011a      	lsls	r2, r3, #4
 800b18c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b190:	4413      	add	r3, r2
 800b192:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b196:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b19e:	b29a      	uxth	r2, r3
 800b1a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b1a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b1a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	891b      	ldrh	r3, [r3, #8]
 800b1b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	6959      	ldr	r1, [r3, #20]
 800b1c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b1cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b1d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b1d4:	6800      	ldr	r0, [r0, #0]
 800b1d6:	f000 fe58 	bl	800be8a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4413      	add	r3, r2
 800b1f4:	881b      	ldrh	r3, [r3, #0]
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b200:	817b      	strh	r3, [r7, #10]
 800b202:	897b      	ldrh	r3, [r7, #10]
 800b204:	f083 0310 	eor.w	r3, r3, #16
 800b208:	817b      	strh	r3, [r7, #10]
 800b20a:	897b      	ldrh	r3, [r7, #10]
 800b20c:	f083 0320 	eor.w	r3, r3, #32
 800b210:	817b      	strh	r3, [r7, #10]
 800b212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	441a      	add	r2, r3
 800b22c:	897b      	ldrh	r3, [r7, #10]
 800b22e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b23a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b23e:	b29b      	uxth	r3, r3
 800b240:	8013      	strh	r3, [r2, #0]
 800b242:	f000 bcde 	b.w	800bc02 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b24a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	7b1b      	ldrb	r3, [r3, #12]
 800b252:	2b00      	cmp	r3, #0
 800b254:	f040 80bb 	bne.w	800b3ce <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b25c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	699a      	ldr	r2, [r3, #24]
 800b264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	429a      	cmp	r2, r3
 800b272:	d917      	bls.n	800b2a4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	699a      	ldr	r2, [r3, #24]
 800b290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b294:	1ad2      	subs	r2, r2, r3
 800b296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b29a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	619a      	str	r2, [r3, #24]
 800b2a2:	e00e      	b.n	800b2c2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b2a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	699b      	ldr	r3, [r3, #24]
 800b2b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b2b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b2e6:	4413      	add	r3, r2
 800b2e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b2ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	011a      	lsls	r2, r3, #4
 800b2fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b2fe:	4413      	add	r3, r2
 800b300:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b304:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b30c:	881b      	ldrh	r3, [r3, #0]
 800b30e:	b29b      	uxth	r3, r3
 800b310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b314:	b29a      	uxth	r2, r3
 800b316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b31a:	801a      	strh	r2, [r3, #0]
 800b31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b320:	2b3e      	cmp	r3, #62	; 0x3e
 800b322:	d924      	bls.n	800b36e <USB_EPStartXfer+0xec2>
 800b324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b328:	095b      	lsrs	r3, r3, #5
 800b32a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b332:	f003 031f 	and.w	r3, r3, #31
 800b336:	2b00      	cmp	r3, #0
 800b338:	d104      	bne.n	800b344 <USB_EPStartXfer+0xe98>
 800b33a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b33e:	3b01      	subs	r3, #1
 800b340:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b348:	881b      	ldrh	r3, [r3, #0]
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b350:	b29b      	uxth	r3, r3
 800b352:	029b      	lsls	r3, r3, #10
 800b354:	b29b      	uxth	r3, r3
 800b356:	4313      	orrs	r3, r2
 800b358:	b29b      	uxth	r3, r3
 800b35a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b35e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b362:	b29a      	uxth	r2, r3
 800b364:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b368:	801a      	strh	r2, [r3, #0]
 800b36a:	f000 bc10 	b.w	800bb8e <USB_EPStartXfer+0x16e2>
 800b36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b372:	2b00      	cmp	r3, #0
 800b374:	d10c      	bne.n	800b390 <USB_EPStartXfer+0xee4>
 800b376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b37a:	881b      	ldrh	r3, [r3, #0]
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b386:	b29a      	uxth	r2, r3
 800b388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b38c:	801a      	strh	r2, [r3, #0]
 800b38e:	e3fe      	b.n	800bb8e <USB_EPStartXfer+0x16e2>
 800b390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b394:	085b      	lsrs	r3, r3, #1
 800b396:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b39e:	f003 0301 	and.w	r3, r3, #1
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d004      	beq.n	800b3b0 <USB_EPStartXfer+0xf04>
 800b3a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b3b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3b4:	881b      	ldrh	r3, [r3, #0]
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	029b      	lsls	r3, r3, #10
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3ca:	801a      	strh	r2, [r3, #0]
 800b3cc:	e3df      	b.n	800bb8e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b3ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	78db      	ldrb	r3, [r3, #3]
 800b3da:	2b02      	cmp	r3, #2
 800b3dc:	f040 8218 	bne.w	800b810 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b3e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	785b      	ldrb	r3, [r3, #1]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f040 809d 	bne.w	800b52c <USB_EPStartXfer+0x1080>
 800b3f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b40e:	b29b      	uxth	r3, r3
 800b410:	461a      	mov	r2, r3
 800b412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b416:	4413      	add	r3, r2
 800b418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b41c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	011a      	lsls	r2, r3, #4
 800b42a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b42e:	4413      	add	r3, r2
 800b430:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b43c:	881b      	ldrh	r3, [r3, #0]
 800b43e:	b29b      	uxth	r3, r3
 800b440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b444:	b29a      	uxth	r2, r3
 800b446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b44a:	801a      	strh	r2, [r3, #0]
 800b44c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	691b      	ldr	r3, [r3, #16]
 800b458:	2b3e      	cmp	r3, #62	; 0x3e
 800b45a:	d92b      	bls.n	800b4b4 <USB_EPStartXfer+0x1008>
 800b45c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	095b      	lsrs	r3, r3, #5
 800b46a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b46e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	f003 031f 	and.w	r3, r3, #31
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d104      	bne.n	800b48c <USB_EPStartXfer+0xfe0>
 800b482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b486:	3b01      	subs	r3, #1
 800b488:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b48c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b490:	881b      	ldrh	r3, [r3, #0]
 800b492:	b29a      	uxth	r2, r3
 800b494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b498:	b29b      	uxth	r3, r3
 800b49a:	029b      	lsls	r3, r3, #10
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4b0:	801a      	strh	r2, [r3, #0]
 800b4b2:	e070      	b.n	800b596 <USB_EPStartXfer+0x10ea>
 800b4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10c      	bne.n	800b4de <USB_EPStartXfer+0x1032>
 800b4c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4c8:	881b      	ldrh	r3, [r3, #0]
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4da:	801a      	strh	r2, [r3, #0]
 800b4dc:	e05b      	b.n	800b596 <USB_EPStartXfer+0x10ea>
 800b4de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	085b      	lsrs	r3, r3, #1
 800b4ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b4f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	f003 0301 	and.w	r3, r3, #1
 800b500:	2b00      	cmp	r3, #0
 800b502:	d004      	beq.n	800b50e <USB_EPStartXfer+0x1062>
 800b504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b508:	3301      	adds	r3, #1
 800b50a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b50e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	b29a      	uxth	r2, r3
 800b516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	029b      	lsls	r3, r3, #10
 800b51e:	b29b      	uxth	r3, r3
 800b520:	4313      	orrs	r3, r2
 800b522:	b29a      	uxth	r2, r3
 800b524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b528:	801a      	strh	r2, [r3, #0]
 800b52a:	e034      	b.n	800b596 <USB_EPStartXfer+0x10ea>
 800b52c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	785b      	ldrb	r3, [r3, #1]
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d12c      	bne.n	800b596 <USB_EPStartXfer+0x10ea>
 800b53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b54a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b54e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b558:	b29b      	uxth	r3, r3
 800b55a:	461a      	mov	r2, r3
 800b55c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b560:	4413      	add	r3, r2
 800b562:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b56a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	011a      	lsls	r2, r3, #4
 800b574:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b578:	4413      	add	r3, r2
 800b57a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b57e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	b29a      	uxth	r2, r3
 800b590:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b594:	801a      	strh	r2, [r3, #0]
 800b596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b5a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	785b      	ldrb	r3, [r3, #1]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f040 809d 	bne.w	800b6f0 <USB_EPStartXfer+0x1244>
 800b5b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5da:	4413      	add	r3, r2
 800b5dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b5e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	011a      	lsls	r2, r3, #4
 800b5ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5f2:	4413      	add	r3, r2
 800b5f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b5f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b5fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b600:	881b      	ldrh	r3, [r3, #0]
 800b602:	b29b      	uxth	r3, r3
 800b604:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b608:	b29a      	uxth	r2, r3
 800b60a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b60e:	801a      	strh	r2, [r3, #0]
 800b610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	691b      	ldr	r3, [r3, #16]
 800b61c:	2b3e      	cmp	r3, #62	; 0x3e
 800b61e:	d92b      	bls.n	800b678 <USB_EPStartXfer+0x11cc>
 800b620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	095b      	lsrs	r3, r3, #5
 800b62e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	691b      	ldr	r3, [r3, #16]
 800b63e:	f003 031f 	and.w	r3, r3, #31
 800b642:	2b00      	cmp	r3, #0
 800b644:	d104      	bne.n	800b650 <USB_EPStartXfer+0x11a4>
 800b646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b64a:	3b01      	subs	r3, #1
 800b64c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b650:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b654:	881b      	ldrh	r3, [r3, #0]
 800b656:	b29a      	uxth	r2, r3
 800b658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	029b      	lsls	r3, r3, #10
 800b660:	b29b      	uxth	r3, r3
 800b662:	4313      	orrs	r3, r2
 800b664:	b29b      	uxth	r3, r3
 800b666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b66a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b66e:	b29a      	uxth	r2, r3
 800b670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b674:	801a      	strh	r2, [r3, #0]
 800b676:	e069      	b.n	800b74c <USB_EPStartXfer+0x12a0>
 800b678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b67c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10c      	bne.n	800b6a2 <USB_EPStartXfer+0x11f6>
 800b688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b68c:	881b      	ldrh	r3, [r3, #0]
 800b68e:	b29b      	uxth	r3, r3
 800b690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b698:	b29a      	uxth	r2, r3
 800b69a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b69e:	801a      	strh	r2, [r3, #0]
 800b6a0:	e054      	b.n	800b74c <USB_EPStartXfer+0x12a0>
 800b6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	085b      	lsrs	r3, r3, #1
 800b6b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d004      	beq.n	800b6d2 <USB_EPStartXfer+0x1226>
 800b6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6d6:	881b      	ldrh	r3, [r3, #0]
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	029b      	lsls	r3, r3, #10
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6ec:	801a      	strh	r2, [r3, #0]
 800b6ee:	e02d      	b.n	800b74c <USB_EPStartXfer+0x12a0>
 800b6f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	785b      	ldrb	r3, [r3, #1]
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d125      	bne.n	800b74c <USB_EPStartXfer+0x12a0>
 800b700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b704:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b70e:	b29b      	uxth	r3, r3
 800b710:	461a      	mov	r2, r3
 800b712:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b716:	4413      	add	r3, r2
 800b718:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b71c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	011a      	lsls	r2, r3, #4
 800b72a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b72e:	4413      	add	r3, r2
 800b730:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b734:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	b29a      	uxth	r2, r3
 800b746:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b74a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b74c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	69db      	ldr	r3, [r3, #28]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f000 8218 	beq.w	800bb8e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b75e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b76c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	4413      	add	r3, r2
 800b778:	881b      	ldrh	r3, [r3, #0]
 800b77a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b77e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b786:	2b00      	cmp	r3, #0
 800b788:	d005      	beq.n	800b796 <USB_EPStartXfer+0x12ea>
 800b78a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b78e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b792:	2b00      	cmp	r3, #0
 800b794:	d10d      	bne.n	800b7b2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b796:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b79a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f040 81f5 	bne.w	800bb8e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b7a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f040 81ee 	bne.w	800bb8e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b7b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	4413      	add	r3, r2
 800b7cc:	881b      	ldrh	r3, [r3, #0]
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7d8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b7dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	441a      	add	r2, r3
 800b7f6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b7fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b806:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	8013      	strh	r3, [r2, #0]
 800b80e:	e1be      	b.n	800bb8e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	78db      	ldrb	r3, [r3, #3]
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	f040 81b4 	bne.w	800bb8a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	699a      	ldr	r2, [r3, #24]
 800b82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d917      	bls.n	800b86e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b83e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	691b      	ldr	r3, [r3, #16]
 800b84a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b84e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	699a      	ldr	r2, [r3, #24]
 800b85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85e:	1ad2      	subs	r2, r2, r3
 800b860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	619a      	str	r2, [r3, #24]
 800b86c:	e00e      	b.n	800b88c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b86e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	699b      	ldr	r3, [r3, #24]
 800b87a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b87e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2200      	movs	r2, #0
 800b88a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b88c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	785b      	ldrb	r3, [r3, #1]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f040 8085 	bne.w	800b9a8 <USB_EPStartXfer+0x14fc>
 800b89e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b8ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	461a      	mov	r2, r3
 800b8be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8c2:	4413      	add	r3, r2
 800b8c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b8c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	011a      	lsls	r2, r3, #4
 800b8d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8da:	4413      	add	r3, r2
 800b8dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b8e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b8e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8e8:	881b      	ldrh	r3, [r3, #0]
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8f6:	801a      	strh	r2, [r3, #0]
 800b8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8fc:	2b3e      	cmp	r3, #62	; 0x3e
 800b8fe:	d923      	bls.n	800b948 <USB_EPStartXfer+0x149c>
 800b900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b904:	095b      	lsrs	r3, r3, #5
 800b906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b90e:	f003 031f 	and.w	r3, r3, #31
 800b912:	2b00      	cmp	r3, #0
 800b914:	d104      	bne.n	800b920 <USB_EPStartXfer+0x1474>
 800b916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b91a:	3b01      	subs	r3, #1
 800b91c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b920:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b924:	881b      	ldrh	r3, [r3, #0]
 800b926:	b29a      	uxth	r2, r3
 800b928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	029b      	lsls	r3, r3, #10
 800b930:	b29b      	uxth	r3, r3
 800b932:	4313      	orrs	r3, r2
 800b934:	b29b      	uxth	r3, r3
 800b936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b93a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b93e:	b29a      	uxth	r2, r3
 800b940:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b944:	801a      	strh	r2, [r3, #0]
 800b946:	e060      	b.n	800ba0a <USB_EPStartXfer+0x155e>
 800b948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10c      	bne.n	800b96a <USB_EPStartXfer+0x14be>
 800b950:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b954:	881b      	ldrh	r3, [r3, #0]
 800b956:	b29b      	uxth	r3, r3
 800b958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b95c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b960:	b29a      	uxth	r2, r3
 800b962:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b966:	801a      	strh	r2, [r3, #0]
 800b968:	e04f      	b.n	800ba0a <USB_EPStartXfer+0x155e>
 800b96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96e:	085b      	lsrs	r3, r3, #1
 800b970:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d004      	beq.n	800b98a <USB_EPStartXfer+0x14de>
 800b980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b984:	3301      	adds	r3, #1
 800b986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b98a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b98e:	881b      	ldrh	r3, [r3, #0]
 800b990:	b29a      	uxth	r2, r3
 800b992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b996:	b29b      	uxth	r3, r3
 800b998:	029b      	lsls	r3, r3, #10
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	4313      	orrs	r3, r2
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9a4:	801a      	strh	r2, [r3, #0]
 800b9a6:	e030      	b.n	800ba0a <USB_EPStartXfer+0x155e>
 800b9a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	785b      	ldrb	r3, [r3, #1]
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d128      	bne.n	800ba0a <USB_EPStartXfer+0x155e>
 800b9b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b9c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9dc:	4413      	add	r3, r2
 800b9de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	011a      	lsls	r2, r3, #4
 800b9f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9f4:	4413      	add	r3, r2
 800b9f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b9fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b9fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ba08:	801a      	strh	r2, [r3, #0]
 800ba0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	785b      	ldrb	r3, [r3, #1]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f040 8085 	bne.w	800bb34 <USB_EPStartXfer+0x1688>
 800ba2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ba38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	461a      	mov	r2, r3
 800ba4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ba4e:	4413      	add	r3, r2
 800ba50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ba54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	011a      	lsls	r2, r3, #4
 800ba62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ba66:	4413      	add	r3, r2
 800ba68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ba6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba74:	881b      	ldrh	r3, [r3, #0]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba82:	801a      	strh	r2, [r3, #0]
 800ba84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba88:	2b3e      	cmp	r3, #62	; 0x3e
 800ba8a:	d923      	bls.n	800bad4 <USB_EPStartXfer+0x1628>
 800ba8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba90:	095b      	lsrs	r3, r3, #5
 800ba92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba9a:	f003 031f 	and.w	r3, r3, #31
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d104      	bne.n	800baac <USB_EPStartXfer+0x1600>
 800baa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800baa6:	3b01      	subs	r3, #1
 800baa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800baac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bab0:	881b      	ldrh	r3, [r3, #0]
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bab8:	b29b      	uxth	r3, r3
 800baba:	029b      	lsls	r3, r3, #10
 800babc:	b29b      	uxth	r3, r3
 800babe:	4313      	orrs	r3, r2
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baca:	b29a      	uxth	r2, r3
 800bacc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bad0:	801a      	strh	r2, [r3, #0]
 800bad2:	e05c      	b.n	800bb8e <USB_EPStartXfer+0x16e2>
 800bad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10c      	bne.n	800baf6 <USB_EPStartXfer+0x164a>
 800badc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baec:	b29a      	uxth	r2, r3
 800baee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800baf2:	801a      	strh	r2, [r3, #0]
 800baf4:	e04b      	b.n	800bb8e <USB_EPStartXfer+0x16e2>
 800baf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bafa:	085b      	lsrs	r3, r3, #1
 800bafc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb04:	f003 0301 	and.w	r3, r3, #1
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d004      	beq.n	800bb16 <USB_EPStartXfer+0x166a>
 800bb0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb10:	3301      	adds	r3, #1
 800bb12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb1a:	881b      	ldrh	r3, [r3, #0]
 800bb1c:	b29a      	uxth	r2, r3
 800bb1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	029b      	lsls	r3, r3, #10
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb30:	801a      	strh	r2, [r3, #0]
 800bb32:	e02c      	b.n	800bb8e <USB_EPStartXfer+0x16e2>
 800bb34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	785b      	ldrb	r3, [r3, #1]
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d124      	bne.n	800bb8e <USB_EPStartXfer+0x16e2>
 800bb44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	461a      	mov	r2, r3
 800bb56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bb5a:	4413      	add	r3, r2
 800bb5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	011a      	lsls	r2, r3, #4
 800bb6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bb72:	4413      	add	r3, r2
 800bb74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bb78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb80:	b29a      	uxth	r2, r3
 800bb82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bb86:	801a      	strh	r2, [r3, #0]
 800bb88:	e001      	b.n	800bb8e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e03a      	b.n	800bc04 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bb8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	4413      	add	r3, r2
 800bba8:	881b      	ldrh	r3, [r3, #0]
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbb4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bbb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bbbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bbc0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bbc4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bbc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bbcc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bbd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	441a      	add	r2, r3
 800bbea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bbee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bc02:	2300      	movs	r3, #0
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bc0e:	b480      	push	{r7}
 800bc10:	b085      	sub	sp, #20
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	785b      	ldrb	r3, [r3, #1]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d020      	beq.n	800bc62 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4413      	add	r3, r2
 800bc2a:	881b      	ldrh	r3, [r3, #0]
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc36:	81bb      	strh	r3, [r7, #12]
 800bc38:	89bb      	ldrh	r3, [r7, #12]
 800bc3a:	f083 0310 	eor.w	r3, r3, #16
 800bc3e:	81bb      	strh	r3, [r7, #12]
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	441a      	add	r2, r3
 800bc4a:	89bb      	ldrh	r3, [r7, #12]
 800bc4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	8013      	strh	r3, [r2, #0]
 800bc60:	e01f      	b.n	800bca2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	4413      	add	r3, r2
 800bc6c:	881b      	ldrh	r3, [r3, #0]
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc78:	81fb      	strh	r3, [r7, #14]
 800bc7a:	89fb      	ldrh	r3, [r7, #14]
 800bc7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bc80:	81fb      	strh	r3, [r7, #14]
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	441a      	add	r2, r3
 800bc8c:	89fb      	ldrh	r3, [r7, #14]
 800bc8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3714      	adds	r7, #20
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bc80      	pop	{r7}
 800bcac:	4770      	bx	lr

0800bcae <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bcae:	b480      	push	{r7}
 800bcb0:	b087      	sub	sp, #28
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	7b1b      	ldrb	r3, [r3, #12]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f040 809d 	bne.w	800bdfc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	785b      	ldrb	r3, [r3, #1]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d04c      	beq.n	800bd64 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	881b      	ldrh	r3, [r3, #0]
 800bcd6:	823b      	strh	r3, [r7, #16]
 800bcd8:	8a3b      	ldrh	r3, [r7, #16]
 800bcda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d01b      	beq.n	800bd1a <USB_EPClearStall+0x6c>
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	4413      	add	r3, r2
 800bcec:	881b      	ldrh	r3, [r3, #0]
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcf8:	81fb      	strh	r3, [r7, #14]
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	441a      	add	r2, r3
 800bd04:	89fb      	ldrh	r3, [r7, #14]
 800bd06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	78db      	ldrb	r3, [r3, #3]
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d06c      	beq.n	800bdfc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	4413      	add	r3, r2
 800bd2c:	881b      	ldrh	r3, [r3, #0]
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd38:	81bb      	strh	r3, [r7, #12]
 800bd3a:	89bb      	ldrh	r3, [r7, #12]
 800bd3c:	f083 0320 	eor.w	r3, r3, #32
 800bd40:	81bb      	strh	r3, [r7, #12]
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	441a      	add	r2, r3
 800bd4c:	89bb      	ldrh	r3, [r7, #12]
 800bd4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	8013      	strh	r3, [r2, #0]
 800bd62:	e04b      	b.n	800bdfc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	4413      	add	r3, r2
 800bd6e:	881b      	ldrh	r3, [r3, #0]
 800bd70:	82fb      	strh	r3, [r7, #22]
 800bd72:	8afb      	ldrh	r3, [r7, #22]
 800bd74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d01b      	beq.n	800bdb4 <USB_EPClearStall+0x106>
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	4413      	add	r3, r2
 800bd86:	881b      	ldrh	r3, [r3, #0]
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd92:	82bb      	strh	r3, [r7, #20]
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	441a      	add	r2, r3
 800bd9e:	8abb      	ldrh	r3, [r7, #20]
 800bda0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bda4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bda8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bdac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	4413      	add	r3, r2
 800bdbe:	881b      	ldrh	r3, [r3, #0]
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdca:	827b      	strh	r3, [r7, #18]
 800bdcc:	8a7b      	ldrh	r3, [r7, #18]
 800bdce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bdd2:	827b      	strh	r3, [r7, #18]
 800bdd4:	8a7b      	ldrh	r3, [r7, #18]
 800bdd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bdda:	827b      	strh	r3, [r7, #18]
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	441a      	add	r2, r3
 800bde6:	8a7b      	ldrh	r3, [r7, #18]
 800bde8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bdfc:	2300      	movs	r3, #0
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	371c      	adds	r7, #28
 800be02:	46bd      	mov	sp, r7
 800be04:	bc80      	pop	{r7}
 800be06:	4770      	bx	lr

0800be08 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	460b      	mov	r3, r1
 800be12:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800be14:	78fb      	ldrb	r3, [r7, #3]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d103      	bne.n	800be22 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2280      	movs	r2, #128	; 0x80
 800be1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800be22:	2300      	movs	r3, #0
}
 800be24:	4618      	mov	r0, r3
 800be26:	370c      	adds	r7, #12
 800be28:	46bd      	mov	sp, r7
 800be2a:	bc80      	pop	{r7}
 800be2c:	4770      	bx	lr

0800be2e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800be2e:	b480      	push	{r7}
 800be30:	b083      	sub	sp, #12
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	370c      	adds	r7, #12
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bc80      	pop	{r7}
 800be40:	4770      	bx	lr

0800be42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800be42:	b480      	push	{r7}
 800be44:	b083      	sub	sp, #12
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	bc80      	pop	{r7}
 800be54:	4770      	bx	lr

0800be56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800be56:	b480      	push	{r7}
 800be58:	b085      	sub	sp, #20
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800be64:	b29b      	uxth	r3, r3
 800be66:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800be68:	68fb      	ldr	r3, [r7, #12]
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	bc80      	pop	{r7}
 800be72:	4770      	bx	lr

0800be74 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	bc80      	pop	{r7}
 800be88:	4770      	bx	lr

0800be8a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800be8a:	b480      	push	{r7}
 800be8c:	b08b      	sub	sp, #44	; 0x2c
 800be8e:	af00      	add	r7, sp, #0
 800be90:	60f8      	str	r0, [r7, #12]
 800be92:	60b9      	str	r1, [r7, #8]
 800be94:	4611      	mov	r1, r2
 800be96:	461a      	mov	r2, r3
 800be98:	460b      	mov	r3, r1
 800be9a:	80fb      	strh	r3, [r7, #6]
 800be9c:	4613      	mov	r3, r2
 800be9e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bea0:	88bb      	ldrh	r3, [r7, #4]
 800bea2:	3301      	adds	r3, #1
 800bea4:	085b      	lsrs	r3, r3, #1
 800bea6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800beb0:	88fb      	ldrh	r3, [r7, #6]
 800beb2:	005a      	lsls	r2, r3, #1
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	4413      	add	r3, r2
 800beb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bebc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	627b      	str	r3, [r7, #36]	; 0x24
 800bec2:	e01e      	b.n	800bf02 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	3301      	adds	r3, #1
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	021b      	lsls	r3, r3, #8
 800bed2:	b21a      	sxth	r2, r3
 800bed4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bed8:	4313      	orrs	r3, r2
 800beda:	b21b      	sxth	r3, r3
 800bedc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	8a7a      	ldrh	r2, [r7, #18]
 800bee2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bee4:	6a3b      	ldr	r3, [r7, #32]
 800bee6:	3302      	adds	r3, #2
 800bee8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800beea:	6a3b      	ldr	r3, [r7, #32]
 800beec:	3302      	adds	r3, #2
 800beee:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	3301      	adds	r3, #1
 800bef4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	3301      	adds	r3, #1
 800befa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800befc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befe:	3b01      	subs	r3, #1
 800bf00:	627b      	str	r3, [r7, #36]	; 0x24
 800bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d1dd      	bne.n	800bec4 <USB_WritePMA+0x3a>
  }
}
 800bf08:	bf00      	nop
 800bf0a:	bf00      	nop
 800bf0c:	372c      	adds	r7, #44	; 0x2c
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bc80      	pop	{r7}
 800bf12:	4770      	bx	lr

0800bf14 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b08b      	sub	sp, #44	; 0x2c
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	4611      	mov	r1, r2
 800bf20:	461a      	mov	r2, r3
 800bf22:	460b      	mov	r3, r1
 800bf24:	80fb      	strh	r3, [r7, #6]
 800bf26:	4613      	mov	r3, r2
 800bf28:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bf2a:	88bb      	ldrh	r3, [r7, #4]
 800bf2c:	085b      	lsrs	r3, r3, #1
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf3a:	88fb      	ldrh	r3, [r7, #6]
 800bf3c:	005a      	lsls	r2, r3, #1
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	4413      	add	r3, r2
 800bf42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf46:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	627b      	str	r3, [r7, #36]	; 0x24
 800bf4c:	e01b      	b.n	800bf86 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bf4e:	6a3b      	ldr	r3, [r7, #32]
 800bf50:	881b      	ldrh	r3, [r3, #0]
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bf56:	6a3b      	ldr	r3, [r7, #32]
 800bf58:	3302      	adds	r3, #2
 800bf5a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	b2da      	uxtb	r2, r3
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	3301      	adds	r3, #1
 800bf68:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	0a1b      	lsrs	r3, r3, #8
 800bf6e:	b2da      	uxtb	r2, r3
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	3301      	adds	r3, #1
 800bf78:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800bf7a:	6a3b      	ldr	r3, [r7, #32]
 800bf7c:	3302      	adds	r3, #2
 800bf7e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800bf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf82:	3b01      	subs	r3, #1
 800bf84:	627b      	str	r3, [r7, #36]	; 0x24
 800bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1e0      	bne.n	800bf4e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bf8c:	88bb      	ldrh	r3, [r7, #4]
 800bf8e:	f003 0301 	and.w	r3, r3, #1
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d007      	beq.n	800bfa8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800bf98:	6a3b      	ldr	r3, [r7, #32]
 800bf9a:	881b      	ldrh	r3, [r3, #0]
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	b2da      	uxtb	r2, r3
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	701a      	strb	r2, [r3, #0]
  }
}
 800bfa8:	bf00      	nop
 800bfaa:	372c      	adds	r7, #44	; 0x2c
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bc80      	pop	{r7}
 800bfb0:	4770      	bx	lr

0800bfb2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfb2:	b580      	push	{r7, lr}
 800bfb4:	b084      	sub	sp, #16
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
 800bfba:	460b      	mov	r3, r1
 800bfbc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	7c1b      	ldrb	r3, [r3, #16]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d115      	bne.n	800bff6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bfca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfce:	2202      	movs	r2, #2
 800bfd0:	2181      	movs	r1, #129	; 0x81
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f001 fe31 	bl	800dc3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bfde:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfe2:	2202      	movs	r2, #2
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f001 fe27 	bl	800dc3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2201      	movs	r2, #1
 800bff0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800bff4:	e012      	b.n	800c01c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bff6:	2340      	movs	r3, #64	; 0x40
 800bff8:	2202      	movs	r2, #2
 800bffa:	2181      	movs	r1, #129	; 0x81
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f001 fe1c 	bl	800dc3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2201      	movs	r2, #1
 800c006:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c008:	2340      	movs	r3, #64	; 0x40
 800c00a:	2202      	movs	r2, #2
 800c00c:	2101      	movs	r1, #1
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f001 fe13 	bl	800dc3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2201      	movs	r2, #1
 800c018:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c01c:	2308      	movs	r3, #8
 800c01e:	2203      	movs	r2, #3
 800c020:	2182      	movs	r1, #130	; 0x82
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f001 fe09 	bl	800dc3a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c02e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c032:	f001 ff29 	bl	800de88 <USBD_static_malloc>
 800c036:	4602      	mov	r2, r0
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c044:	2b00      	cmp	r3, #0
 800c046:	d102      	bne.n	800c04e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800c048:	2301      	movs	r3, #1
 800c04a:	73fb      	strb	r3, [r7, #15]
 800c04c:	e026      	b.n	800c09c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c054:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	2200      	movs	r2, #0
 800c064:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	7c1b      	ldrb	r3, [r3, #16]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d109      	bne.n	800c08c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c07e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c082:	2101      	movs	r1, #1
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f001 fec9 	bl	800de1c <USBD_LL_PrepareReceive>
 800c08a:	e007      	b.n	800c09c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c092:	2340      	movs	r3, #64	; 0x40
 800c094:	2101      	movs	r1, #1
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f001 fec0 	bl	800de1c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b084      	sub	sp, #16
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c0b6:	2181      	movs	r1, #129	; 0x81
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f001 fde4 	bl	800dc86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f001 fddd 	bl	800dc86 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c0d4:	2182      	movs	r1, #130	; 0x82
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f001 fdd5 	bl	800dc86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00e      	beq.n	800c10a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f001 fecf 	bl	800dea0 <USBD_static_free>
    pdev->pClassData = NULL;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800c10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b086      	sub	sp, #24
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c124:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c126:	2300      	movs	r3, #0
 800c128:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c12a:	2300      	movs	r3, #0
 800c12c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c12e:	2300      	movs	r3, #0
 800c130:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d039      	beq.n	800c1b2 <USBD_CDC_Setup+0x9e>
 800c13e:	2b20      	cmp	r3, #32
 800c140:	d17f      	bne.n	800c242 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	88db      	ldrh	r3, [r3, #6]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d029      	beq.n	800c19e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	b25b      	sxtb	r3, r3
 800c150:	2b00      	cmp	r3, #0
 800c152:	da11      	bge.n	800c178 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	683a      	ldr	r2, [r7, #0]
 800c15e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800c160:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	88d2      	ldrh	r2, [r2, #6]
 800c166:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c168:	6939      	ldr	r1, [r7, #16]
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	88db      	ldrh	r3, [r3, #6]
 800c16e:	461a      	mov	r2, r3
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f001 f9da 	bl	800d52a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800c176:	e06b      	b.n	800c250 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	785a      	ldrb	r2, [r3, #1]
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	88db      	ldrh	r3, [r3, #6]
 800c186:	b2da      	uxtb	r2, r3
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c18e:	6939      	ldr	r1, [r7, #16]
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	88db      	ldrh	r3, [r3, #6]
 800c194:	461a      	mov	r2, r3
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f001 f9f5 	bl	800d586 <USBD_CtlPrepareRx>
      break;
 800c19c:	e058      	b.n	800c250 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	7850      	ldrb	r0, [r2, #1]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	6839      	ldr	r1, [r7, #0]
 800c1ae:	4798      	blx	r3
      break;
 800c1b0:	e04e      	b.n	800c250 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	785b      	ldrb	r3, [r3, #1]
 800c1b6:	2b0b      	cmp	r3, #11
 800c1b8:	d02e      	beq.n	800c218 <USBD_CDC_Setup+0x104>
 800c1ba:	2b0b      	cmp	r3, #11
 800c1bc:	dc38      	bgt.n	800c230 <USBD_CDC_Setup+0x11c>
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d002      	beq.n	800c1c8 <USBD_CDC_Setup+0xb4>
 800c1c2:	2b0a      	cmp	r3, #10
 800c1c4:	d014      	beq.n	800c1f0 <USBD_CDC_Setup+0xdc>
 800c1c6:	e033      	b.n	800c230 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1ce:	2b03      	cmp	r3, #3
 800c1d0:	d107      	bne.n	800c1e2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800c1d2:	f107 030c 	add.w	r3, r7, #12
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	4619      	mov	r1, r3
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f001 f9a5 	bl	800d52a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1e0:	e02e      	b.n	800c240 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f001 f936 	bl	800d456 <USBD_CtlError>
            ret = USBD_FAIL;
 800c1ea:	2302      	movs	r3, #2
 800c1ec:	75fb      	strb	r3, [r7, #23]
          break;
 800c1ee:	e027      	b.n	800c240 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1f6:	2b03      	cmp	r3, #3
 800c1f8:	d107      	bne.n	800c20a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800c1fa:	f107 030f 	add.w	r3, r7, #15
 800c1fe:	2201      	movs	r2, #1
 800c200:	4619      	mov	r1, r3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f001 f991 	bl	800d52a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c208:	e01a      	b.n	800c240 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c20a:	6839      	ldr	r1, [r7, #0]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f001 f922 	bl	800d456 <USBD_CtlError>
            ret = USBD_FAIL;
 800c212:	2302      	movs	r3, #2
 800c214:	75fb      	strb	r3, [r7, #23]
          break;
 800c216:	e013      	b.n	800c240 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c21e:	2b03      	cmp	r3, #3
 800c220:	d00d      	beq.n	800c23e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800c222:	6839      	ldr	r1, [r7, #0]
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f001 f916 	bl	800d456 <USBD_CtlError>
            ret = USBD_FAIL;
 800c22a:	2302      	movs	r3, #2
 800c22c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c22e:	e006      	b.n	800c23e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f001 f90f 	bl	800d456 <USBD_CtlError>
          ret = USBD_FAIL;
 800c238:	2302      	movs	r3, #2
 800c23a:	75fb      	strb	r3, [r7, #23]
          break;
 800c23c:	e000      	b.n	800c240 <USBD_CDC_Setup+0x12c>
          break;
 800c23e:	bf00      	nop
      }
      break;
 800c240:	e006      	b.n	800c250 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c242:	6839      	ldr	r1, [r7, #0]
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f001 f906 	bl	800d456 <USBD_CtlError>
      ret = USBD_FAIL;
 800c24a:	2302      	movs	r3, #2
 800c24c:	75fb      	strb	r3, [r7, #23]
      break;
 800c24e:	bf00      	nop
  }

  return ret;
 800c250:	7dfb      	ldrb	r3, [r7, #23]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3718      	adds	r7, #24
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b084      	sub	sp, #16
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
 800c262:	460b      	mov	r3, r1
 800c264:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c26c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c274:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d03a      	beq.n	800c2f6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c280:	78fa      	ldrb	r2, [r7, #3]
 800c282:	6879      	ldr	r1, [r7, #4]
 800c284:	4613      	mov	r3, r2
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4413      	add	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	440b      	add	r3, r1
 800c28e:	331c      	adds	r3, #28
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d029      	beq.n	800c2ea <USBD_CDC_DataIn+0x90>
 800c296:	78fa      	ldrb	r2, [r7, #3]
 800c298:	6879      	ldr	r1, [r7, #4]
 800c29a:	4613      	mov	r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	4413      	add	r3, r2
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	440b      	add	r3, r1
 800c2a4:	331c      	adds	r3, #28
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	78f9      	ldrb	r1, [r7, #3]
 800c2aa:	68b8      	ldr	r0, [r7, #8]
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	440b      	add	r3, r1
 800c2b2:	00db      	lsls	r3, r3, #3
 800c2b4:	4403      	add	r3, r0
 800c2b6:	3338      	adds	r3, #56	; 0x38
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	fbb2 f1f3 	udiv	r1, r2, r3
 800c2be:	fb01 f303 	mul.w	r3, r1, r3
 800c2c2:	1ad3      	subs	r3, r2, r3
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d110      	bne.n	800c2ea <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c2c8:	78fa      	ldrb	r2, [r7, #3]
 800c2ca:	6879      	ldr	r1, [r7, #4]
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	440b      	add	r3, r1
 800c2d6:	331c      	adds	r3, #28
 800c2d8:	2200      	movs	r2, #0
 800c2da:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c2dc:	78f9      	ldrb	r1, [r7, #3]
 800c2de:	2300      	movs	r3, #0
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f001 fd77 	bl	800ddd6 <USBD_LL_Transmit>
 800c2e8:	e003      	b.n	800c2f2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	e000      	b.n	800c2f8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c2f6:	2302      	movs	r3, #2
  }
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	460b      	mov	r3, r1
 800c30a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c312:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c314:	78fb      	ldrb	r3, [r7, #3]
 800c316:	4619      	mov	r1, r3
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f001 fda2 	bl	800de62 <USBD_LL_GetRxDataSize>
 800c31e:	4602      	mov	r2, r0
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00d      	beq.n	800c34c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c344:	4611      	mov	r1, r2
 800c346:	4798      	blx	r3

    return USBD_OK;
 800c348:	2300      	movs	r3, #0
 800c34a:	e000      	b.n	800c34e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c34c:	2302      	movs	r3, #2
  }
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c364:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d015      	beq.n	800c39c <USBD_CDC_EP0_RxReady+0x46>
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c376:	2bff      	cmp	r3, #255	; 0xff
 800c378:	d010      	beq.n	800c39c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c388:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c390:	b292      	uxth	r2, r2
 800c392:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	22ff      	movs	r2, #255	; 0xff
 800c398:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800c39c:	2300      	movs	r3, #0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
	...

0800c3a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2243      	movs	r2, #67	; 0x43
 800c3b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c3b6:	4b03      	ldr	r3, [pc, #12]	; (800c3c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	370c      	adds	r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bc80      	pop	{r7}
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	200000e8 	.word	0x200000e8

0800c3c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2243      	movs	r2, #67	; 0x43
 800c3d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c3d6:	4b03      	ldr	r3, [pc, #12]	; (800c3e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bc80      	pop	{r7}
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	200000a4 	.word	0x200000a4

0800c3e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2243      	movs	r2, #67	; 0x43
 800c3f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c3f6:	4b03      	ldr	r3, [pc, #12]	; (800c404 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bc80      	pop	{r7}
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	2000012c 	.word	0x2000012c

0800c408 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	220a      	movs	r2, #10
 800c414:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c416:	4b03      	ldr	r3, [pc, #12]	; (800c424 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c418:	4618      	mov	r0, r3
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bc80      	pop	{r7}
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	20000060 	.word	0x20000060

0800c428 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c428:	b480      	push	{r7}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c432:	2302      	movs	r3, #2
 800c434:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d005      	beq.n	800c448 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	683a      	ldr	r2, [r7, #0]
 800c440:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800c444:	2300      	movs	r3, #0
 800c446:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c448:	7bfb      	ldrb	r3, [r7, #15]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3714      	adds	r7, #20
 800c44e:	46bd      	mov	sp, r7
 800c450:	bc80      	pop	{r7}
 800c452:	4770      	bx	lr

0800c454 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c454:	b480      	push	{r7}
 800c456:	b087      	sub	sp, #28
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	4613      	mov	r3, r2
 800c460:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c468:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c472:	88fa      	ldrh	r2, [r7, #6]
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	371c      	adds	r7, #28
 800c480:	46bd      	mov	sp, r7
 800c482:	bc80      	pop	{r7}
 800c484:	4770      	bx	lr

0800c486 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c486:	b480      	push	{r7}
 800c488:	b085      	sub	sp, #20
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
 800c48e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c496:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bc80      	pop	{r7}
 800c4aa:	4770      	bx	lr

0800c4ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4ba:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d017      	beq.n	800c4f6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	7c1b      	ldrb	r3, [r3, #16]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d109      	bne.n	800c4e2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c4d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4d8:	2101      	movs	r1, #1
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f001 fc9e 	bl	800de1c <USBD_LL_PrepareReceive>
 800c4e0:	e007      	b.n	800c4f2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c4e8:	2340      	movs	r3, #64	; 0x40
 800c4ea:	2101      	movs	r1, #1
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f001 fc95 	bl	800de1c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	e000      	b.n	800c4f8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c4f6:	2302      	movs	r3, #2
  }
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <USBD_Init>:
 * @param  pdesc: Descriptor structure address
 * @param  id: Low level core index
 * @retval None
 */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
		USBD_DescriptorsTypeDef *pdesc, uint8_t id) {
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	4613      	mov	r3, r2
 800c50c:	71fb      	strb	r3, [r7, #7]
	/* Check whether the USB Host handle is valid */
	if (pdev == NULL) {
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d101      	bne.n	800c518 <USBD_Init+0x18>
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
		return USBD_FAIL;
 800c514:	2302      	movs	r3, #2
 800c516:	e01a      	b.n	800c54e <USBD_Init+0x4e>
	}

	/* Unlink previous class*/
	if (pdev->pClass != NULL) {
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d003      	beq.n	800c52a <USBD_Init+0x2a>
		pdev->pClass = NULL;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2200      	movs	r2, #0
 800c526:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
	}

	/* Assign USBD Descriptors */
	if (pdesc != NULL) {
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d003      	beq.n	800c538 <USBD_Init+0x38>
		pdev->pDesc = pdesc;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	68ba      	ldr	r2, [r7, #8]
 800c534:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
	}

	/* Set Device initial State */
	pdev->dev_state = USBD_STATE_DEFAULT;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2201      	movs	r2, #1
 800c53c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
	pdev->id = id;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	79fa      	ldrb	r2, [r7, #7]
 800c544:	701a      	strb	r2, [r3, #0]
	/* Initialize low level driver */
	USBD_LL_Init(pdev);
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f001 fb02 	bl	800db50 <USBD_LL_Init>

	return USBD_OK;
 800c54c:	2300      	movs	r3, #0
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3710      	adds	r7, #16
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <USBD_RegisterClass>:
 * @param  pDevice : Device Handle
 * @param  pclass: Class handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev,
		USBD_ClassTypeDef *pclass) {
 800c556:	b480      	push	{r7}
 800c558:	b085      	sub	sp, #20
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
 800c55e:	6039      	str	r1, [r7, #0]
	USBD_StatusTypeDef status = USBD_OK;
 800c560:	2300      	movs	r3, #0
 800c562:	73fb      	strb	r3, [r7, #15]
	if (pclass != NULL) {
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d006      	beq.n	800c578 <USBD_RegisterClass+0x22>
		/* link the class to the USB Device handle */
		pdev->pClass = pclass;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
		status = USBD_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	73fb      	strb	r3, [r7, #15]
 800c576:	e001      	b.n	800c57c <USBD_RegisterClass+0x26>
	} else {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
		status = USBD_FAIL;
 800c578:	2302      	movs	r3, #2
 800c57a:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800c57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3714      	adds	r7, #20
 800c582:	46bd      	mov	sp, r7
 800c584:	bc80      	pop	{r7}
 800c586:	4770      	bx	lr

0800c588 <USBD_Start>:
 * @brief  USBD_Start
 *         Start the USB Device Core.
 * @param  pdev: Device Handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev) {
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
	/* Start the low level driver  */
	USBD_LL_Start(pdev);
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f001 fb37 	bl	800dc04 <USBD_LL_Start>

	return USBD_OK;
 800c596:	2300      	movs	r3, #0
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <USBD_RunTestMode>:
 * @brief  USBD_RunTestMode
 *         Launch test mode process
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev) {
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument compilation warning */
	UNUSED(pdev);

	return USBD_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	370c      	adds	r7, #12
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bc80      	pop	{r7}
 800c5b2:	4770      	bx	lr

0800c5b4 <USBD_SetClassConfig>:
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status
 */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	460b      	mov	r3, r1
 800c5be:	70fb      	strb	r3, [r7, #3]
	USBD_StatusTypeDef ret = USBD_FAIL;
 800c5c0:	2302      	movs	r3, #2
 800c5c2:	73fb      	strb	r3, [r7, #15]

	if (pdev->pClass != NULL) {
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00c      	beq.n	800c5e8 <USBD_SetClassConfig+0x34>
		/* Set configuration  and Start the Class*/
		if (pdev->pClass->Init(pdev, cfgidx) == 0U) {
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	78fa      	ldrb	r2, [r7, #3]
 800c5d8:	4611      	mov	r1, r2
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	4798      	blx	r3
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d101      	bne.n	800c5e8 <USBD_SetClassConfig+0x34>
			ret = USBD_OK;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	73fb      	strb	r3, [r7, #15]
		}
	}

	return ret;
 800c5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <USBD_ClrClassConfig>:
 *         Clear current configuration
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status: USBD_StatusTypeDef
 */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b082      	sub	sp, #8
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	70fb      	strb	r3, [r7, #3]
	/* Clear configuration  and De-initialize the Class process*/
	pdev->pClass->DeInit(pdev, cfgidx);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	78fa      	ldrb	r2, [r7, #3]
 800c608:	4611      	mov	r1, r2
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	4798      	blx	r3

	return USBD_OK;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <USBD_LL_SetupStage>:
 * @brief  USBD_SetupStage
 *         Handle the setup stage
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup) {
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
	USBD_ParseSetupRequest(&pdev->request, psetup);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c628:	6839      	ldr	r1, [r7, #0]
 800c62a:	4618      	mov	r0, r3
 800c62c:	f000 fed7 	bl	800d3de <USBD_ParseSetupRequest>

	pdev->ep0_state = USBD_EP0_SETUP;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

	pdev->ep0_data_len = pdev->request.wLength;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c63e:	461a      	mov	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

	switch (pdev->request.bmRequest & 0x1FU) {
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c64c:	f003 031f 	and.w	r3, r3, #31
 800c650:	2b02      	cmp	r3, #2
 800c652:	d016      	beq.n	800c682 <USBD_LL_SetupStage+0x6a>
 800c654:	2b02      	cmp	r3, #2
 800c656:	d81c      	bhi.n	800c692 <USBD_LL_SetupStage+0x7a>
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d002      	beq.n	800c662 <USBD_LL_SetupStage+0x4a>
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d008      	beq.n	800c672 <USBD_LL_SetupStage+0x5a>
 800c660:	e017      	b.n	800c692 <USBD_LL_SetupStage+0x7a>
	case USB_REQ_RECIPIENT_DEVICE:
		USBD_StdDevReq(pdev, &pdev->request);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c668:	4619      	mov	r1, r3
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f9ca 	bl	800ca04 <USBD_StdDevReq>
		break;
 800c670:	e01a      	b.n	800c6a8 <USBD_LL_SetupStage+0x90>

	case USB_REQ_RECIPIENT_INTERFACE:
		USBD_StdItfReq(pdev, &pdev->request);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c678:	4619      	mov	r1, r3
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 fa2c 	bl	800cad8 <USBD_StdItfReq>
		break;
 800c680:	e012      	b.n	800c6a8 <USBD_LL_SetupStage+0x90>

	case USB_REQ_RECIPIENT_ENDPOINT:
		USBD_StdEPReq(pdev, &pdev->request);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c688:	4619      	mov	r1, r3
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 fa6c 	bl	800cb68 <USBD_StdEPReq>
		break;
 800c690:	e00a      	b.n	800c6a8 <USBD_LL_SetupStage+0x90>

	default:
		USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c698:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	4619      	mov	r1, r3
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f001 fb0f 	bl	800dcc4 <USBD_LL_StallEP>
		break;
 800c6a6:	bf00      	nop
	}

	return USBD_OK;
 800c6a8:	2300      	movs	r3, #0
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3708      	adds	r7, #8
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <USBD_LL_DataOutStage>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
		uint8_t *pdata) {
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b086      	sub	sp, #24
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	60f8      	str	r0, [r7, #12]
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	607a      	str	r2, [r7, #4]
 800c6be:	72fb      	strb	r3, [r7, #11]
	USBD_EndpointTypeDef *pep;

	if (epnum == 0U) {
 800c6c0:	7afb      	ldrb	r3, [r7, #11]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d14b      	bne.n	800c75e <USBD_LL_DataOutStage+0xac>
		pep = &pdev->ep_out[0];
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c6cc:	617b      	str	r3, [r7, #20]

		if (pdev->ep0_state == USBD_EP0_DATA_OUT) {
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c6d4:	2b03      	cmp	r3, #3
 800c6d6:	d134      	bne.n	800c742 <USBD_LL_DataOutStage+0x90>
			if (pep->rem_length > pep->maxpacket) {
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	68da      	ldr	r2, [r3, #12]
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	691b      	ldr	r3, [r3, #16]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d919      	bls.n	800c718 <USBD_LL_DataOutStage+0x66>
				pep->rem_length -= pep->maxpacket;
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	68da      	ldr	r2, [r3, #12]
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	691b      	ldr	r3, [r3, #16]
 800c6ec:	1ad2      	subs	r2, r2, r3
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	60da      	str	r2, [r3, #12]

				USBD_CtlContinueRx(pdev, pdata,
						(uint16_t) MIN(pep->rem_length, pep->maxpacket));
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	68da      	ldr	r2, [r3, #12]
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	691b      	ldr	r3, [r3, #16]
				USBD_CtlContinueRx(pdev, pdata,
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d203      	bcs.n	800c706 <USBD_LL_DataOutStage+0x54>
						(uint16_t) MIN(pep->rem_length, pep->maxpacket));
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	68db      	ldr	r3, [r3, #12]
				USBD_CtlContinueRx(pdev, pdata,
 800c702:	b29b      	uxth	r3, r3
 800c704:	e002      	b.n	800c70c <USBD_LL_DataOutStage+0x5a>
						(uint16_t) MIN(pep->rem_length, pep->maxpacket));
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	691b      	ldr	r3, [r3, #16]
				USBD_CtlContinueRx(pdev, pdata,
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	461a      	mov	r2, r3
 800c70e:	6879      	ldr	r1, [r7, #4]
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	f000 ff56 	bl	800d5c2 <USBD_CtlContinueRx>
 800c716:	e038      	b.n	800c78a <USBD_LL_DataOutStage+0xd8>
			} else {
				if ((pdev->pClass->EP0_RxReady != NULL)
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c71e:	691b      	ldr	r3, [r3, #16]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00a      	beq.n	800c73a <USBD_LL_DataOutStage+0x88>
						&& (pdev->dev_state == USBD_STATE_CONFIGURED)) {
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c72a:	2b03      	cmp	r3, #3
 800c72c:	d105      	bne.n	800c73a <USBD_LL_DataOutStage+0x88>
					pdev->pClass->EP0_RxReady(pdev);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	68f8      	ldr	r0, [r7, #12]
 800c738:	4798      	blx	r3
				}
				USBD_CtlSendStatus(pdev);
 800c73a:	68f8      	ldr	r0, [r7, #12]
 800c73c:	f000 ff53 	bl	800d5e6 <USBD_CtlSendStatus>
 800c740:	e023      	b.n	800c78a <USBD_LL_DataOutStage+0xd8>
			}
		} else {
			if (pdev->ep0_state == USBD_EP0_STATUS_OUT) {
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c748:	2b05      	cmp	r3, #5
 800c74a:	d11e      	bne.n	800c78a <USBD_LL_DataOutStage+0xd8>
				/*
				 * STATUS PHASE completed, update ep0_state to idle
				 */
				pdev->ep0_state = USBD_EP0_IDLE;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2200      	movs	r2, #0
 800c750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
				USBD_LL_StallEP(pdev, 0U);
 800c754:	2100      	movs	r1, #0
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f001 fab4 	bl	800dcc4 <USBD_LL_StallEP>
 800c75c:	e015      	b.n	800c78a <USBD_LL_DataOutStage+0xd8>
			}
		}
	} else if ((pdev->pClass->DataOut != NULL)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c764:	699b      	ldr	r3, [r3, #24]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00d      	beq.n	800c786 <USBD_LL_DataOutStage+0xd4>
			&& (pdev->dev_state == USBD_STATE_CONFIGURED)) {
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c770:	2b03      	cmp	r3, #3
 800c772:	d108      	bne.n	800c786 <USBD_LL_DataOutStage+0xd4>
		pdev->pClass->DataOut(pdev, epnum);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c77a:	699b      	ldr	r3, [r3, #24]
 800c77c:	7afa      	ldrb	r2, [r7, #11]
 800c77e:	4611      	mov	r1, r2
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	4798      	blx	r3
 800c784:	e001      	b.n	800c78a <USBD_LL_DataOutStage+0xd8>
	} else {
		/* should never be in this condition */
		return USBD_FAIL;
 800c786:	2302      	movs	r3, #2
 800c788:	e000      	b.n	800c78c <USBD_LL_DataOutStage+0xda>
	}

	return USBD_OK;
 800c78a:	2300      	movs	r3, #0
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3718      	adds	r7, #24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_LL_DataInStage>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
		uint8_t *pdata) {
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	460b      	mov	r3, r1
 800c79e:	607a      	str	r2, [r7, #4]
 800c7a0:	72fb      	strb	r3, [r7, #11]
	USBD_EndpointTypeDef *pep;

	if (epnum == 0U) {
 800c7a2:	7afb      	ldrb	r3, [r7, #11]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d17f      	bne.n	800c8a8 <USBD_LL_DataInStage+0x114>
		pep = &pdev->ep_in[0];
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	3314      	adds	r3, #20
 800c7ac:	617b      	str	r3, [r7, #20]

		if (pdev->ep0_state == USBD_EP0_DATA_IN) {
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c7b4:	2b02      	cmp	r3, #2
 800c7b6:	d15c      	bne.n	800c872 <USBD_LL_DataInStage+0xde>
			if (pep->rem_length > pep->maxpacket) {
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	68da      	ldr	r2, [r3, #12]
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	691b      	ldr	r3, [r3, #16]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d915      	bls.n	800c7f0 <USBD_LL_DataInStage+0x5c>
				pep->rem_length -= pep->maxpacket;
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	68da      	ldr	r2, [r3, #12]
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	691b      	ldr	r3, [r3, #16]
 800c7cc:	1ad2      	subs	r2, r2, r3
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	60da      	str	r2, [r3, #12]

				USBD_CtlContinueSendData(pdev, pdata,
						(uint16_t) pep->rem_length);
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	68db      	ldr	r3, [r3, #12]
				USBD_CtlContinueSendData(pdev, pdata,
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	461a      	mov	r2, r3
 800c7da:	6879      	ldr	r1, [r7, #4]
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f000 fec0 	bl	800d562 <USBD_CtlContinueSendData>

				/* Prepare endpoint for premature end of transfer */
				USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	68f8      	ldr	r0, [r7, #12]
 800c7ea:	f001 fb17 	bl	800de1c <USBD_LL_PrepareReceive>
 800c7ee:	e04e      	b.n	800c88e <USBD_LL_DataInStage+0xfa>
			} else {
				/* last packet is MPS multiple, so send ZLP packet */
				if ((pep->total_length % pep->maxpacket == 0U)
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	697a      	ldr	r2, [r7, #20]
 800c7f6:	6912      	ldr	r2, [r2, #16]
 800c7f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7fc:	fb01 f202 	mul.w	r2, r1, r2
 800c800:	1a9b      	subs	r3, r3, r2
 800c802:	2b00      	cmp	r3, #0
 800c804:	d11c      	bne.n	800c840 <USBD_LL_DataInStage+0xac>
						&& (pep->total_length >= pep->maxpacket)
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	689a      	ldr	r2, [r3, #8]
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d316      	bcc.n	800c840 <USBD_LL_DataInStage+0xac>
						&& (pep->total_length < pdev->ep0_data_len)) {
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	689a      	ldr	r2, [r3, #8]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d20f      	bcs.n	800c840 <USBD_LL_DataInStage+0xac>
					USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c820:	2200      	movs	r2, #0
 800c822:	2100      	movs	r1, #0
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f000 fe9c 	bl	800d562 <USBD_CtlContinueSendData>
					pdev->ep0_data_len = 0U;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

					/* Prepare endpoint for premature end of transfer */
					USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c832:	2300      	movs	r3, #0
 800c834:	2200      	movs	r2, #0
 800c836:	2100      	movs	r1, #0
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f001 faef 	bl	800de1c <USBD_LL_PrepareReceive>
 800c83e:	e026      	b.n	800c88e <USBD_LL_DataInStage+0xfa>
				} else {
					if ((pdev->pClass->EP0_TxSent != NULL)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00a      	beq.n	800c862 <USBD_LL_DataInStage+0xce>
							&& (pdev->dev_state == USBD_STATE_CONFIGURED)) {
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c852:	2b03      	cmp	r3, #3
 800c854:	d105      	bne.n	800c862 <USBD_LL_DataInStage+0xce>
						pdev->pClass->EP0_TxSent(pdev);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	68f8      	ldr	r0, [r7, #12]
 800c860:	4798      	blx	r3
					}
					USBD_LL_StallEP(pdev, 0x80U);
 800c862:	2180      	movs	r1, #128	; 0x80
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f001 fa2d 	bl	800dcc4 <USBD_LL_StallEP>
					USBD_CtlReceiveStatus(pdev);
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f000 fece 	bl	800d60c <USBD_CtlReceiveStatus>
 800c870:	e00d      	b.n	800c88e <USBD_LL_DataInStage+0xfa>
				}
			}
		} else {
			if ((pdev->ep0_state == USBD_EP0_STATUS_IN)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c878:	2b04      	cmp	r3, #4
 800c87a:	d004      	beq.n	800c886 <USBD_LL_DataInStage+0xf2>
					|| (pdev->ep0_state == USBD_EP0_IDLE)) {
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c882:	2b00      	cmp	r3, #0
 800c884:	d103      	bne.n	800c88e <USBD_LL_DataInStage+0xfa>
				USBD_LL_StallEP(pdev, 0x80U);
 800c886:	2180      	movs	r1, #128	; 0x80
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	f001 fa1b 	bl	800dcc4 <USBD_LL_StallEP>
			}
		}

		if (pdev->dev_test_mode == 1U) {
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c894:	2b01      	cmp	r3, #1
 800c896:	d11d      	bne.n	800c8d4 <USBD_LL_DataInStage+0x140>
			USBD_RunTestMode(pdev);
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f7ff fe81 	bl	800c5a0 <USBD_RunTestMode>
			pdev->dev_test_mode = 0U;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c8a6:	e015      	b.n	800c8d4 <USBD_LL_DataInStage+0x140>
		}
	} else if ((pdev->pClass->DataIn != NULL)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ae:	695b      	ldr	r3, [r3, #20]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00d      	beq.n	800c8d0 <USBD_LL_DataInStage+0x13c>
			&& (pdev->dev_state == USBD_STATE_CONFIGURED)) {
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8ba:	2b03      	cmp	r3, #3
 800c8bc:	d108      	bne.n	800c8d0 <USBD_LL_DataInStage+0x13c>
		pdev->pClass->DataIn(pdev, epnum);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8c4:	695b      	ldr	r3, [r3, #20]
 800c8c6:	7afa      	ldrb	r2, [r7, #11]
 800c8c8:	4611      	mov	r1, r2
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	4798      	blx	r3
 800c8ce:	e001      	b.n	800c8d4 <USBD_LL_DataInStage+0x140>
	} else {
		/* should never be in this condition */
		return USBD_FAIL;
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	e000      	b.n	800c8d6 <USBD_LL_DataInStage+0x142>
	}

	return USBD_OK;
 800c8d4:	2300      	movs	r3, #0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3718      	adds	r7, #24
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <USBD_LL_Reset>:
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev) {
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b082      	sub	sp, #8
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
	/* Open EP0 OUT */
	USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8e6:	2340      	movs	r3, #64	; 0x40
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f001 f9a4 	bl	800dc3a <USBD_LL_OpenEP>
	pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2240      	movs	r2, #64	; 0x40
 800c8fe:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

	/* Open EP0 IN */
	USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c902:	2340      	movs	r3, #64	; 0x40
 800c904:	2200      	movs	r2, #0
 800c906:	2180      	movs	r1, #128	; 0x80
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f001 f996 	bl	800dc3a <USBD_LL_OpenEP>
	pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2201      	movs	r2, #1
 800c912:	619a      	str	r2, [r3, #24]

	pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2240      	movs	r2, #64	; 0x40
 800c918:	625a      	str	r2, [r3, #36]	; 0x24

	/* Upon Reset call user call back */
	pdev->dev_state = USBD_STATE_DEFAULT;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2201      	movs	r2, #1
 800c91e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
	pdev->ep0_state = USBD_EP0_IDLE;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	pdev->dev_config = 0U;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	605a      	str	r2, [r3, #4]
	pdev->dev_remote_wakeup = 0U;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

	if (pdev->pClassData) {
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d009      	beq.n	800c956 <USBD_LL_Reset+0x78>
		pdev->pClass->DeInit(pdev, (uint8_t) pdev->dev_config);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	6852      	ldr	r2, [r2, #4]
 800c94e:	b2d2      	uxtb	r2, r2
 800c950:	4611      	mov	r1, r2
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	4798      	blx	r3
	}

	return USBD_OK;
 800c956:	2300      	movs	r3, #0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3708      	adds	r7, #8
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <USBD_LL_SetSpeed>:
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
		USBD_SpeedTypeDef speed) {
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	460b      	mov	r3, r1
 800c96a:	70fb      	strb	r3, [r7, #3]
	pdev->dev_speed = speed;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	78fa      	ldrb	r2, [r7, #3]
 800c970:	741a      	strb	r2, [r3, #16]

	return USBD_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	bc80      	pop	{r7}
 800c97c:	4770      	bx	lr

0800c97e <USBD_LL_Suspend>:
 *         Handle Suspend event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev) {
 800c97e:	b480      	push	{r7}
 800c980:	b083      	sub	sp, #12
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
	pdev->dev_old_state = pdev->dev_state;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
	pdev->dev_state = USBD_STATE_SUSPENDED;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2204      	movs	r2, #4
 800c996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

	return USBD_OK;
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bc80      	pop	{r7}
 800c9a4:	4770      	bx	lr

0800c9a6 <USBD_LL_Resume>:
 *         Handle Resume event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev) {
 800c9a6:	b480      	push	{r7}
 800c9a8:	b083      	sub	sp, #12
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
	if (pdev->dev_state == USBD_STATE_SUSPENDED) {
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9b4:	2b04      	cmp	r3, #4
 800c9b6:	d105      	bne.n	800c9c4 <USBD_LL_Resume+0x1e>
		pdev->dev_state = pdev->dev_old_state;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
	}

	return USBD_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	370c      	adds	r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bc80      	pop	{r7}
 800c9ce:	4770      	bx	lr

0800c9d0 <USBD_LL_SOF>:
 *         Handle SOF event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev) {
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
	if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9de:	2b03      	cmp	r3, #3
 800c9e0:	d10b      	bne.n	800c9fa <USBD_LL_SOF+0x2a>
		if (pdev->pClass->SOF != NULL) {
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9e8:	69db      	ldr	r3, [r3, #28]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d005      	beq.n	800c9fa <USBD_LL_SOF+0x2a>
			pdev->pClass->SOF(pdev);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9f4:	69db      	ldr	r3, [r3, #28]
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	4798      	blx	r3
		}
	}

	return USBD_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca1a:	2b40      	cmp	r3, #64	; 0x40
 800ca1c:	d005      	beq.n	800ca2a <USBD_StdDevReq+0x26>
 800ca1e:	2b40      	cmp	r3, #64	; 0x40
 800ca20:	d84f      	bhi.n	800cac2 <USBD_StdDevReq+0xbe>
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d009      	beq.n	800ca3a <USBD_StdDevReq+0x36>
 800ca26:	2b20      	cmp	r3, #32
 800ca28:	d14b      	bne.n	800cac2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	6839      	ldr	r1, [r7, #0]
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	4798      	blx	r3
      break;
 800ca38:	e048      	b.n	800cacc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	785b      	ldrb	r3, [r3, #1]
 800ca3e:	2b09      	cmp	r3, #9
 800ca40:	d839      	bhi.n	800cab6 <USBD_StdDevReq+0xb2>
 800ca42:	a201      	add	r2, pc, #4	; (adr r2, 800ca48 <USBD_StdDevReq+0x44>)
 800ca44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca48:	0800ca99 	.word	0x0800ca99
 800ca4c:	0800caad 	.word	0x0800caad
 800ca50:	0800cab7 	.word	0x0800cab7
 800ca54:	0800caa3 	.word	0x0800caa3
 800ca58:	0800cab7 	.word	0x0800cab7
 800ca5c:	0800ca7b 	.word	0x0800ca7b
 800ca60:	0800ca71 	.word	0x0800ca71
 800ca64:	0800cab7 	.word	0x0800cab7
 800ca68:	0800ca8f 	.word	0x0800ca8f
 800ca6c:	0800ca85 	.word	0x0800ca85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca70:	6839      	ldr	r1, [r7, #0]
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 f9dc 	bl	800ce30 <USBD_GetDescriptor>
          break;
 800ca78:	e022      	b.n	800cac0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca7a:	6839      	ldr	r1, [r7, #0]
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 fb3f 	bl	800d100 <USBD_SetAddress>
          break;
 800ca82:	e01d      	b.n	800cac0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ca84:	6839      	ldr	r1, [r7, #0]
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 fb7e 	bl	800d188 <USBD_SetConfig>
          break;
 800ca8c:	e018      	b.n	800cac0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 fc07 	bl	800d2a4 <USBD_GetConfig>
          break;
 800ca96:	e013      	b.n	800cac0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ca98:	6839      	ldr	r1, [r7, #0]
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 fc37 	bl	800d30e <USBD_GetStatus>
          break;
 800caa0:	e00e      	b.n	800cac0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800caa2:	6839      	ldr	r1, [r7, #0]
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 fc65 	bl	800d374 <USBD_SetFeature>
          break;
 800caaa:	e009      	b.n	800cac0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800caac:	6839      	ldr	r1, [r7, #0]
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 fc74 	bl	800d39c <USBD_ClrFeature>
          break;
 800cab4:	e004      	b.n	800cac0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800cab6:	6839      	ldr	r1, [r7, #0]
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 fccc 	bl	800d456 <USBD_CtlError>
          break;
 800cabe:	bf00      	nop
      }
      break;
 800cac0:	e004      	b.n	800cacc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800cac2:	6839      	ldr	r1, [r7, #0]
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fcc6 	bl	800d456 <USBD_CtlError>
      break;
 800caca:	bf00      	nop
  }

  return ret;
 800cacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3710      	adds	r7, #16
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop

0800cad8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cae2:	2300      	movs	r3, #0
 800cae4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800caee:	2b40      	cmp	r3, #64	; 0x40
 800caf0:	d005      	beq.n	800cafe <USBD_StdItfReq+0x26>
 800caf2:	2b40      	cmp	r3, #64	; 0x40
 800caf4:	d82e      	bhi.n	800cb54 <USBD_StdItfReq+0x7c>
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <USBD_StdItfReq+0x26>
 800cafa:	2b20      	cmp	r3, #32
 800cafc:	d12a      	bne.n	800cb54 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb04:	3b01      	subs	r3, #1
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	d81d      	bhi.n	800cb46 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	889b      	ldrh	r3, [r3, #4]
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d813      	bhi.n	800cb3c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	6839      	ldr	r1, [r7, #0]
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	4798      	blx	r3
 800cb22:	4603      	mov	r3, r0
 800cb24:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	88db      	ldrh	r3, [r3, #6]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d110      	bne.n	800cb50 <USBD_StdItfReq+0x78>
 800cb2e:	7bfb      	ldrb	r3, [r7, #15]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d10d      	bne.n	800cb50 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 fd56 	bl	800d5e6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cb3a:	e009      	b.n	800cb50 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800cb3c:	6839      	ldr	r1, [r7, #0]
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 fc89 	bl	800d456 <USBD_CtlError>
          break;
 800cb44:	e004      	b.n	800cb50 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800cb46:	6839      	ldr	r1, [r7, #0]
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 fc84 	bl	800d456 <USBD_CtlError>
          break;
 800cb4e:	e000      	b.n	800cb52 <USBD_StdItfReq+0x7a>
          break;
 800cb50:	bf00      	nop
      }
      break;
 800cb52:	e004      	b.n	800cb5e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800cb54:	6839      	ldr	r1, [r7, #0]
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fc7d 	bl	800d456 <USBD_CtlError>
      break;
 800cb5c:	bf00      	nop
  }

  return USBD_OK;
 800cb5e:	2300      	movs	r3, #0
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	889b      	ldrh	r3, [r3, #4]
 800cb7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb84:	2b40      	cmp	r3, #64	; 0x40
 800cb86:	d007      	beq.n	800cb98 <USBD_StdEPReq+0x30>
 800cb88:	2b40      	cmp	r3, #64	; 0x40
 800cb8a:	f200 8146 	bhi.w	800ce1a <USBD_StdEPReq+0x2b2>
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00a      	beq.n	800cba8 <USBD_StdEPReq+0x40>
 800cb92:	2b20      	cmp	r3, #32
 800cb94:	f040 8141 	bne.w	800ce1a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	6839      	ldr	r1, [r7, #0]
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	4798      	blx	r3
      break;
 800cba6:	e13d      	b.n	800ce24 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbb0:	2b20      	cmp	r3, #32
 800cbb2:	d10a      	bne.n	800cbca <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	6839      	ldr	r1, [r7, #0]
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	4798      	blx	r3
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800cbc6:	7bfb      	ldrb	r3, [r7, #15]
 800cbc8:	e12d      	b.n	800ce26 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	785b      	ldrb	r3, [r3, #1]
 800cbce:	2b03      	cmp	r3, #3
 800cbd0:	d007      	beq.n	800cbe2 <USBD_StdEPReq+0x7a>
 800cbd2:	2b03      	cmp	r3, #3
 800cbd4:	f300 811b 	bgt.w	800ce0e <USBD_StdEPReq+0x2a6>
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d072      	beq.n	800ccc2 <USBD_StdEPReq+0x15a>
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d03a      	beq.n	800cc56 <USBD_StdEPReq+0xee>
 800cbe0:	e115      	b.n	800ce0e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d002      	beq.n	800cbf2 <USBD_StdEPReq+0x8a>
 800cbec:	2b03      	cmp	r3, #3
 800cbee:	d015      	beq.n	800cc1c <USBD_StdEPReq+0xb4>
 800cbf0:	e02b      	b.n	800cc4a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbf2:	7bbb      	ldrb	r3, [r7, #14]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00c      	beq.n	800cc12 <USBD_StdEPReq+0xaa>
 800cbf8:	7bbb      	ldrb	r3, [r7, #14]
 800cbfa:	2b80      	cmp	r3, #128	; 0x80
 800cbfc:	d009      	beq.n	800cc12 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800cbfe:	7bbb      	ldrb	r3, [r7, #14]
 800cc00:	4619      	mov	r1, r3
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f001 f85e 	bl	800dcc4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800cc08:	2180      	movs	r1, #128	; 0x80
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f001 f85a 	bl	800dcc4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc10:	e020      	b.n	800cc54 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 fc1e 	bl	800d456 <USBD_CtlError>
              break;
 800cc1a:	e01b      	b.n	800cc54 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	885b      	ldrh	r3, [r3, #2]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10e      	bne.n	800cc42 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800cc24:	7bbb      	ldrb	r3, [r7, #14]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00b      	beq.n	800cc42 <USBD_StdEPReq+0xda>
 800cc2a:	7bbb      	ldrb	r3, [r7, #14]
 800cc2c:	2b80      	cmp	r3, #128	; 0x80
 800cc2e:	d008      	beq.n	800cc42 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	88db      	ldrh	r3, [r3, #6]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d104      	bne.n	800cc42 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800cc38:	7bbb      	ldrb	r3, [r7, #14]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f001 f841 	bl	800dcc4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 fccf 	bl	800d5e6 <USBD_CtlSendStatus>

              break;
 800cc48:	e004      	b.n	800cc54 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800cc4a:	6839      	ldr	r1, [r7, #0]
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fc02 	bl	800d456 <USBD_CtlError>
              break;
 800cc52:	bf00      	nop
          }
          break;
 800cc54:	e0e0      	b.n	800ce18 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d002      	beq.n	800cc66 <USBD_StdEPReq+0xfe>
 800cc60:	2b03      	cmp	r3, #3
 800cc62:	d015      	beq.n	800cc90 <USBD_StdEPReq+0x128>
 800cc64:	e026      	b.n	800ccb4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc66:	7bbb      	ldrb	r3, [r7, #14]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00c      	beq.n	800cc86 <USBD_StdEPReq+0x11e>
 800cc6c:	7bbb      	ldrb	r3, [r7, #14]
 800cc6e:	2b80      	cmp	r3, #128	; 0x80
 800cc70:	d009      	beq.n	800cc86 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800cc72:	7bbb      	ldrb	r3, [r7, #14]
 800cc74:	4619      	mov	r1, r3
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f001 f824 	bl	800dcc4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800cc7c:	2180      	movs	r1, #128	; 0x80
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f001 f820 	bl	800dcc4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc84:	e01c      	b.n	800ccc0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800cc86:	6839      	ldr	r1, [r7, #0]
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 fbe4 	bl	800d456 <USBD_CtlError>
              break;
 800cc8e:	e017      	b.n	800ccc0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	885b      	ldrh	r3, [r3, #2]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d112      	bne.n	800ccbe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc98:	7bbb      	ldrb	r3, [r7, #14]
 800cc9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d004      	beq.n	800ccac <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800cca2:	7bbb      	ldrb	r3, [r7, #14]
 800cca4:	4619      	mov	r1, r3
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f001 f82b 	bl	800dd02 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f000 fc9a 	bl	800d5e6 <USBD_CtlSendStatus>
              }
              break;
 800ccb2:	e004      	b.n	800ccbe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ccb4:	6839      	ldr	r1, [r7, #0]
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 fbcd 	bl	800d456 <USBD_CtlError>
              break;
 800ccbc:	e000      	b.n	800ccc0 <USBD_StdEPReq+0x158>
              break;
 800ccbe:	bf00      	nop
          }
          break;
 800ccc0:	e0aa      	b.n	800ce18 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d002      	beq.n	800ccd2 <USBD_StdEPReq+0x16a>
 800cccc:	2b03      	cmp	r3, #3
 800ccce:	d032      	beq.n	800cd36 <USBD_StdEPReq+0x1ce>
 800ccd0:	e097      	b.n	800ce02 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccd2:	7bbb      	ldrb	r3, [r7, #14]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d007      	beq.n	800cce8 <USBD_StdEPReq+0x180>
 800ccd8:	7bbb      	ldrb	r3, [r7, #14]
 800ccda:	2b80      	cmp	r3, #128	; 0x80
 800ccdc:	d004      	beq.n	800cce8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ccde:	6839      	ldr	r1, [r7, #0]
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 fbb8 	bl	800d456 <USBD_CtlError>
                break;
 800cce6:	e091      	b.n	800ce0c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	da0b      	bge.n	800cd08 <USBD_StdEPReq+0x1a0>
 800ccf0:	7bbb      	ldrb	r3, [r7, #14]
 800ccf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccf6:	4613      	mov	r3, r2
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	4413      	add	r3, r2
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	3310      	adds	r3, #16
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	4413      	add	r3, r2
 800cd04:	3304      	adds	r3, #4
 800cd06:	e00b      	b.n	800cd20 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd08:	7bbb      	ldrb	r3, [r7, #14]
 800cd0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd0e:	4613      	mov	r3, r2
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	4413      	add	r3, r2
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	3304      	adds	r3, #4
 800cd20:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	2200      	movs	r2, #0
 800cd26:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	2202      	movs	r2, #2
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fbfb 	bl	800d52a <USBD_CtlSendData>
              break;
 800cd34:	e06a      	b.n	800ce0c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cd36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	da11      	bge.n	800cd62 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd3e:	7bbb      	ldrb	r3, [r7, #14]
 800cd40:	f003 020f 	and.w	r2, r3, #15
 800cd44:	6879      	ldr	r1, [r7, #4]
 800cd46:	4613      	mov	r3, r2
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	4413      	add	r3, r2
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	440b      	add	r3, r1
 800cd50:	3318      	adds	r3, #24
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d117      	bne.n	800cd88 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800cd58:	6839      	ldr	r1, [r7, #0]
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 fb7b 	bl	800d456 <USBD_CtlError>
                  break;
 800cd60:	e054      	b.n	800ce0c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd62:	7bbb      	ldrb	r3, [r7, #14]
 800cd64:	f003 020f 	and.w	r2, r3, #15
 800cd68:	6879      	ldr	r1, [r7, #4]
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4413      	add	r3, r2
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	440b      	add	r3, r1
 800cd74:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d104      	bne.n	800cd88 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800cd7e:	6839      	ldr	r1, [r7, #0]
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 fb68 	bl	800d456 <USBD_CtlError>
                  break;
 800cd86:	e041      	b.n	800ce0c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	da0b      	bge.n	800cda8 <USBD_StdEPReq+0x240>
 800cd90:	7bbb      	ldrb	r3, [r7, #14]
 800cd92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd96:	4613      	mov	r3, r2
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	4413      	add	r3, r2
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	3310      	adds	r3, #16
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	4413      	add	r3, r2
 800cda4:	3304      	adds	r3, #4
 800cda6:	e00b      	b.n	800cdc0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cda8:	7bbb      	ldrb	r3, [r7, #14]
 800cdaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cdae:	4613      	mov	r3, r2
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	4413      	add	r3, r2
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	3304      	adds	r3, #4
 800cdc0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cdc2:	7bbb      	ldrb	r3, [r7, #14]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d002      	beq.n	800cdce <USBD_StdEPReq+0x266>
 800cdc8:	7bbb      	ldrb	r3, [r7, #14]
 800cdca:	2b80      	cmp	r3, #128	; 0x80
 800cdcc:	d103      	bne.n	800cdd6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	601a      	str	r2, [r3, #0]
 800cdd4:	e00e      	b.n	800cdf4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800cdd6:	7bbb      	ldrb	r3, [r7, #14]
 800cdd8:	4619      	mov	r1, r3
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 ffb0 	bl	800dd40 <USBD_LL_IsStallEP>
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d003      	beq.n	800cdee <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	2201      	movs	r2, #1
 800cdea:	601a      	str	r2, [r3, #0]
 800cdec:	e002      	b.n	800cdf4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	2202      	movs	r2, #2
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 fb95 	bl	800d52a <USBD_CtlSendData>
              break;
 800ce00:	e004      	b.n	800ce0c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ce02:	6839      	ldr	r1, [r7, #0]
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f000 fb26 	bl	800d456 <USBD_CtlError>
              break;
 800ce0a:	bf00      	nop
          }
          break;
 800ce0c:	e004      	b.n	800ce18 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ce0e:	6839      	ldr	r1, [r7, #0]
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 fb20 	bl	800d456 <USBD_CtlError>
          break;
 800ce16:	bf00      	nop
      }
      break;
 800ce18:	e004      	b.n	800ce24 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ce1a:	6839      	ldr	r1, [r7, #0]
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 fb1a 	bl	800d456 <USBD_CtlError>
      break;
 800ce22:	bf00      	nop
  }

  return ret;
 800ce24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
	...

0800ce30 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ce42:	2300      	movs	r3, #0
 800ce44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	885b      	ldrh	r3, [r3, #2]
 800ce4a:	0a1b      	lsrs	r3, r3, #8
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	2b06      	cmp	r3, #6
 800ce52:	f200 8128 	bhi.w	800d0a6 <USBD_GetDescriptor+0x276>
 800ce56:	a201      	add	r2, pc, #4	; (adr r2, 800ce5c <USBD_GetDescriptor+0x2c>)
 800ce58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce5c:	0800ce79 	.word	0x0800ce79
 800ce60:	0800ce91 	.word	0x0800ce91
 800ce64:	0800ced1 	.word	0x0800ced1
 800ce68:	0800d0a7 	.word	0x0800d0a7
 800ce6c:	0800d0a7 	.word	0x0800d0a7
 800ce70:	0800d047 	.word	0x0800d047
 800ce74:	0800d073 	.word	0x0800d073
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	7c12      	ldrb	r2, [r2, #16]
 800ce84:	f107 0108 	add.w	r1, r7, #8
 800ce88:	4610      	mov	r0, r2
 800ce8a:	4798      	blx	r3
 800ce8c:	60f8      	str	r0, [r7, #12]
      break;
 800ce8e:	e112      	b.n	800d0b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	7c1b      	ldrb	r3, [r3, #16]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10d      	bne.n	800ceb4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea0:	f107 0208 	add.w	r2, r7, #8
 800cea4:	4610      	mov	r0, r2
 800cea6:	4798      	blx	r3
 800cea8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	3301      	adds	r3, #1
 800ceae:	2202      	movs	r2, #2
 800ceb0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ceb2:	e100      	b.n	800d0b6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebc:	f107 0208 	add.w	r2, r7, #8
 800cec0:	4610      	mov	r0, r2
 800cec2:	4798      	blx	r3
 800cec4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	3301      	adds	r3, #1
 800ceca:	2202      	movs	r2, #2
 800cecc:	701a      	strb	r2, [r3, #0]
      break;
 800cece:	e0f2      	b.n	800d0b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	885b      	ldrh	r3, [r3, #2]
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	2b05      	cmp	r3, #5
 800ced8:	f200 80ac 	bhi.w	800d034 <USBD_GetDescriptor+0x204>
 800cedc:	a201      	add	r2, pc, #4	; (adr r2, 800cee4 <USBD_GetDescriptor+0xb4>)
 800cede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee2:	bf00      	nop
 800cee4:	0800cefd 	.word	0x0800cefd
 800cee8:	0800cf31 	.word	0x0800cf31
 800ceec:	0800cf65 	.word	0x0800cf65
 800cef0:	0800cf99 	.word	0x0800cf99
 800cef4:	0800cfcd 	.word	0x0800cfcd
 800cef8:	0800d001 	.word	0x0800d001
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00b      	beq.n	800cf20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	7c12      	ldrb	r2, [r2, #16]
 800cf14:	f107 0108 	add.w	r1, r7, #8
 800cf18:	4610      	mov	r0, r2
 800cf1a:	4798      	blx	r3
 800cf1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf1e:	e091      	b.n	800d044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf20:	6839      	ldr	r1, [r7, #0]
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fa97 	bl	800d456 <USBD_CtlError>
            err++;
 800cf28:	7afb      	ldrb	r3, [r7, #11]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf2e:	e089      	b.n	800d044 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d00b      	beq.n	800cf54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	7c12      	ldrb	r2, [r2, #16]
 800cf48:	f107 0108 	add.w	r1, r7, #8
 800cf4c:	4610      	mov	r0, r2
 800cf4e:	4798      	blx	r3
 800cf50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf52:	e077      	b.n	800d044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf54:	6839      	ldr	r1, [r7, #0]
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 fa7d 	bl	800d456 <USBD_CtlError>
            err++;
 800cf5c:	7afb      	ldrb	r3, [r7, #11]
 800cf5e:	3301      	adds	r3, #1
 800cf60:	72fb      	strb	r3, [r7, #11]
          break;
 800cf62:	e06f      	b.n	800d044 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf6a:	68db      	ldr	r3, [r3, #12]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00b      	beq.n	800cf88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	7c12      	ldrb	r2, [r2, #16]
 800cf7c:	f107 0108 	add.w	r1, r7, #8
 800cf80:	4610      	mov	r0, r2
 800cf82:	4798      	blx	r3
 800cf84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf86:	e05d      	b.n	800d044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f000 fa63 	bl	800d456 <USBD_CtlError>
            err++;
 800cf90:	7afb      	ldrb	r3, [r7, #11]
 800cf92:	3301      	adds	r3, #1
 800cf94:	72fb      	strb	r3, [r7, #11]
          break;
 800cf96:	e055      	b.n	800d044 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00b      	beq.n	800cfbc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cfaa:	691b      	ldr	r3, [r3, #16]
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	7c12      	ldrb	r2, [r2, #16]
 800cfb0:	f107 0108 	add.w	r1, r7, #8
 800cfb4:	4610      	mov	r0, r2
 800cfb6:	4798      	blx	r3
 800cfb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfba:	e043      	b.n	800d044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cfbc:	6839      	ldr	r1, [r7, #0]
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 fa49 	bl	800d456 <USBD_CtlError>
            err++;
 800cfc4:	7afb      	ldrb	r3, [r7, #11]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	72fb      	strb	r3, [r7, #11]
          break;
 800cfca:	e03b      	b.n	800d044 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cfd2:	695b      	ldr	r3, [r3, #20]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d00b      	beq.n	800cff0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cfde:	695b      	ldr	r3, [r3, #20]
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	7c12      	ldrb	r2, [r2, #16]
 800cfe4:	f107 0108 	add.w	r1, r7, #8
 800cfe8:	4610      	mov	r0, r2
 800cfea:	4798      	blx	r3
 800cfec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfee:	e029      	b.n	800d044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cff0:	6839      	ldr	r1, [r7, #0]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 fa2f 	bl	800d456 <USBD_CtlError>
            err++;
 800cff8:	7afb      	ldrb	r3, [r7, #11]
 800cffa:	3301      	adds	r3, #1
 800cffc:	72fb      	strb	r3, [r7, #11]
          break;
 800cffe:	e021      	b.n	800d044 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d006:	699b      	ldr	r3, [r3, #24]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00b      	beq.n	800d024 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d012:	699b      	ldr	r3, [r3, #24]
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	7c12      	ldrb	r2, [r2, #16]
 800d018:	f107 0108 	add.w	r1, r7, #8
 800d01c:	4610      	mov	r0, r2
 800d01e:	4798      	blx	r3
 800d020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d022:	e00f      	b.n	800d044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d024:	6839      	ldr	r1, [r7, #0]
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 fa15 	bl	800d456 <USBD_CtlError>
            err++;
 800d02c:	7afb      	ldrb	r3, [r7, #11]
 800d02e:	3301      	adds	r3, #1
 800d030:	72fb      	strb	r3, [r7, #11]
          break;
 800d032:	e007      	b.n	800d044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800d034:	6839      	ldr	r1, [r7, #0]
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 fa0d 	bl	800d456 <USBD_CtlError>
          err++;
 800d03c:	7afb      	ldrb	r3, [r7, #11]
 800d03e:	3301      	adds	r3, #1
 800d040:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800d042:	e038      	b.n	800d0b6 <USBD_GetDescriptor+0x286>
 800d044:	e037      	b.n	800d0b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	7c1b      	ldrb	r3, [r3, #16]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d109      	bne.n	800d062 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d056:	f107 0208 	add.w	r2, r7, #8
 800d05a:	4610      	mov	r0, r2
 800d05c:	4798      	blx	r3
 800d05e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d060:	e029      	b.n	800d0b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d062:	6839      	ldr	r1, [r7, #0]
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 f9f6 	bl	800d456 <USBD_CtlError>
        err++;
 800d06a:	7afb      	ldrb	r3, [r7, #11]
 800d06c:	3301      	adds	r3, #1
 800d06e:	72fb      	strb	r3, [r7, #11]
      break;
 800d070:	e021      	b.n	800d0b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	7c1b      	ldrb	r3, [r3, #16]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d10d      	bne.n	800d096 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d082:	f107 0208 	add.w	r2, r7, #8
 800d086:	4610      	mov	r0, r2
 800d088:	4798      	blx	r3
 800d08a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	3301      	adds	r3, #1
 800d090:	2207      	movs	r2, #7
 800d092:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d094:	e00f      	b.n	800d0b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d096:	6839      	ldr	r1, [r7, #0]
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 f9dc 	bl	800d456 <USBD_CtlError>
        err++;
 800d09e:	7afb      	ldrb	r3, [r7, #11]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	72fb      	strb	r3, [r7, #11]
      break;
 800d0a4:	e007      	b.n	800d0b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d0a6:	6839      	ldr	r1, [r7, #0]
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 f9d4 	bl	800d456 <USBD_CtlError>
      err++;
 800d0ae:	7afb      	ldrb	r3, [r7, #11]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	72fb      	strb	r3, [r7, #11]
      break;
 800d0b4:	bf00      	nop
  }

  if (err != 0U)
 800d0b6:	7afb      	ldrb	r3, [r7, #11]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d11c      	bne.n	800d0f6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d0bc:	893b      	ldrh	r3, [r7, #8]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d011      	beq.n	800d0e6 <USBD_GetDescriptor+0x2b6>
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	88db      	ldrh	r3, [r3, #6]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00d      	beq.n	800d0e6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	88da      	ldrh	r2, [r3, #6]
 800d0ce:	893b      	ldrh	r3, [r7, #8]
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	bf28      	it	cs
 800d0d4:	4613      	movcs	r3, r2
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d0da:	893b      	ldrh	r3, [r7, #8]
 800d0dc:	461a      	mov	r2, r3
 800d0de:	68f9      	ldr	r1, [r7, #12]
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 fa22 	bl	800d52a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	88db      	ldrh	r3, [r3, #6]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d104      	bne.n	800d0f8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 fa79 	bl	800d5e6 <USBD_CtlSendStatus>
 800d0f4:	e000      	b.n	800d0f8 <USBD_GetDescriptor+0x2c8>
    return;
 800d0f6:	bf00      	nop
    }
  }
}
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop

0800d100 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	889b      	ldrh	r3, [r3, #4]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d130      	bne.n	800d174 <USBD_SetAddress+0x74>
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	88db      	ldrh	r3, [r3, #6]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d12c      	bne.n	800d174 <USBD_SetAddress+0x74>
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	885b      	ldrh	r3, [r3, #2]
 800d11e:	2b7f      	cmp	r3, #127	; 0x7f
 800d120:	d828      	bhi.n	800d174 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	885b      	ldrh	r3, [r3, #2]
 800d126:	b2db      	uxtb	r3, r3
 800d128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d12c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d134:	2b03      	cmp	r3, #3
 800d136:	d104      	bne.n	800d142 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d138:	6839      	ldr	r1, [r7, #0]
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f000 f98b 	bl	800d456 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d140:	e01d      	b.n	800d17e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	7bfa      	ldrb	r2, [r7, #15]
 800d146:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d14a:	7bfb      	ldrb	r3, [r7, #15]
 800d14c:	4619      	mov	r1, r3
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 fe22 	bl	800dd98 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 fa46 	bl	800d5e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d15a:	7bfb      	ldrb	r3, [r7, #15]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d004      	beq.n	800d16a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2202      	movs	r2, #2
 800d164:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d168:	e009      	b.n	800d17e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2201      	movs	r2, #1
 800d16e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d172:	e004      	b.n	800d17e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d174:	6839      	ldr	r1, [r7, #0]
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 f96d 	bl	800d456 <USBD_CtlError>
  }
}
 800d17c:	bf00      	nop
 800d17e:	bf00      	nop
 800d180:	3710      	adds	r7, #16
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
	...

0800d188 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	885b      	ldrh	r3, [r3, #2]
 800d196:	b2da      	uxtb	r2, r3
 800d198:	4b41      	ldr	r3, [pc, #260]	; (800d2a0 <USBD_SetConfig+0x118>)
 800d19a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d19c:	4b40      	ldr	r3, [pc, #256]	; (800d2a0 <USBD_SetConfig+0x118>)
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d904      	bls.n	800d1ae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d1a4:	6839      	ldr	r1, [r7, #0]
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 f955 	bl	800d456 <USBD_CtlError>
 800d1ac:	e075      	b.n	800d29a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	d002      	beq.n	800d1be <USBD_SetConfig+0x36>
 800d1b8:	2b03      	cmp	r3, #3
 800d1ba:	d023      	beq.n	800d204 <USBD_SetConfig+0x7c>
 800d1bc:	e062      	b.n	800d284 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d1be:	4b38      	ldr	r3, [pc, #224]	; (800d2a0 <USBD_SetConfig+0x118>)
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d01a      	beq.n	800d1fc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800d1c6:	4b36      	ldr	r3, [pc, #216]	; (800d2a0 <USBD_SetConfig+0x118>)
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2203      	movs	r2, #3
 800d1d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d1d8:	4b31      	ldr	r3, [pc, #196]	; (800d2a0 <USBD_SetConfig+0x118>)
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7ff f9e8 	bl	800c5b4 <USBD_SetClassConfig>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b02      	cmp	r3, #2
 800d1e8:	d104      	bne.n	800d1f4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800d1ea:	6839      	ldr	r1, [r7, #0]
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 f932 	bl	800d456 <USBD_CtlError>
            return;
 800d1f2:	e052      	b.n	800d29a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 f9f6 	bl	800d5e6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d1fa:	e04e      	b.n	800d29a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 f9f2 	bl	800d5e6 <USBD_CtlSendStatus>
        break;
 800d202:	e04a      	b.n	800d29a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d204:	4b26      	ldr	r3, [pc, #152]	; (800d2a0 <USBD_SetConfig+0x118>)
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d112      	bne.n	800d232 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2202      	movs	r2, #2
 800d210:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800d214:	4b22      	ldr	r3, [pc, #136]	; (800d2a0 <USBD_SetConfig+0x118>)
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	461a      	mov	r2, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d21e:	4b20      	ldr	r3, [pc, #128]	; (800d2a0 <USBD_SetConfig+0x118>)
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	4619      	mov	r1, r3
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f7ff f9e4 	bl	800c5f2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 f9db 	bl	800d5e6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d230:	e033      	b.n	800d29a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800d232:	4b1b      	ldr	r3, [pc, #108]	; (800d2a0 <USBD_SetConfig+0x118>)
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	461a      	mov	r2, r3
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d01d      	beq.n	800d27c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	b2db      	uxtb	r3, r3
 800d246:	4619      	mov	r1, r3
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f7ff f9d2 	bl	800c5f2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d24e:	4b14      	ldr	r3, [pc, #80]	; (800d2a0 <USBD_SetConfig+0x118>)
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	461a      	mov	r2, r3
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d258:	4b11      	ldr	r3, [pc, #68]	; (800d2a0 <USBD_SetConfig+0x118>)
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	4619      	mov	r1, r3
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f7ff f9a8 	bl	800c5b4 <USBD_SetClassConfig>
 800d264:	4603      	mov	r3, r0
 800d266:	2b02      	cmp	r3, #2
 800d268:	d104      	bne.n	800d274 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800d26a:	6839      	ldr	r1, [r7, #0]
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 f8f2 	bl	800d456 <USBD_CtlError>
            return;
 800d272:	e012      	b.n	800d29a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 f9b6 	bl	800d5e6 <USBD_CtlSendStatus>
        break;
 800d27a:	e00e      	b.n	800d29a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 f9b2 	bl	800d5e6 <USBD_CtlSendStatus>
        break;
 800d282:	e00a      	b.n	800d29a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800d284:	6839      	ldr	r1, [r7, #0]
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 f8e5 	bl	800d456 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d28c:	4b04      	ldr	r3, [pc, #16]	; (800d2a0 <USBD_SetConfig+0x118>)
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	4619      	mov	r1, r3
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f7ff f9ad 	bl	800c5f2 <USBD_ClrClassConfig>
        break;
 800d298:	bf00      	nop
    }
  }
}
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	20000ea8 	.word	0x20000ea8

0800d2a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	88db      	ldrh	r3, [r3, #6]
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d004      	beq.n	800d2c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d2b6:	6839      	ldr	r1, [r7, #0]
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 f8cc 	bl	800d456 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d2be:	e022      	b.n	800d306 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	dc02      	bgt.n	800d2d0 <USBD_GetConfig+0x2c>
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	dc03      	bgt.n	800d2d6 <USBD_GetConfig+0x32>
 800d2ce:	e015      	b.n	800d2fc <USBD_GetConfig+0x58>
 800d2d0:	2b03      	cmp	r3, #3
 800d2d2:	d00b      	beq.n	800d2ec <USBD_GetConfig+0x48>
 800d2d4:	e012      	b.n	800d2fc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	3308      	adds	r3, #8
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 f920 	bl	800d52a <USBD_CtlSendData>
        break;
 800d2ea:	e00c      	b.n	800d306 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	3304      	adds	r3, #4
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 f918 	bl	800d52a <USBD_CtlSendData>
        break;
 800d2fa:	e004      	b.n	800d306 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800d2fc:	6839      	ldr	r1, [r7, #0]
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 f8a9 	bl	800d456 <USBD_CtlError>
        break;
 800d304:	bf00      	nop
}
 800d306:	bf00      	nop
 800d308:	3708      	adds	r7, #8
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	b082      	sub	sp, #8
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
 800d316:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d31e:	3b01      	subs	r3, #1
 800d320:	2b02      	cmp	r3, #2
 800d322:	d81e      	bhi.n	800d362 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	88db      	ldrh	r3, [r3, #6]
 800d328:	2b02      	cmp	r3, #2
 800d32a:	d004      	beq.n	800d336 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800d32c:	6839      	ldr	r1, [r7, #0]
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 f891 	bl	800d456 <USBD_CtlError>
        break;
 800d334:	e01a      	b.n	800d36c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2201      	movs	r2, #1
 800d33a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d342:	2b00      	cmp	r3, #0
 800d344:	d005      	beq.n	800d352 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	f043 0202 	orr.w	r2, r3, #2
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	330c      	adds	r3, #12
 800d356:	2202      	movs	r2, #2
 800d358:	4619      	mov	r1, r3
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f8e5 	bl	800d52a <USBD_CtlSendData>
      break;
 800d360:	e004      	b.n	800d36c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800d362:	6839      	ldr	r1, [r7, #0]
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 f876 	bl	800d456 <USBD_CtlError>
      break;
 800d36a:	bf00      	nop
  }
}
 800d36c:	bf00      	nop
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	885b      	ldrh	r3, [r3, #2]
 800d382:	2b01      	cmp	r3, #1
 800d384:	d106      	bne.n	800d394 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2201      	movs	r2, #1
 800d38a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 f929 	bl	800d5e6 <USBD_CtlSendStatus>
  }
}
 800d394:	bf00      	nop
 800d396:	3708      	adds	r7, #8
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3ac:	3b01      	subs	r3, #1
 800d3ae:	2b02      	cmp	r3, #2
 800d3b0:	d80b      	bhi.n	800d3ca <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	885b      	ldrh	r3, [r3, #2]
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d10c      	bne.n	800d3d4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 f90f 	bl	800d5e6 <USBD_CtlSendStatus>
      }
      break;
 800d3c8:	e004      	b.n	800d3d4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 f842 	bl	800d456 <USBD_CtlError>
      break;
 800d3d2:	e000      	b.n	800d3d6 <USBD_ClrFeature+0x3a>
      break;
 800d3d4:	bf00      	nop
  }
}
 800d3d6:	bf00      	nop
 800d3d8:	3708      	adds	r7, #8
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d3de:	b480      	push	{r7}
 800d3e0:	b083      	sub	sp, #12
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
 800d3e6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	781a      	ldrb	r2, [r3, #0]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	785a      	ldrb	r2, [r3, #1]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	3302      	adds	r3, #2
 800d3fc:	781b      	ldrb	r3, [r3, #0]
 800d3fe:	b29a      	uxth	r2, r3
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	3303      	adds	r3, #3
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	b29b      	uxth	r3, r3
 800d408:	021b      	lsls	r3, r3, #8
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	4413      	add	r3, r2
 800d40e:	b29a      	uxth	r2, r3
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	3304      	adds	r3, #4
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	b29a      	uxth	r2, r3
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	3305      	adds	r3, #5
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	b29b      	uxth	r3, r3
 800d424:	021b      	lsls	r3, r3, #8
 800d426:	b29b      	uxth	r3, r3
 800d428:	4413      	add	r3, r2
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	3306      	adds	r3, #6
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	b29a      	uxth	r2, r3
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	3307      	adds	r3, #7
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	b29b      	uxth	r3, r3
 800d440:	021b      	lsls	r3, r3, #8
 800d442:	b29b      	uxth	r3, r3
 800d444:	4413      	add	r3, r2
 800d446:	b29a      	uxth	r2, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	80da      	strh	r2, [r3, #6]

}
 800d44c:	bf00      	nop
 800d44e:	370c      	adds	r7, #12
 800d450:	46bd      	mov	sp, r7
 800d452:	bc80      	pop	{r7}
 800d454:	4770      	bx	lr

0800d456 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b082      	sub	sp, #8
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
 800d45e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d460:	2180      	movs	r1, #128	; 0x80
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 fc2e 	bl	800dcc4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d468:	2100      	movs	r1, #0
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 fc2a 	bl	800dcc4 <USBD_LL_StallEP>
}
 800d470:	bf00      	nop
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b086      	sub	sp, #24
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d484:	2300      	movs	r3, #0
 800d486:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d032      	beq.n	800d4f4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d48e:	68f8      	ldr	r0, [r7, #12]
 800d490:	f000 f834 	bl	800d4fc <USBD_GetLen>
 800d494:	4603      	mov	r3, r0
 800d496:	3301      	adds	r3, #1
 800d498:	b29b      	uxth	r3, r3
 800d49a:	005b      	lsls	r3, r3, #1
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d4a2:	7dfb      	ldrb	r3, [r7, #23]
 800d4a4:	1c5a      	adds	r2, r3, #1
 800d4a6:	75fa      	strb	r2, [r7, #23]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	7812      	ldrb	r2, [r2, #0]
 800d4b2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d4b4:	7dfb      	ldrb	r3, [r7, #23]
 800d4b6:	1c5a      	adds	r2, r3, #1
 800d4b8:	75fa      	strb	r2, [r7, #23]
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	4413      	add	r3, r2
 800d4c0:	2203      	movs	r2, #3
 800d4c2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d4c4:	e012      	b.n	800d4ec <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	1c5a      	adds	r2, r3, #1
 800d4ca:	60fa      	str	r2, [r7, #12]
 800d4cc:	7dfa      	ldrb	r2, [r7, #23]
 800d4ce:	1c51      	adds	r1, r2, #1
 800d4d0:	75f9      	strb	r1, [r7, #23]
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	68ba      	ldr	r2, [r7, #8]
 800d4d6:	440a      	add	r2, r1
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d4dc:	7dfb      	ldrb	r3, [r7, #23]
 800d4de:	1c5a      	adds	r2, r3, #1
 800d4e0:	75fa      	strb	r2, [r7, #23]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d1e8      	bne.n	800d4c6 <USBD_GetString+0x4e>
    }
  }
}
 800d4f4:	bf00      	nop
 800d4f6:	3718      	adds	r7, #24
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b085      	sub	sp, #20
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d504:	2300      	movs	r3, #0
 800d506:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800d508:	e005      	b.n	800d516 <USBD_GetLen+0x1a>
  {
    len++;
 800d50a:	7bfb      	ldrb	r3, [r7, #15]
 800d50c:	3301      	adds	r3, #1
 800d50e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	3301      	adds	r3, #1
 800d514:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d1f5      	bne.n	800d50a <USBD_GetLen+0xe>
  }

  return len;
 800d51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d520:	4618      	mov	r0, r3
 800d522:	3714      	adds	r7, #20
 800d524:	46bd      	mov	sp, r7
 800d526:	bc80      	pop	{r7}
 800d528:	4770      	bx	lr

0800d52a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b084      	sub	sp, #16
 800d52e:	af00      	add	r7, sp, #0
 800d530:	60f8      	str	r0, [r7, #12]
 800d532:	60b9      	str	r1, [r7, #8]
 800d534:	4613      	mov	r3, r2
 800d536:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2202      	movs	r2, #2
 800d53c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d540:	88fa      	ldrh	r2, [r7, #6]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d546:	88fa      	ldrh	r2, [r7, #6]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d54c:	88fb      	ldrh	r3, [r7, #6]
 800d54e:	68ba      	ldr	r2, [r7, #8]
 800d550:	2100      	movs	r1, #0
 800d552:	68f8      	ldr	r0, [r7, #12]
 800d554:	f000 fc3f 	bl	800ddd6 <USBD_LL_Transmit>

  return USBD_OK;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b084      	sub	sp, #16
 800d566:	af00      	add	r7, sp, #0
 800d568:	60f8      	str	r0, [r7, #12]
 800d56a:	60b9      	str	r1, [r7, #8]
 800d56c:	4613      	mov	r3, r2
 800d56e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d570:	88fb      	ldrh	r3, [r7, #6]
 800d572:	68ba      	ldr	r2, [r7, #8]
 800d574:	2100      	movs	r1, #0
 800d576:	68f8      	ldr	r0, [r7, #12]
 800d578:	f000 fc2d 	bl	800ddd6 <USBD_LL_Transmit>

  return USBD_OK;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3710      	adds	r7, #16
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b084      	sub	sp, #16
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	60f8      	str	r0, [r7, #12]
 800d58e:	60b9      	str	r1, [r7, #8]
 800d590:	4613      	mov	r3, r2
 800d592:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2203      	movs	r2, #3
 800d598:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d59c:	88fa      	ldrh	r2, [r7, #6]
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800d5a4:	88fa      	ldrh	r2, [r7, #6]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d5ac:	88fb      	ldrh	r3, [r7, #6]
 800d5ae:	68ba      	ldr	r2, [r7, #8]
 800d5b0:	2100      	movs	r1, #0
 800d5b2:	68f8      	ldr	r0, [r7, #12]
 800d5b4:	f000 fc32 	bl	800de1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d5b8:	2300      	movs	r3, #0
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b084      	sub	sp, #16
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	60f8      	str	r0, [r7, #12]
 800d5ca:	60b9      	str	r1, [r7, #8]
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d5d0:	88fb      	ldrh	r3, [r7, #6]
 800d5d2:	68ba      	ldr	r2, [r7, #8]
 800d5d4:	2100      	movs	r1, #0
 800d5d6:	68f8      	ldr	r0, [r7, #12]
 800d5d8:	f000 fc20 	bl	800de1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3710      	adds	r7, #16
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b082      	sub	sp, #8
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2204      	movs	r2, #4
 800d5f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f000 fbea 	bl	800ddd6 <USBD_LL_Transmit>

  return USBD_OK;
 800d602:	2300      	movs	r3, #0
}
 800d604:	4618      	mov	r0, r3
 800d606:	3708      	adds	r7, #8
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2205      	movs	r2, #5
 800d618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d61c:	2300      	movs	r3, #0
 800d61e:	2200      	movs	r2, #0
 800d620:	2100      	movs	r1, #0
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 fbfa 	bl	800de1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d628:	2300      	movs	r3, #0
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3708      	adds	r7, #8
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
	...

0800d634 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d638:	2200      	movs	r2, #0
 800d63a:	4912      	ldr	r1, [pc, #72]	; (800d684 <MX_USB_DEVICE_Init+0x50>)
 800d63c:	4812      	ldr	r0, [pc, #72]	; (800d688 <MX_USB_DEVICE_Init+0x54>)
 800d63e:	f7fe ff5f 	bl	800c500 <USBD_Init>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d001      	beq.n	800d64c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d648:	f7f6 fa50 	bl	8003aec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d64c:	490f      	ldr	r1, [pc, #60]	; (800d68c <MX_USB_DEVICE_Init+0x58>)
 800d64e:	480e      	ldr	r0, [pc, #56]	; (800d688 <MX_USB_DEVICE_Init+0x54>)
 800d650:	f7fe ff81 	bl	800c556 <USBD_RegisterClass>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d001      	beq.n	800d65e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d65a:	f7f6 fa47 	bl	8003aec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d65e:	490c      	ldr	r1, [pc, #48]	; (800d690 <MX_USB_DEVICE_Init+0x5c>)
 800d660:	4809      	ldr	r0, [pc, #36]	; (800d688 <MX_USB_DEVICE_Init+0x54>)
 800d662:	f7fe fee1 	bl	800c428 <USBD_CDC_RegisterInterface>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d001      	beq.n	800d670 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d66c:	f7f6 fa3e 	bl	8003aec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d670:	4805      	ldr	r0, [pc, #20]	; (800d688 <MX_USB_DEVICE_Init+0x54>)
 800d672:	f7fe ff89 	bl	800c588 <USBD_Start>
 800d676:	4603      	mov	r3, r0
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d001      	beq.n	800d680 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d67c:	f7f6 fa36 	bl	8003aec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d680:	bf00      	nop
 800d682:	bd80      	pop	{r7, pc}
 800d684:	20000180 	.word	0x20000180
 800d688:	20003844 	.word	0x20003844
 800d68c:	2000006c 	.word	0x2000006c
 800d690:	20000170 	.word	0x20000170

0800d694 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d698:	2200      	movs	r2, #0
 800d69a:	4905      	ldr	r1, [pc, #20]	; (800d6b0 <CDC_Init_FS+0x1c>)
 800d69c:	4805      	ldr	r0, [pc, #20]	; (800d6b4 <CDC_Init_FS+0x20>)
 800d69e:	f7fe fed9 	bl	800c454 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d6a2:	4905      	ldr	r1, [pc, #20]	; (800d6b8 <CDC_Init_FS+0x24>)
 800d6a4:	4803      	ldr	r0, [pc, #12]	; (800d6b4 <CDC_Init_FS+0x20>)
 800d6a6:	f7fe feee 	bl	800c486 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d6aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	20003f08 	.word	0x20003f08
 800d6b4:	20003844 	.word	0x20003844
 800d6b8:	20003b08 	.word	0x20003b08

0800d6bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d6c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bc80      	pop	{r7}
 800d6c8:	4770      	bx	lr
	...

0800d6cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	6039      	str	r1, [r7, #0]
 800d6d6:	71fb      	strb	r3, [r7, #7]
 800d6d8:	4613      	mov	r3, r2
 800d6da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d6dc:	79fb      	ldrb	r3, [r7, #7]
 800d6de:	2b23      	cmp	r3, #35	; 0x23
 800d6e0:	d84a      	bhi.n	800d778 <CDC_Control_FS+0xac>
 800d6e2:	a201      	add	r2, pc, #4	; (adr r2, 800d6e8 <CDC_Control_FS+0x1c>)
 800d6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e8:	0800d779 	.word	0x0800d779
 800d6ec:	0800d779 	.word	0x0800d779
 800d6f0:	0800d779 	.word	0x0800d779
 800d6f4:	0800d779 	.word	0x0800d779
 800d6f8:	0800d779 	.word	0x0800d779
 800d6fc:	0800d779 	.word	0x0800d779
 800d700:	0800d779 	.word	0x0800d779
 800d704:	0800d779 	.word	0x0800d779
 800d708:	0800d779 	.word	0x0800d779
 800d70c:	0800d779 	.word	0x0800d779
 800d710:	0800d779 	.word	0x0800d779
 800d714:	0800d779 	.word	0x0800d779
 800d718:	0800d779 	.word	0x0800d779
 800d71c:	0800d779 	.word	0x0800d779
 800d720:	0800d779 	.word	0x0800d779
 800d724:	0800d779 	.word	0x0800d779
 800d728:	0800d779 	.word	0x0800d779
 800d72c:	0800d779 	.word	0x0800d779
 800d730:	0800d779 	.word	0x0800d779
 800d734:	0800d779 	.word	0x0800d779
 800d738:	0800d779 	.word	0x0800d779
 800d73c:	0800d779 	.word	0x0800d779
 800d740:	0800d779 	.word	0x0800d779
 800d744:	0800d779 	.word	0x0800d779
 800d748:	0800d779 	.word	0x0800d779
 800d74c:	0800d779 	.word	0x0800d779
 800d750:	0800d779 	.word	0x0800d779
 800d754:	0800d779 	.word	0x0800d779
 800d758:	0800d779 	.word	0x0800d779
 800d75c:	0800d779 	.word	0x0800d779
 800d760:	0800d779 	.word	0x0800d779
 800d764:	0800d779 	.word	0x0800d779
 800d768:	0800d779 	.word	0x0800d779
 800d76c:	0800d779 	.word	0x0800d779
 800d770:	0800d779 	.word	0x0800d779
 800d774:	0800d779 	.word	0x0800d779
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d778:	bf00      	nop
  }

  return (USBD_OK);
 800d77a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	bc80      	pop	{r7}
 800d784:	4770      	bx	lr
 800d786:	bf00      	nop

0800d788 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d792:	6879      	ldr	r1, [r7, #4]
 800d794:	4805      	ldr	r0, [pc, #20]	; (800d7ac <CDC_Receive_FS+0x24>)
 800d796:	f7fe fe76 	bl	800c486 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d79a:	4804      	ldr	r0, [pc, #16]	; (800d7ac <CDC_Receive_FS+0x24>)
 800d79c:	f7fe fe86 	bl	800c4ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d7a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3708      	adds	r7, #8
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	20003844 	.word	0x20003844

0800d7b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	6039      	str	r1, [r7, #0]
 800d7ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	2212      	movs	r2, #18
 800d7c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d7c2:	4b03      	ldr	r3, [pc, #12]	; (800d7d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	370c      	adds	r7, #12
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bc80      	pop	{r7}
 800d7cc:	4770      	bx	lr
 800d7ce:	bf00      	nop
 800d7d0:	2000019c 	.word	0x2000019c

0800d7d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	4603      	mov	r3, r0
 800d7dc:	6039      	str	r1, [r7, #0]
 800d7de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	2204      	movs	r2, #4
 800d7e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d7e6:	4b03      	ldr	r3, [pc, #12]	; (800d7f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	370c      	adds	r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bc80      	pop	{r7}
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	200001b0 	.word	0x200001b0

0800d7f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	4603      	mov	r3, r0
 800d800:	6039      	str	r1, [r7, #0]
 800d802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d804:	79fb      	ldrb	r3, [r7, #7]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d105      	bne.n	800d816 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d80a:	683a      	ldr	r2, [r7, #0]
 800d80c:	4907      	ldr	r1, [pc, #28]	; (800d82c <USBD_FS_ProductStrDescriptor+0x34>)
 800d80e:	4808      	ldr	r0, [pc, #32]	; (800d830 <USBD_FS_ProductStrDescriptor+0x38>)
 800d810:	f7ff fe32 	bl	800d478 <USBD_GetString>
 800d814:	e004      	b.n	800d820 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d816:	683a      	ldr	r2, [r7, #0]
 800d818:	4904      	ldr	r1, [pc, #16]	; (800d82c <USBD_FS_ProductStrDescriptor+0x34>)
 800d81a:	4805      	ldr	r0, [pc, #20]	; (800d830 <USBD_FS_ProductStrDescriptor+0x38>)
 800d81c:	f7ff fe2c 	bl	800d478 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d820:	4b02      	ldr	r3, [pc, #8]	; (800d82c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d822:	4618      	mov	r0, r3
 800d824:	3708      	adds	r7, #8
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	20004308 	.word	0x20004308
 800d830:	08015fa0 	.word	0x08015fa0

0800d834 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	4603      	mov	r3, r0
 800d83c:	6039      	str	r1, [r7, #0]
 800d83e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d840:	683a      	ldr	r2, [r7, #0]
 800d842:	4904      	ldr	r1, [pc, #16]	; (800d854 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d844:	4804      	ldr	r0, [pc, #16]	; (800d858 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d846:	f7ff fe17 	bl	800d478 <USBD_GetString>
  return USBD_StrDesc;
 800d84a:	4b02      	ldr	r3, [pc, #8]	; (800d854 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	20004308 	.word	0x20004308
 800d858:	08015fb8 	.word	0x08015fb8

0800d85c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	4603      	mov	r3, r0
 800d864:	6039      	str	r1, [r7, #0]
 800d866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	221a      	movs	r2, #26
 800d86c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d86e:	f000 f843 	bl	800d8f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d872:	4b02      	ldr	r3, [pc, #8]	; (800d87c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d874:	4618      	mov	r0, r3
 800d876:	3708      	adds	r7, #8
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	200001b4 	.word	0x200001b4

0800d880 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	4603      	mov	r3, r0
 800d888:	6039      	str	r1, [r7, #0]
 800d88a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d88c:	79fb      	ldrb	r3, [r7, #7]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d105      	bne.n	800d89e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d892:	683a      	ldr	r2, [r7, #0]
 800d894:	4907      	ldr	r1, [pc, #28]	; (800d8b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d896:	4808      	ldr	r0, [pc, #32]	; (800d8b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d898:	f7ff fdee 	bl	800d478 <USBD_GetString>
 800d89c:	e004      	b.n	800d8a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d89e:	683a      	ldr	r2, [r7, #0]
 800d8a0:	4904      	ldr	r1, [pc, #16]	; (800d8b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d8a2:	4805      	ldr	r0, [pc, #20]	; (800d8b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d8a4:	f7ff fde8 	bl	800d478 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8a8:	4b02      	ldr	r3, [pc, #8]	; (800d8b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3708      	adds	r7, #8
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	bf00      	nop
 800d8b4:	20004308 	.word	0x20004308
 800d8b8:	08015fcc 	.word	0x08015fcc

0800d8bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	6039      	str	r1, [r7, #0]
 800d8c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d8c8:	79fb      	ldrb	r3, [r7, #7]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d105      	bne.n	800d8da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	4907      	ldr	r1, [pc, #28]	; (800d8f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8d2:	4808      	ldr	r0, [pc, #32]	; (800d8f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8d4:	f7ff fdd0 	bl	800d478 <USBD_GetString>
 800d8d8:	e004      	b.n	800d8e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8da:	683a      	ldr	r2, [r7, #0]
 800d8dc:	4904      	ldr	r1, [pc, #16]	; (800d8f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8de:	4805      	ldr	r0, [pc, #20]	; (800d8f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8e0:	f7ff fdca 	bl	800d478 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8e4:	4b02      	ldr	r3, [pc, #8]	; (800d8f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3708      	adds	r7, #8
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	20004308 	.word	0x20004308
 800d8f4:	08015fd8 	.word	0x08015fd8

0800d8f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d8fe:	4b0f      	ldr	r3, [pc, #60]	; (800d93c <Get_SerialNum+0x44>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d904:	4b0e      	ldr	r3, [pc, #56]	; (800d940 <Get_SerialNum+0x48>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d90a:	4b0e      	ldr	r3, [pc, #56]	; (800d944 <Get_SerialNum+0x4c>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d910:	68fa      	ldr	r2, [r7, #12]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4413      	add	r3, r2
 800d916:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d009      	beq.n	800d932 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d91e:	2208      	movs	r2, #8
 800d920:	4909      	ldr	r1, [pc, #36]	; (800d948 <Get_SerialNum+0x50>)
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f000 f814 	bl	800d950 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d928:	2204      	movs	r2, #4
 800d92a:	4908      	ldr	r1, [pc, #32]	; (800d94c <Get_SerialNum+0x54>)
 800d92c:	68b8      	ldr	r0, [r7, #8]
 800d92e:	f000 f80f 	bl	800d950 <IntToUnicode>
  }
}
 800d932:	bf00      	nop
 800d934:	3710      	adds	r7, #16
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	1ffff7e8 	.word	0x1ffff7e8
 800d940:	1ffff7ec 	.word	0x1ffff7ec
 800d944:	1ffff7f0 	.word	0x1ffff7f0
 800d948:	200001b6 	.word	0x200001b6
 800d94c:	200001c6 	.word	0x200001c6

0800d950 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d950:	b480      	push	{r7}
 800d952:	b087      	sub	sp, #28
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	4613      	mov	r3, r2
 800d95c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d95e:	2300      	movs	r3, #0
 800d960:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d962:	2300      	movs	r3, #0
 800d964:	75fb      	strb	r3, [r7, #23]
 800d966:	e027      	b.n	800d9b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	0f1b      	lsrs	r3, r3, #28
 800d96c:	2b09      	cmp	r3, #9
 800d96e:	d80b      	bhi.n	800d988 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	0f1b      	lsrs	r3, r3, #28
 800d974:	b2da      	uxtb	r2, r3
 800d976:	7dfb      	ldrb	r3, [r7, #23]
 800d978:	005b      	lsls	r3, r3, #1
 800d97a:	4619      	mov	r1, r3
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	440b      	add	r3, r1
 800d980:	3230      	adds	r2, #48	; 0x30
 800d982:	b2d2      	uxtb	r2, r2
 800d984:	701a      	strb	r2, [r3, #0]
 800d986:	e00a      	b.n	800d99e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	0f1b      	lsrs	r3, r3, #28
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	7dfb      	ldrb	r3, [r7, #23]
 800d990:	005b      	lsls	r3, r3, #1
 800d992:	4619      	mov	r1, r3
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	440b      	add	r3, r1
 800d998:	3237      	adds	r2, #55	; 0x37
 800d99a:	b2d2      	uxtb	r2, r2
 800d99c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	011b      	lsls	r3, r3, #4
 800d9a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d9a4:	7dfb      	ldrb	r3, [r7, #23]
 800d9a6:	005b      	lsls	r3, r3, #1
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	68ba      	ldr	r2, [r7, #8]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d9b2:	7dfb      	ldrb	r3, [r7, #23]
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	75fb      	strb	r3, [r7, #23]
 800d9b8:	7dfa      	ldrb	r2, [r7, #23]
 800d9ba:	79fb      	ldrb	r3, [r7, #7]
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d3d3      	bcc.n	800d968 <IntToUnicode+0x18>
  }
}
 800d9c0:	bf00      	nop
 800d9c2:	bf00      	nop
 800d9c4:	371c      	adds	r7, #28
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bc80      	pop	{r7}
 800d9ca:	4770      	bx	lr

0800d9cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b084      	sub	sp, #16
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a0d      	ldr	r2, [pc, #52]	; (800da10 <HAL_PCD_MspInit+0x44>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d113      	bne.n	800da06 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d9de:	4b0d      	ldr	r3, [pc, #52]	; (800da14 <HAL_PCD_MspInit+0x48>)
 800d9e0:	69db      	ldr	r3, [r3, #28]
 800d9e2:	4a0c      	ldr	r2, [pc, #48]	; (800da14 <HAL_PCD_MspInit+0x48>)
 800d9e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d9e8:	61d3      	str	r3, [r2, #28]
 800d9ea:	4b0a      	ldr	r3, [pc, #40]	; (800da14 <HAL_PCD_MspInit+0x48>)
 800d9ec:	69db      	ldr	r3, [r3, #28]
 800d9ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	2100      	movs	r1, #0
 800d9fa:	2014      	movs	r0, #20
 800d9fc:	f7f7 f95d 	bl	8004cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800da00:	2014      	movs	r0, #20
 800da02:	f7f7 f976 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800da06:	bf00      	nop
 800da08:	3710      	adds	r7, #16
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	40005c00 	.word	0x40005c00
 800da14:	40021000 	.word	0x40021000

0800da18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800da2c:	4619      	mov	r1, r3
 800da2e:	4610      	mov	r0, r2
 800da30:	f7fe fdf2 	bl	800c618 <USBD_LL_SetupStage>
}
 800da34:	bf00      	nop
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	460b      	mov	r3, r1
 800da46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800da4e:	78fa      	ldrb	r2, [r7, #3]
 800da50:	6879      	ldr	r1, [r7, #4]
 800da52:	4613      	mov	r3, r2
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	4413      	add	r3, r2
 800da58:	00db      	lsls	r3, r3, #3
 800da5a:	440b      	add	r3, r1
 800da5c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	78fb      	ldrb	r3, [r7, #3]
 800da64:	4619      	mov	r1, r3
 800da66:	f7fe fe24 	bl	800c6b2 <USBD_LL_DataOutStage>
}
 800da6a:	bf00      	nop
 800da6c:	3708      	adds	r7, #8
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da72:	b580      	push	{r7, lr}
 800da74:	b082      	sub	sp, #8
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
 800da7a:	460b      	mov	r3, r1
 800da7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800da84:	78fa      	ldrb	r2, [r7, #3]
 800da86:	6879      	ldr	r1, [r7, #4]
 800da88:	4613      	mov	r3, r2
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	4413      	add	r3, r2
 800da8e:	00db      	lsls	r3, r3, #3
 800da90:	440b      	add	r3, r1
 800da92:	333c      	adds	r3, #60	; 0x3c
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	78fb      	ldrb	r3, [r7, #3]
 800da98:	4619      	mov	r1, r3
 800da9a:	f7fe fe7b 	bl	800c794 <USBD_LL_DataInStage>
}
 800da9e:	bf00      	nop
 800daa0:	3708      	adds	r7, #8
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b082      	sub	sp, #8
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fe ff8b 	bl	800c9d0 <USBD_LL_SOF>
}
 800daba:	bf00      	nop
 800dabc:	3708      	adds	r7, #8
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b084      	sub	sp, #16
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800daca:	2301      	movs	r3, #1
 800dacc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	2b02      	cmp	r3, #2
 800dad4:	d001      	beq.n	800dada <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dad6:	f7f6 f809 	bl	8003aec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800dae0:	7bfa      	ldrb	r2, [r7, #15]
 800dae2:	4611      	mov	r1, r2
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7fe ff3b 	bl	800c960 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fe fef4 	bl	800c8de <USBD_LL_Reset>
}
 800daf6:	bf00      	nop
 800daf8:	3710      	adds	r7, #16
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
	...

0800db00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fe ff35 	bl	800c97e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	699b      	ldr	r3, [r3, #24]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d005      	beq.n	800db28 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db1c:	4b04      	ldr	r3, [pc, #16]	; (800db30 <HAL_PCD_SuspendCallback+0x30>)
 800db1e:	691b      	ldr	r3, [r3, #16]
 800db20:	4a03      	ldr	r2, [pc, #12]	; (800db30 <HAL_PCD_SuspendCallback+0x30>)
 800db22:	f043 0306 	orr.w	r3, r3, #6
 800db26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800db28:	bf00      	nop
 800db2a:	3708      	adds	r7, #8
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	e000ed00 	.word	0xe000ed00

0800db34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800db42:	4618      	mov	r0, r3
 800db44:	f7fe ff2f 	bl	800c9a6 <USBD_LL_Resume>
}
 800db48:	bf00      	nop
 800db4a:	3708      	adds	r7, #8
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800db58:	4a28      	ldr	r2, [pc, #160]	; (800dbfc <USBD_LL_Init+0xac>)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	4a26      	ldr	r2, [pc, #152]	; (800dbfc <USBD_LL_Init+0xac>)
 800db64:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800db68:	4b24      	ldr	r3, [pc, #144]	; (800dbfc <USBD_LL_Init+0xac>)
 800db6a:	4a25      	ldr	r2, [pc, #148]	; (800dc00 <USBD_LL_Init+0xb0>)
 800db6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800db6e:	4b23      	ldr	r3, [pc, #140]	; (800dbfc <USBD_LL_Init+0xac>)
 800db70:	2208      	movs	r2, #8
 800db72:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800db74:	4b21      	ldr	r3, [pc, #132]	; (800dbfc <USBD_LL_Init+0xac>)
 800db76:	2202      	movs	r2, #2
 800db78:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800db7a:	4b20      	ldr	r3, [pc, #128]	; (800dbfc <USBD_LL_Init+0xac>)
 800db7c:	2200      	movs	r2, #0
 800db7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800db80:	4b1e      	ldr	r3, [pc, #120]	; (800dbfc <USBD_LL_Init+0xac>)
 800db82:	2200      	movs	r2, #0
 800db84:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800db86:	4b1d      	ldr	r3, [pc, #116]	; (800dbfc <USBD_LL_Init+0xac>)
 800db88:	2200      	movs	r2, #0
 800db8a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800db8c:	481b      	ldr	r0, [pc, #108]	; (800dbfc <USBD_LL_Init+0xac>)
 800db8e:	f7f8 f869 	bl	8005c64 <HAL_PCD_Init>
 800db92:	4603      	mov	r3, r0
 800db94:	2b00      	cmp	r3, #0
 800db96:	d001      	beq.n	800db9c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800db98:	f7f5 ffa8 	bl	8003aec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dba2:	2318      	movs	r3, #24
 800dba4:	2200      	movs	r2, #0
 800dba6:	2100      	movs	r1, #0
 800dba8:	f7f9 fd88 	bl	80076bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dbb2:	2358      	movs	r3, #88	; 0x58
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	2180      	movs	r1, #128	; 0x80
 800dbb8:	f7f9 fd80 	bl	80076bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dbc2:	23c0      	movs	r3, #192	; 0xc0
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	2181      	movs	r1, #129	; 0x81
 800dbc8:	f7f9 fd78 	bl	80076bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dbd2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	2101      	movs	r1, #1
 800dbda:	f7f9 fd6f 	bl	80076bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dbe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbe8:	2200      	movs	r2, #0
 800dbea:	2182      	movs	r1, #130	; 0x82
 800dbec:	f7f9 fd66 	bl	80076bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3708      	adds	r7, #8
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	20004508 	.word	0x20004508
 800dc00:	40005c00 	.word	0x40005c00

0800dc04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b084      	sub	sp, #16
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc10:	2300      	movs	r3, #0
 800dc12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7f8 f921 	bl	8005e62 <HAL_PCD_Start>
 800dc20:	4603      	mov	r3, r0
 800dc22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
 800dc26:	4618      	mov	r0, r3
 800dc28:	f000 f94e 	bl	800dec8 <USBD_Get_USB_Status>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc30:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b084      	sub	sp, #16
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
 800dc42:	4608      	mov	r0, r1
 800dc44:	4611      	mov	r1, r2
 800dc46:	461a      	mov	r2, r3
 800dc48:	4603      	mov	r3, r0
 800dc4a:	70fb      	strb	r3, [r7, #3]
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	70bb      	strb	r3, [r7, #2]
 800dc50:	4613      	mov	r3, r2
 800dc52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc54:	2300      	movs	r3, #0
 800dc56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dc62:	78bb      	ldrb	r3, [r7, #2]
 800dc64:	883a      	ldrh	r2, [r7, #0]
 800dc66:	78f9      	ldrb	r1, [r7, #3]
 800dc68:	f7f8 fa76 	bl	8006158 <HAL_PCD_EP_Open>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc70:	7bfb      	ldrb	r3, [r7, #15]
 800dc72:	4618      	mov	r0, r3
 800dc74:	f000 f928 	bl	800dec8 <USBD_Get_USB_Status>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}

0800dc86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b084      	sub	sp, #16
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
 800dc8e:	460b      	mov	r3, r1
 800dc90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc92:	2300      	movs	r3, #0
 800dc94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc96:	2300      	movs	r3, #0
 800dc98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dca0:	78fa      	ldrb	r2, [r7, #3]
 800dca2:	4611      	mov	r1, r2
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7f8 fab4 	bl	8006212 <HAL_PCD_EP_Close>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcae:	7bfb      	ldrb	r3, [r7, #15]
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f000 f909 	bl	800dec8 <USBD_Get_USB_Status>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcba:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3710      	adds	r7, #16
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	460b      	mov	r3, r1
 800dcce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dcde:	78fa      	ldrb	r2, [r7, #3]
 800dce0:	4611      	mov	r1, r2
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7f8 fb5c 	bl	80063a0 <HAL_PCD_EP_SetStall>
 800dce8:	4603      	mov	r3, r0
 800dcea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcec:	7bfb      	ldrb	r3, [r7, #15]
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f000 f8ea 	bl	800dec8 <USBD_Get_USB_Status>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3710      	adds	r7, #16
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b084      	sub	sp, #16
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd12:	2300      	movs	r3, #0
 800dd14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd1c:	78fa      	ldrb	r2, [r7, #3]
 800dd1e:	4611      	mov	r1, r2
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7f8 fb9d 	bl	8006460 <HAL_PCD_EP_ClrStall>
 800dd26:	4603      	mov	r3, r0
 800dd28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd2a:	7bfb      	ldrb	r3, [r7, #15]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f000 f8cb 	bl	800dec8 <USBD_Get_USB_Status>
 800dd32:	4603      	mov	r3, r0
 800dd34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd36:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3710      	adds	r7, #16
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dd54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	da0c      	bge.n	800dd76 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dd5c:	78fb      	ldrb	r3, [r7, #3]
 800dd5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd62:	68f9      	ldr	r1, [r7, #12]
 800dd64:	1c5a      	adds	r2, r3, #1
 800dd66:	4613      	mov	r3, r2
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	4413      	add	r3, r2
 800dd6c:	00db      	lsls	r3, r3, #3
 800dd6e:	440b      	add	r3, r1
 800dd70:	3302      	adds	r3, #2
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	e00b      	b.n	800dd8e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dd76:	78fb      	ldrb	r3, [r7, #3]
 800dd78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd7c:	68f9      	ldr	r1, [r7, #12]
 800dd7e:	4613      	mov	r3, r2
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	4413      	add	r3, r2
 800dd84:	00db      	lsls	r3, r3, #3
 800dd86:	440b      	add	r3, r1
 800dd88:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800dd8c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3714      	adds	r7, #20
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bc80      	pop	{r7}
 800dd96:	4770      	bx	lr

0800dd98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	460b      	mov	r3, r1
 800dda2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dda4:	2300      	movs	r3, #0
 800dda6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddb2:	78fa      	ldrb	r2, [r7, #3]
 800ddb4:	4611      	mov	r1, r2
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7f8 f9a9 	bl	800610e <HAL_PCD_SetAddress>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddc0:	7bfb      	ldrb	r3, [r7, #15]
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f000 f880 	bl	800dec8 <USBD_Get_USB_Status>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b086      	sub	sp, #24
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	60f8      	str	r0, [r7, #12]
 800ddde:	607a      	str	r2, [r7, #4]
 800dde0:	461a      	mov	r2, r3
 800dde2:	460b      	mov	r3, r1
 800dde4:	72fb      	strb	r3, [r7, #11]
 800dde6:	4613      	mov	r3, r2
 800dde8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddea:	2300      	movs	r3, #0
 800ddec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ddf8:	893b      	ldrh	r3, [r7, #8]
 800ddfa:	7af9      	ldrb	r1, [r7, #11]
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	f7f8 fa98 	bl	8006332 <HAL_PCD_EP_Transmit>
 800de02:	4603      	mov	r3, r0
 800de04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de06:	7dfb      	ldrb	r3, [r7, #23]
 800de08:	4618      	mov	r0, r3
 800de0a:	f000 f85d 	bl	800dec8 <USBD_Get_USB_Status>
 800de0e:	4603      	mov	r3, r0
 800de10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de12:	7dbb      	ldrb	r3, [r7, #22]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3718      	adds	r7, #24
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b086      	sub	sp, #24
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	607a      	str	r2, [r7, #4]
 800de26:	461a      	mov	r2, r3
 800de28:	460b      	mov	r3, r1
 800de2a:	72fb      	strb	r3, [r7, #11]
 800de2c:	4613      	mov	r3, r2
 800de2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de30:	2300      	movs	r3, #0
 800de32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de34:	2300      	movs	r3, #0
 800de36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800de3e:	893b      	ldrh	r3, [r7, #8]
 800de40:	7af9      	ldrb	r1, [r7, #11]
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	f7f8 fa2d 	bl	80062a2 <HAL_PCD_EP_Receive>
 800de48:	4603      	mov	r3, r0
 800de4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de4c:	7dfb      	ldrb	r3, [r7, #23]
 800de4e:	4618      	mov	r0, r3
 800de50:	f000 f83a 	bl	800dec8 <USBD_Get_USB_Status>
 800de54:	4603      	mov	r3, r0
 800de56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de58:	7dbb      	ldrb	r3, [r7, #22]
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3718      	adds	r7, #24
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de62:	b580      	push	{r7, lr}
 800de64:	b082      	sub	sp, #8
 800de66:	af00      	add	r7, sp, #0
 800de68:	6078      	str	r0, [r7, #4]
 800de6a:	460b      	mov	r3, r1
 800de6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de74:	78fa      	ldrb	r2, [r7, #3]
 800de76:	4611      	mov	r1, r2
 800de78:	4618      	mov	r0, r3
 800de7a:	f7f8 fa43 	bl	8006304 <HAL_PCD_EP_GetRxCount>
 800de7e:	4603      	mov	r3, r0
}
 800de80:	4618      	mov	r0, r3
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800de88:	b480      	push	{r7}
 800de8a:	b083      	sub	sp, #12
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800de90:	4b02      	ldr	r3, [pc, #8]	; (800de9c <USBD_static_malloc+0x14>)
}
 800de92:	4618      	mov	r0, r3
 800de94:	370c      	adds	r7, #12
 800de96:	46bd      	mov	sp, r7
 800de98:	bc80      	pop	{r7}
 800de9a:	4770      	bx	lr
 800de9c:	20000eac 	.word	0x20000eac

0800dea0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b083      	sub	sp, #12
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]

}
 800dea8:	bf00      	nop
 800deaa:	370c      	adds	r7, #12
 800deac:	46bd      	mov	sp, r7
 800deae:	bc80      	pop	{r7}
 800deb0:	4770      	bx	lr

0800deb2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800deb2:	b480      	push	{r7}
 800deb4:	b083      	sub	sp, #12
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
 800deba:	460b      	mov	r3, r1
 800debc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800debe:	bf00      	nop
 800dec0:	370c      	adds	r7, #12
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bc80      	pop	{r7}
 800dec6:	4770      	bx	lr

0800dec8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
 800dece:	4603      	mov	r3, r0
 800ded0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ded2:	2300      	movs	r3, #0
 800ded4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ded6:	79fb      	ldrb	r3, [r7, #7]
 800ded8:	2b03      	cmp	r3, #3
 800deda:	d817      	bhi.n	800df0c <USBD_Get_USB_Status+0x44>
 800dedc:	a201      	add	r2, pc, #4	; (adr r2, 800dee4 <USBD_Get_USB_Status+0x1c>)
 800dede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee2:	bf00      	nop
 800dee4:	0800def5 	.word	0x0800def5
 800dee8:	0800defb 	.word	0x0800defb
 800deec:	0800df01 	.word	0x0800df01
 800def0:	0800df07 	.word	0x0800df07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800def4:	2300      	movs	r3, #0
 800def6:	73fb      	strb	r3, [r7, #15]
    break;
 800def8:	e00b      	b.n	800df12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800defa:	2302      	movs	r3, #2
 800defc:	73fb      	strb	r3, [r7, #15]
    break;
 800defe:	e008      	b.n	800df12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df00:	2301      	movs	r3, #1
 800df02:	73fb      	strb	r3, [r7, #15]
    break;
 800df04:	e005      	b.n	800df12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df06:	2302      	movs	r3, #2
 800df08:	73fb      	strb	r3, [r7, #15]
    break;
 800df0a:	e002      	b.n	800df12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800df0c:	2302      	movs	r3, #2
 800df0e:	73fb      	strb	r3, [r7, #15]
    break;
 800df10:	bf00      	nop
  }
  return usb_status;
 800df12:	7bfb      	ldrb	r3, [r7, #15]
}
 800df14:	4618      	mov	r0, r3
 800df16:	3714      	adds	r7, #20
 800df18:	46bd      	mov	sp, r7
 800df1a:	bc80      	pop	{r7}
 800df1c:	4770      	bx	lr
 800df1e:	bf00      	nop

0800df20 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800df28:	4b22      	ldr	r3, [pc, #136]	; (800dfb4 <WIZCHIP_READ+0x94>)
 800df2a:	68db      	ldr	r3, [r3, #12]
 800df2c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800df2e:	4b21      	ldr	r3, [pc, #132]	; (800dfb4 <WIZCHIP_READ+0x94>)
 800df30:	695b      	ldr	r3, [r3, #20]
 800df32:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800df34:	4b1f      	ldr	r3, [pc, #124]	; (800dfb4 <WIZCHIP_READ+0x94>)
 800df36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d003      	beq.n	800df44 <WIZCHIP_READ+0x24>
 800df3c:	4b1d      	ldr	r3, [pc, #116]	; (800dfb4 <WIZCHIP_READ+0x94>)
 800df3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df40:	2b00      	cmp	r3, #0
 800df42:	d114      	bne.n	800df6e <WIZCHIP_READ+0x4e>
   {
	    WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800df44:	4b1b      	ldr	r3, [pc, #108]	; (800dfb4 <WIZCHIP_READ+0x94>)
 800df46:	6a1b      	ldr	r3, [r3, #32]
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	0c12      	lsrs	r2, r2, #16
 800df4c:	b2d2      	uxtb	r2, r2
 800df4e:	4610      	mov	r0, r2
 800df50:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800df52:	4b18      	ldr	r3, [pc, #96]	; (800dfb4 <WIZCHIP_READ+0x94>)
 800df54:	6a1b      	ldr	r3, [r3, #32]
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	0a12      	lsrs	r2, r2, #8
 800df5a:	b2d2      	uxtb	r2, r2
 800df5c:	4610      	mov	r0, r2
 800df5e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800df60:	4b14      	ldr	r3, [pc, #80]	; (800dfb4 <WIZCHIP_READ+0x94>)
 800df62:	6a1b      	ldr	r3, [r3, #32]
 800df64:	687a      	ldr	r2, [r7, #4]
 800df66:	b2d2      	uxtb	r2, r2
 800df68:	4610      	mov	r0, r2
 800df6a:	4798      	blx	r3
 800df6c:	e011      	b.n	800df92 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	0c1b      	lsrs	r3, r3, #16
 800df72:	b2db      	uxtb	r3, r3
 800df74:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	0a1b      	lsrs	r3, r3, #8
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	b2db      	uxtb	r3, r3
 800df82:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800df84:	4b0b      	ldr	r3, [pc, #44]	; (800dfb4 <WIZCHIP_READ+0x94>)
 800df86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df88:	f107 020c 	add.w	r2, r7, #12
 800df8c:	2103      	movs	r1, #3
 800df8e:	4610      	mov	r0, r2
 800df90:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800df92:	4b08      	ldr	r3, [pc, #32]	; (800dfb4 <WIZCHIP_READ+0x94>)
 800df94:	69db      	ldr	r3, [r3, #28]
 800df96:	4798      	blx	r3
 800df98:	4603      	mov	r3, r0
 800df9a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800df9c:	4b05      	ldr	r3, [pc, #20]	; (800dfb4 <WIZCHIP_READ+0x94>)
 800df9e:	699b      	ldr	r3, [r3, #24]
 800dfa0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800dfa2:	4b04      	ldr	r3, [pc, #16]	; (800dfb4 <WIZCHIP_READ+0x94>)
 800dfa4:	691b      	ldr	r3, [r3, #16]
 800dfa6:	4798      	blx	r3
   return ret;
 800dfa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3710      	adds	r7, #16
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	bf00      	nop
 800dfb4:	200001d0 	.word	0x200001d0

0800dfb8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b084      	sub	sp, #16
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	460b      	mov	r3, r1
 800dfc2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800dfc4:	4b22      	ldr	r3, [pc, #136]	; (800e050 <WIZCHIP_WRITE+0x98>)
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	4798      	blx	r3
   WIZCHIP.CS._select();
 800dfca:	4b21      	ldr	r3, [pc, #132]	; (800e050 <WIZCHIP_WRITE+0x98>)
 800dfcc:	695b      	ldr	r3, [r3, #20]
 800dfce:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f043 0304 	orr.w	r3, r3, #4
 800dfd6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800dfd8:	4b1d      	ldr	r3, [pc, #116]	; (800e050 <WIZCHIP_WRITE+0x98>)
 800dfda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d119      	bne.n	800e014 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800dfe0:	4b1b      	ldr	r3, [pc, #108]	; (800e050 <WIZCHIP_WRITE+0x98>)
 800dfe2:	6a1b      	ldr	r3, [r3, #32]
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	0c12      	lsrs	r2, r2, #16
 800dfe8:	b2d2      	uxtb	r2, r2
 800dfea:	4610      	mov	r0, r2
 800dfec:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800dfee:	4b18      	ldr	r3, [pc, #96]	; (800e050 <WIZCHIP_WRITE+0x98>)
 800dff0:	6a1b      	ldr	r3, [r3, #32]
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	0a12      	lsrs	r2, r2, #8
 800dff6:	b2d2      	uxtb	r2, r2
 800dff8:	4610      	mov	r0, r2
 800dffa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800dffc:	4b14      	ldr	r3, [pc, #80]	; (800e050 <WIZCHIP_WRITE+0x98>)
 800dffe:	6a1b      	ldr	r3, [r3, #32]
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	b2d2      	uxtb	r2, r2
 800e004:	4610      	mov	r0, r2
 800e006:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800e008:	4b11      	ldr	r3, [pc, #68]	; (800e050 <WIZCHIP_WRITE+0x98>)
 800e00a:	6a1b      	ldr	r3, [r3, #32]
 800e00c:	78fa      	ldrb	r2, [r7, #3]
 800e00e:	4610      	mov	r0, r2
 800e010:	4798      	blx	r3
 800e012:	e013      	b.n	800e03c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	0c1b      	lsrs	r3, r3, #16
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	0a1b      	lsrs	r3, r3, #8
 800e020:	b2db      	uxtb	r3, r3
 800e022:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	b2db      	uxtb	r3, r3
 800e028:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800e02a:	78fb      	ldrb	r3, [r7, #3]
 800e02c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800e02e:	4b08      	ldr	r3, [pc, #32]	; (800e050 <WIZCHIP_WRITE+0x98>)
 800e030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e032:	f107 020c 	add.w	r2, r7, #12
 800e036:	2104      	movs	r1, #4
 800e038:	4610      	mov	r0, r2
 800e03a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800e03c:	4b04      	ldr	r3, [pc, #16]	; (800e050 <WIZCHIP_WRITE+0x98>)
 800e03e:	699b      	ldr	r3, [r3, #24]
 800e040:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800e042:	4b03      	ldr	r3, [pc, #12]	; (800e050 <WIZCHIP_WRITE+0x98>)
 800e044:	691b      	ldr	r3, [r3, #16]
 800e046:	4798      	blx	r3
}
 800e048:	bf00      	nop
 800e04a:	3710      	adds	r7, #16
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	200001d0 	.word	0x200001d0

0800e054 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800e054:	b590      	push	{r4, r7, lr}
 800e056:	b087      	sub	sp, #28
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	4613      	mov	r3, r2
 800e060:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800e062:	4b2b      	ldr	r3, [pc, #172]	; (800e110 <WIZCHIP_READ_BUF+0xbc>)
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	4798      	blx	r3
   WIZCHIP.CS._select();
 800e068:	4b29      	ldr	r3, [pc, #164]	; (800e110 <WIZCHIP_READ_BUF+0xbc>)
 800e06a:	695b      	ldr	r3, [r3, #20]
 800e06c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800e06e:	4b28      	ldr	r3, [pc, #160]	; (800e110 <WIZCHIP_READ_BUF+0xbc>)
 800e070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e072:	2b00      	cmp	r3, #0
 800e074:	d003      	beq.n	800e07e <WIZCHIP_READ_BUF+0x2a>
 800e076:	4b26      	ldr	r3, [pc, #152]	; (800e110 <WIZCHIP_READ_BUF+0xbc>)
 800e078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d126      	bne.n	800e0cc <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800e07e:	4b24      	ldr	r3, [pc, #144]	; (800e110 <WIZCHIP_READ_BUF+0xbc>)
 800e080:	6a1b      	ldr	r3, [r3, #32]
 800e082:	68fa      	ldr	r2, [r7, #12]
 800e084:	0c12      	lsrs	r2, r2, #16
 800e086:	b2d2      	uxtb	r2, r2
 800e088:	4610      	mov	r0, r2
 800e08a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800e08c:	4b20      	ldr	r3, [pc, #128]	; (800e110 <WIZCHIP_READ_BUF+0xbc>)
 800e08e:	6a1b      	ldr	r3, [r3, #32]
 800e090:	68fa      	ldr	r2, [r7, #12]
 800e092:	0a12      	lsrs	r2, r2, #8
 800e094:	b2d2      	uxtb	r2, r2
 800e096:	4610      	mov	r0, r2
 800e098:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800e09a:	4b1d      	ldr	r3, [pc, #116]	; (800e110 <WIZCHIP_READ_BUF+0xbc>)
 800e09c:	6a1b      	ldr	r3, [r3, #32]
 800e09e:	68fa      	ldr	r2, [r7, #12]
 800e0a0:	b2d2      	uxtb	r2, r2
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	82fb      	strh	r3, [r7, #22]
 800e0aa:	e00a      	b.n	800e0c2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800e0ac:	4b18      	ldr	r3, [pc, #96]	; (800e110 <WIZCHIP_READ_BUF+0xbc>)
 800e0ae:	69db      	ldr	r3, [r3, #28]
 800e0b0:	8afa      	ldrh	r2, [r7, #22]
 800e0b2:	68b9      	ldr	r1, [r7, #8]
 800e0b4:	188c      	adds	r4, r1, r2
 800e0b6:	4798      	blx	r3
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800e0bc:	8afb      	ldrh	r3, [r7, #22]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	82fb      	strh	r3, [r7, #22]
 800e0c2:	8afa      	ldrh	r2, [r7, #22]
 800e0c4:	88fb      	ldrh	r3, [r7, #6]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d3f0      	bcc.n	800e0ac <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800e0ca:	e017      	b.n	800e0fc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	0c1b      	lsrs	r3, r3, #16
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	0a1b      	lsrs	r3, r3, #8
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800e0e2:	4b0b      	ldr	r3, [pc, #44]	; (800e110 <WIZCHIP_READ_BUF+0xbc>)
 800e0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0e6:	f107 0210 	add.w	r2, r7, #16
 800e0ea:	2103      	movs	r1, #3
 800e0ec:	4610      	mov	r0, r2
 800e0ee:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800e0f0:	4b07      	ldr	r3, [pc, #28]	; (800e110 <WIZCHIP_READ_BUF+0xbc>)
 800e0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f4:	88fa      	ldrh	r2, [r7, #6]
 800e0f6:	4611      	mov	r1, r2
 800e0f8:	68b8      	ldr	r0, [r7, #8]
 800e0fa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800e0fc:	4b04      	ldr	r3, [pc, #16]	; (800e110 <WIZCHIP_READ_BUF+0xbc>)
 800e0fe:	699b      	ldr	r3, [r3, #24]
 800e100:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800e102:	4b03      	ldr	r3, [pc, #12]	; (800e110 <WIZCHIP_READ_BUF+0xbc>)
 800e104:	691b      	ldr	r3, [r3, #16]
 800e106:	4798      	blx	r3
}
 800e108:	bf00      	nop
 800e10a:	371c      	adds	r7, #28
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd90      	pop	{r4, r7, pc}
 800e110:	200001d0 	.word	0x200001d0

0800e114 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b086      	sub	sp, #24
 800e118:	af00      	add	r7, sp, #0
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	4613      	mov	r3, r2
 800e120:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800e122:	4b2b      	ldr	r3, [pc, #172]	; (800e1d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	4798      	blx	r3
   WIZCHIP.CS._select();
 800e128:	4b29      	ldr	r3, [pc, #164]	; (800e1d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800e12a:	695b      	ldr	r3, [r3, #20]
 800e12c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f043 0304 	orr.w	r3, r3, #4
 800e134:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800e136:	4b26      	ldr	r3, [pc, #152]	; (800e1d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800e138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d126      	bne.n	800e18c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800e13e:	4b24      	ldr	r3, [pc, #144]	; (800e1d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800e140:	6a1b      	ldr	r3, [r3, #32]
 800e142:	68fa      	ldr	r2, [r7, #12]
 800e144:	0c12      	lsrs	r2, r2, #16
 800e146:	b2d2      	uxtb	r2, r2
 800e148:	4610      	mov	r0, r2
 800e14a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800e14c:	4b20      	ldr	r3, [pc, #128]	; (800e1d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800e14e:	6a1b      	ldr	r3, [r3, #32]
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	0a12      	lsrs	r2, r2, #8
 800e154:	b2d2      	uxtb	r2, r2
 800e156:	4610      	mov	r0, r2
 800e158:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800e15a:	4b1d      	ldr	r3, [pc, #116]	; (800e1d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800e15c:	6a1b      	ldr	r3, [r3, #32]
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	b2d2      	uxtb	r2, r2
 800e162:	4610      	mov	r0, r2
 800e164:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800e166:	2300      	movs	r3, #0
 800e168:	82fb      	strh	r3, [r7, #22]
 800e16a:	e00a      	b.n	800e182 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800e16c:	4b18      	ldr	r3, [pc, #96]	; (800e1d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800e16e:	6a1b      	ldr	r3, [r3, #32]
 800e170:	8afa      	ldrh	r2, [r7, #22]
 800e172:	68b9      	ldr	r1, [r7, #8]
 800e174:	440a      	add	r2, r1
 800e176:	7812      	ldrb	r2, [r2, #0]
 800e178:	4610      	mov	r0, r2
 800e17a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800e17c:	8afb      	ldrh	r3, [r7, #22]
 800e17e:	3301      	adds	r3, #1
 800e180:	82fb      	strh	r3, [r7, #22]
 800e182:	8afa      	ldrh	r2, [r7, #22]
 800e184:	88fb      	ldrh	r3, [r7, #6]
 800e186:	429a      	cmp	r2, r3
 800e188:	d3f0      	bcc.n	800e16c <WIZCHIP_WRITE_BUF+0x58>
 800e18a:	e017      	b.n	800e1bc <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	0c1b      	lsrs	r3, r3, #16
 800e190:	b2db      	uxtb	r3, r3
 800e192:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	0a1b      	lsrs	r3, r3, #8
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800e1a2:	4b0b      	ldr	r3, [pc, #44]	; (800e1d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800e1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1a6:	f107 0210 	add.w	r2, r7, #16
 800e1aa:	2103      	movs	r1, #3
 800e1ac:	4610      	mov	r0, r2
 800e1ae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800e1b0:	4b07      	ldr	r3, [pc, #28]	; (800e1d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800e1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b4:	88fa      	ldrh	r2, [r7, #6]
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	68b8      	ldr	r0, [r7, #8]
 800e1ba:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800e1bc:	4b04      	ldr	r3, [pc, #16]	; (800e1d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800e1be:	699b      	ldr	r3, [r3, #24]
 800e1c0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800e1c2:	4b03      	ldr	r3, [pc, #12]	; (800e1d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800e1c4:	691b      	ldr	r3, [r3, #16]
 800e1c6:	4798      	blx	r3
}
 800e1c8:	bf00      	nop
 800e1ca:	3718      	adds	r7, #24
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	200001d0 	.word	0x200001d0

0800e1d4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800e1d4:	b590      	push	{r4, r7, lr}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	4603      	mov	r3, r0
 800e1dc:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	81fb      	strh	r3, [r7, #14]
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800e1e6:	79fb      	ldrb	r3, [r7, #7]
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	00db      	lsls	r3, r3, #3
 800e1ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7ff fe94 	bl	800df20 <WIZCHIP_READ>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800e1fc:	89bb      	ldrh	r3, [r7, #12]
 800e1fe:	021b      	lsls	r3, r3, #8
 800e200:	b29c      	uxth	r4, r3
 800e202:	79fb      	ldrb	r3, [r7, #7]
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	3301      	adds	r3, #1
 800e208:	00db      	lsls	r3, r3, #3
 800e20a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800e20e:	4618      	mov	r0, r3
 800e210:	f7ff fe86 	bl	800df20 <WIZCHIP_READ>
 800e214:	4603      	mov	r3, r0
 800e216:	b29b      	uxth	r3, r3
 800e218:	4423      	add	r3, r4
 800e21a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800e21c:	89bb      	ldrh	r3, [r7, #12]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d01a      	beq.n	800e258 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800e222:	79fb      	ldrb	r3, [r7, #7]
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	3301      	adds	r3, #1
 800e228:	00db      	lsls	r3, r3, #3
 800e22a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e22e:	4618      	mov	r0, r3
 800e230:	f7ff fe76 	bl	800df20 <WIZCHIP_READ>
 800e234:	4603      	mov	r3, r0
 800e236:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800e238:	89fb      	ldrh	r3, [r7, #14]
 800e23a:	021b      	lsls	r3, r3, #8
 800e23c:	b29c      	uxth	r4, r3
 800e23e:	79fb      	ldrb	r3, [r7, #7]
 800e240:	009b      	lsls	r3, r3, #2
 800e242:	3301      	adds	r3, #1
 800e244:	00db      	lsls	r3, r3, #3
 800e246:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7ff fe68 	bl	800df20 <WIZCHIP_READ>
 800e250:	4603      	mov	r3, r0
 800e252:	b29b      	uxth	r3, r3
 800e254:	4423      	add	r3, r4
 800e256:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800e258:	89fa      	ldrh	r2, [r7, #14]
 800e25a:	89bb      	ldrh	r3, [r7, #12]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d1c2      	bne.n	800e1e6 <getSn_TX_FSR+0x12>
   return val;
 800e260:	89fb      	ldrh	r3, [r7, #14]
}
 800e262:	4618      	mov	r0, r3
 800e264:	3714      	adds	r7, #20
 800e266:	46bd      	mov	sp, r7
 800e268:	bd90      	pop	{r4, r7, pc}

0800e26a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800e26a:	b590      	push	{r4, r7, lr}
 800e26c:	b085      	sub	sp, #20
 800e26e:	af00      	add	r7, sp, #0
 800e270:	4603      	mov	r3, r0
 800e272:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800e274:	2300      	movs	r3, #0
 800e276:	81fb      	strh	r3, [r7, #14]
 800e278:	2300      	movs	r3, #0
 800e27a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800e27c:	79fb      	ldrb	r3, [r7, #7]
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	3301      	adds	r3, #1
 800e282:	00db      	lsls	r3, r3, #3
 800e284:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800e288:	4618      	mov	r0, r3
 800e28a:	f7ff fe49 	bl	800df20 <WIZCHIP_READ>
 800e28e:	4603      	mov	r3, r0
 800e290:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800e292:	89bb      	ldrh	r3, [r7, #12]
 800e294:	021b      	lsls	r3, r3, #8
 800e296:	b29c      	uxth	r4, r3
 800e298:	79fb      	ldrb	r3, [r7, #7]
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	3301      	adds	r3, #1
 800e29e:	00db      	lsls	r3, r3, #3
 800e2a0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7ff fe3b 	bl	800df20 <WIZCHIP_READ>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	4423      	add	r3, r4
 800e2b0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800e2b2:	89bb      	ldrh	r3, [r7, #12]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d01a      	beq.n	800e2ee <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800e2b8:	79fb      	ldrb	r3, [r7, #7]
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	3301      	adds	r3, #1
 800e2be:	00db      	lsls	r3, r3, #3
 800e2c0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7ff fe2b 	bl	800df20 <WIZCHIP_READ>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800e2ce:	89fb      	ldrh	r3, [r7, #14]
 800e2d0:	021b      	lsls	r3, r3, #8
 800e2d2:	b29c      	uxth	r4, r3
 800e2d4:	79fb      	ldrb	r3, [r7, #7]
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	3301      	adds	r3, #1
 800e2da:	00db      	lsls	r3, r3, #3
 800e2dc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7ff fe1d 	bl	800df20 <WIZCHIP_READ>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	4423      	add	r3, r4
 800e2ec:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800e2ee:	89fa      	ldrh	r2, [r7, #14]
 800e2f0:	89bb      	ldrh	r3, [r7, #12]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d1c2      	bne.n	800e27c <getSn_RX_RSR+0x12>
   return val;
 800e2f6:	89fb      	ldrh	r3, [r7, #14]
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3714      	adds	r7, #20
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd90      	pop	{r4, r7, pc}

0800e300 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800e300:	b590      	push	{r4, r7, lr}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
 800e306:	4603      	mov	r3, r0
 800e308:	6039      	str	r1, [r7, #0]
 800e30a:	71fb      	strb	r3, [r7, #7]
 800e30c:	4613      	mov	r3, r2
 800e30e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800e310:	2300      	movs	r3, #0
 800e312:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800e314:	2300      	movs	r3, #0
 800e316:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800e318:	88bb      	ldrh	r3, [r7, #4]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d048      	beq.n	800e3b0 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800e31e:	79fb      	ldrb	r3, [r7, #7]
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	3301      	adds	r3, #1
 800e324:	00db      	lsls	r3, r3, #3
 800e326:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7ff fdf8 	bl	800df20 <WIZCHIP_READ>
 800e330:	4603      	mov	r3, r0
 800e332:	b29b      	uxth	r3, r3
 800e334:	021b      	lsls	r3, r3, #8
 800e336:	b29c      	uxth	r4, r3
 800e338:	79fb      	ldrb	r3, [r7, #7]
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	3301      	adds	r3, #1
 800e33e:	00db      	lsls	r3, r3, #3
 800e340:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800e344:	4618      	mov	r0, r3
 800e346:	f7ff fdeb 	bl	800df20 <WIZCHIP_READ>
 800e34a:	4603      	mov	r3, r0
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	4423      	add	r3, r4
 800e350:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800e352:	89fb      	ldrh	r3, [r7, #14]
 800e354:	021b      	lsls	r3, r3, #8
 800e356:	79fa      	ldrb	r2, [r7, #7]
 800e358:	0092      	lsls	r2, r2, #2
 800e35a:	3202      	adds	r2, #2
 800e35c:	00d2      	lsls	r2, r2, #3
 800e35e:	4413      	add	r3, r2
 800e360:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800e362:	88bb      	ldrh	r3, [r7, #4]
 800e364:	461a      	mov	r2, r3
 800e366:	6839      	ldr	r1, [r7, #0]
 800e368:	68b8      	ldr	r0, [r7, #8]
 800e36a:	f7ff fed3 	bl	800e114 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800e36e:	89fa      	ldrh	r2, [r7, #14]
 800e370:	88bb      	ldrh	r3, [r7, #4]
 800e372:	4413      	add	r3, r2
 800e374:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800e376:	79fb      	ldrb	r3, [r7, #7]
 800e378:	009b      	lsls	r3, r3, #2
 800e37a:	3301      	adds	r3, #1
 800e37c:	00db      	lsls	r3, r3, #3
 800e37e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800e382:	461a      	mov	r2, r3
 800e384:	89fb      	ldrh	r3, [r7, #14]
 800e386:	0a1b      	lsrs	r3, r3, #8
 800e388:	b29b      	uxth	r3, r3
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	4619      	mov	r1, r3
 800e38e:	4610      	mov	r0, r2
 800e390:	f7ff fe12 	bl	800dfb8 <WIZCHIP_WRITE>
 800e394:	79fb      	ldrb	r3, [r7, #7]
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	3301      	adds	r3, #1
 800e39a:	00db      	lsls	r3, r3, #3
 800e39c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	89fb      	ldrh	r3, [r7, #14]
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	4610      	mov	r0, r2
 800e3aa:	f7ff fe05 	bl	800dfb8 <WIZCHIP_WRITE>
 800e3ae:	e000      	b.n	800e3b2 <wiz_send_data+0xb2>
   if(len == 0)  return;
 800e3b0:	bf00      	nop
}
 800e3b2:	3714      	adds	r7, #20
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd90      	pop	{r4, r7, pc}

0800e3b8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800e3b8:	b590      	push	{r4, r7, lr}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	4603      	mov	r3, r0
 800e3c0:	6039      	str	r1, [r7, #0]
 800e3c2:	71fb      	strb	r3, [r7, #7]
 800e3c4:	4613      	mov	r3, r2
 800e3c6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800e3d0:	88bb      	ldrh	r3, [r7, #4]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d048      	beq.n	800e468 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 800e3d6:	79fb      	ldrb	r3, [r7, #7]
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	3301      	adds	r3, #1
 800e3dc:	00db      	lsls	r3, r3, #3
 800e3de:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7ff fd9c 	bl	800df20 <WIZCHIP_READ>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	021b      	lsls	r3, r3, #8
 800e3ee:	b29c      	uxth	r4, r3
 800e3f0:	79fb      	ldrb	r3, [r7, #7]
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	00db      	lsls	r3, r3, #3
 800e3f8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7ff fd8f 	bl	800df20 <WIZCHIP_READ>
 800e402:	4603      	mov	r3, r0
 800e404:	b29b      	uxth	r3, r3
 800e406:	4423      	add	r3, r4
 800e408:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800e40a:	89fb      	ldrh	r3, [r7, #14]
 800e40c:	021b      	lsls	r3, r3, #8
 800e40e:	79fa      	ldrb	r2, [r7, #7]
 800e410:	0092      	lsls	r2, r2, #2
 800e412:	3203      	adds	r2, #3
 800e414:	00d2      	lsls	r2, r2, #3
 800e416:	4413      	add	r3, r2
 800e418:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800e41a:	88bb      	ldrh	r3, [r7, #4]
 800e41c:	461a      	mov	r2, r3
 800e41e:	6839      	ldr	r1, [r7, #0]
 800e420:	68b8      	ldr	r0, [r7, #8]
 800e422:	f7ff fe17 	bl	800e054 <WIZCHIP_READ_BUF>
   ptr += len;
 800e426:	89fa      	ldrh	r2, [r7, #14]
 800e428:	88bb      	ldrh	r3, [r7, #4]
 800e42a:	4413      	add	r3, r2
 800e42c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800e42e:	79fb      	ldrb	r3, [r7, #7]
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	3301      	adds	r3, #1
 800e434:	00db      	lsls	r3, r3, #3
 800e436:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800e43a:	461a      	mov	r2, r3
 800e43c:	89fb      	ldrh	r3, [r7, #14]
 800e43e:	0a1b      	lsrs	r3, r3, #8
 800e440:	b29b      	uxth	r3, r3
 800e442:	b2db      	uxtb	r3, r3
 800e444:	4619      	mov	r1, r3
 800e446:	4610      	mov	r0, r2
 800e448:	f7ff fdb6 	bl	800dfb8 <WIZCHIP_WRITE>
 800e44c:	79fb      	ldrb	r3, [r7, #7]
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	3301      	adds	r3, #1
 800e452:	00db      	lsls	r3, r3, #3
 800e454:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800e458:	461a      	mov	r2, r3
 800e45a:	89fb      	ldrh	r3, [r7, #14]
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	4619      	mov	r1, r3
 800e460:	4610      	mov	r0, r2
 800e462:	f7ff fda9 	bl	800dfb8 <WIZCHIP_WRITE>
 800e466:	e000      	b.n	800e46a <wiz_recv_data+0xb2>
   if(len == 0) return;
 800e468:	bf00      	nop
}
 800e46a:	3714      	adds	r7, #20
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd90      	pop	{r4, r7, pc}

0800e470 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800e470:	b590      	push	{r4, r7, lr}
 800e472:	b085      	sub	sp, #20
 800e474:	af00      	add	r7, sp, #0
 800e476:	4603      	mov	r3, r0
 800e478:	460a      	mov	r2, r1
 800e47a:	71fb      	strb	r3, [r7, #7]
 800e47c:	4613      	mov	r3, r2
 800e47e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800e480:	2300      	movs	r3, #0
 800e482:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 800e484:	79fb      	ldrb	r3, [r7, #7]
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	3301      	adds	r3, #1
 800e48a:	00db      	lsls	r3, r3, #3
 800e48c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800e490:	4618      	mov	r0, r3
 800e492:	f7ff fd45 	bl	800df20 <WIZCHIP_READ>
 800e496:	4603      	mov	r3, r0
 800e498:	b29b      	uxth	r3, r3
 800e49a:	021b      	lsls	r3, r3, #8
 800e49c:	b29c      	uxth	r4, r3
 800e49e:	79fb      	ldrb	r3, [r7, #7]
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	00db      	lsls	r3, r3, #3
 800e4a6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7ff fd38 	bl	800df20 <WIZCHIP_READ>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	4423      	add	r3, r4
 800e4b6:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 800e4b8:	89fa      	ldrh	r2, [r7, #14]
 800e4ba:	88bb      	ldrh	r3, [r7, #4]
 800e4bc:	4413      	add	r3, r2
 800e4be:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800e4c0:	79fb      	ldrb	r3, [r7, #7]
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	00db      	lsls	r3, r3, #3
 800e4c8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	89fb      	ldrh	r3, [r7, #14]
 800e4d0:	0a1b      	lsrs	r3, r3, #8
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	4610      	mov	r0, r2
 800e4da:	f7ff fd6d 	bl	800dfb8 <WIZCHIP_WRITE>
 800e4de:	79fb      	ldrb	r3, [r7, #7]
 800e4e0:	009b      	lsls	r3, r3, #2
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	00db      	lsls	r3, r3, #3
 800e4e6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	89fb      	ldrh	r3, [r7, #14]
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	4610      	mov	r0, r2
 800e4f4:	f7ff fd60 	bl	800dfb8 <WIZCHIP_WRITE>
}
 800e4f8:	bf00      	nop
 800e4fa:	3714      	adds	r7, #20
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd90      	pop	{r4, r7, pc}

0800e500 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800e500:	b590      	push	{r4, r7, lr}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
 800e506:	4604      	mov	r4, r0
 800e508:	4608      	mov	r0, r1
 800e50a:	4611      	mov	r1, r2
 800e50c:	461a      	mov	r2, r3
 800e50e:	4623      	mov	r3, r4
 800e510:	71fb      	strb	r3, [r7, #7]
 800e512:	4603      	mov	r3, r0
 800e514:	71bb      	strb	r3, [r7, #6]
 800e516:	460b      	mov	r3, r1
 800e518:	80bb      	strh	r3, [r7, #4]
 800e51a:	4613      	mov	r3, r2
 800e51c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800e51e:	79fb      	ldrb	r3, [r7, #7]
 800e520:	2b08      	cmp	r3, #8
 800e522:	d902      	bls.n	800e52a <socket+0x2a>
 800e524:	f04f 33ff 	mov.w	r3, #4294967295
 800e528:	e0f0      	b.n	800e70c <socket+0x20c>
	switch(protocol)
 800e52a:	79bb      	ldrb	r3, [r7, #6]
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d005      	beq.n	800e53c <socket+0x3c>
 800e530:	2b00      	cmp	r3, #0
 800e532:	dd11      	ble.n	800e558 <socket+0x58>
 800e534:	3b02      	subs	r3, #2
 800e536:	2b02      	cmp	r3, #2
 800e538:	d80e      	bhi.n	800e558 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800e53a:	e011      	b.n	800e560 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800e53c:	f107 030c 	add.w	r3, r7, #12
 800e540:	2204      	movs	r2, #4
 800e542:	4619      	mov	r1, r3
 800e544:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800e548:	f7ff fd84 	bl	800e054 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d105      	bne.n	800e55e <socket+0x5e>
 800e552:	f06f 0302 	mvn.w	r3, #2
 800e556:	e0d9      	b.n	800e70c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 800e558:	f06f 0304 	mvn.w	r3, #4
 800e55c:	e0d6      	b.n	800e70c <socket+0x20c>
	    break;
 800e55e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800e560:	78fb      	ldrb	r3, [r7, #3]
 800e562:	f003 0304 	and.w	r3, r3, #4
 800e566:	2b00      	cmp	r3, #0
 800e568:	d002      	beq.n	800e570 <socket+0x70>
 800e56a:	f06f 0305 	mvn.w	r3, #5
 800e56e:	e0cd      	b.n	800e70c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800e570:	78fb      	ldrb	r3, [r7, #3]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d028      	beq.n	800e5c8 <socket+0xc8>
	{
   	switch(protocol)
 800e576:	79bb      	ldrb	r3, [r7, #6]
 800e578:	2b01      	cmp	r3, #1
 800e57a:	d002      	beq.n	800e582 <socket+0x82>
 800e57c:	2b02      	cmp	r3, #2
 800e57e:	d008      	beq.n	800e592 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800e580:	e022      	b.n	800e5c8 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800e582:	78fb      	ldrb	r3, [r7, #3]
 800e584:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d11a      	bne.n	800e5c2 <socket+0xc2>
 800e58c:	f06f 0305 	mvn.w	r3, #5
 800e590:	e0bc      	b.n	800e70c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 800e592:	78fb      	ldrb	r3, [r7, #3]
 800e594:	f003 0320 	and.w	r3, r3, #32
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d006      	beq.n	800e5aa <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800e59c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	db02      	blt.n	800e5aa <socket+0xaa>
 800e5a4:	f06f 0305 	mvn.w	r3, #5
 800e5a8:	e0b0      	b.n	800e70c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 800e5aa:	78fb      	ldrb	r3, [r7, #3]
 800e5ac:	f003 0310 	and.w	r3, r3, #16
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d008      	beq.n	800e5c6 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800e5b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	db04      	blt.n	800e5c6 <socket+0xc6>
 800e5bc:	f06f 0305 	mvn.w	r3, #5
 800e5c0:	e0a4      	b.n	800e70c <socket+0x20c>
   	      break;
 800e5c2:	bf00      	nop
 800e5c4:	e000      	b.n	800e5c8 <socket+0xc8>
   	      break;
 800e5c6:	bf00      	nop
   	}
   }
	close(sn);
 800e5c8:	79fb      	ldrb	r3, [r7, #7]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f000 f8ac 	bl	800e728 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800e5d0:	79fb      	ldrb	r3, [r7, #7]
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	00db      	lsls	r3, r3, #3
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5de:	f023 030f 	bic.w	r3, r3, #15
 800e5e2:	b25a      	sxtb	r2, r3
 800e5e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e5e8:	4313      	orrs	r3, r2
 800e5ea:	b25b      	sxtb	r3, r3
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	f7ff fce2 	bl	800dfb8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800e5f4:	88bb      	ldrh	r3, [r7, #4]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d110      	bne.n	800e61c <socket+0x11c>
	{
	   port = sock_any_port++;
 800e5fa:	4b46      	ldr	r3, [pc, #280]	; (800e714 <socket+0x214>)
 800e5fc:	881b      	ldrh	r3, [r3, #0]
 800e5fe:	1c5a      	adds	r2, r3, #1
 800e600:	b291      	uxth	r1, r2
 800e602:	4a44      	ldr	r2, [pc, #272]	; (800e714 <socket+0x214>)
 800e604:	8011      	strh	r1, [r2, #0]
 800e606:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800e608:	4b42      	ldr	r3, [pc, #264]	; (800e714 <socket+0x214>)
 800e60a:	881b      	ldrh	r3, [r3, #0]
 800e60c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800e610:	4293      	cmp	r3, r2
 800e612:	d103      	bne.n	800e61c <socket+0x11c>
 800e614:	4b3f      	ldr	r3, [pc, #252]	; (800e714 <socket+0x214>)
 800e616:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e61a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800e61c:	79fb      	ldrb	r3, [r7, #7]
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	3301      	adds	r3, #1
 800e622:	00db      	lsls	r3, r3, #3
 800e624:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e628:	461a      	mov	r2, r3
 800e62a:	88bb      	ldrh	r3, [r7, #4]
 800e62c:	0a1b      	lsrs	r3, r3, #8
 800e62e:	b29b      	uxth	r3, r3
 800e630:	b2db      	uxtb	r3, r3
 800e632:	4619      	mov	r1, r3
 800e634:	4610      	mov	r0, r2
 800e636:	f7ff fcbf 	bl	800dfb8 <WIZCHIP_WRITE>
 800e63a:	79fb      	ldrb	r3, [r7, #7]
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	3301      	adds	r3, #1
 800e640:	00db      	lsls	r3, r3, #3
 800e642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e646:	461a      	mov	r2, r3
 800e648:	88bb      	ldrh	r3, [r7, #4]
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	4619      	mov	r1, r3
 800e64e:	4610      	mov	r0, r2
 800e650:	f7ff fcb2 	bl	800dfb8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800e654:	79fb      	ldrb	r3, [r7, #7]
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	3301      	adds	r3, #1
 800e65a:	00db      	lsls	r3, r3, #3
 800e65c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e660:	2101      	movs	r1, #1
 800e662:	4618      	mov	r0, r3
 800e664:	f7ff fca8 	bl	800dfb8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800e668:	bf00      	nop
 800e66a:	79fb      	ldrb	r3, [r7, #7]
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	3301      	adds	r3, #1
 800e670:	00db      	lsls	r3, r3, #3
 800e672:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e676:	4618      	mov	r0, r3
 800e678:	f7ff fc52 	bl	800df20 <WIZCHIP_READ>
 800e67c:	4603      	mov	r3, r0
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1f3      	bne.n	800e66a <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800e682:	79fb      	ldrb	r3, [r7, #7]
 800e684:	2201      	movs	r2, #1
 800e686:	fa02 f303 	lsl.w	r3, r2, r3
 800e68a:	b21b      	sxth	r3, r3
 800e68c:	43db      	mvns	r3, r3
 800e68e:	b21a      	sxth	r2, r3
 800e690:	4b21      	ldr	r3, [pc, #132]	; (800e718 <socket+0x218>)
 800e692:	881b      	ldrh	r3, [r3, #0]
 800e694:	b21b      	sxth	r3, r3
 800e696:	4013      	ands	r3, r2
 800e698:	b21b      	sxth	r3, r3
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	4b1e      	ldr	r3, [pc, #120]	; (800e718 <socket+0x218>)
 800e69e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800e6a0:	78fb      	ldrb	r3, [r7, #3]
 800e6a2:	f003 0201 	and.w	r2, r3, #1
 800e6a6:	79fb      	ldrb	r3, [r7, #7]
 800e6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e6ac:	b21a      	sxth	r2, r3
 800e6ae:	4b1a      	ldr	r3, [pc, #104]	; (800e718 <socket+0x218>)
 800e6b0:	881b      	ldrh	r3, [r3, #0]
 800e6b2:	b21b      	sxth	r3, r3
 800e6b4:	4313      	orrs	r3, r2
 800e6b6:	b21b      	sxth	r3, r3
 800e6b8:	b29a      	uxth	r2, r3
 800e6ba:	4b17      	ldr	r3, [pc, #92]	; (800e718 <socket+0x218>)
 800e6bc:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800e6be:	79fb      	ldrb	r3, [r7, #7]
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800e6c6:	b21b      	sxth	r3, r3
 800e6c8:	43db      	mvns	r3, r3
 800e6ca:	b21a      	sxth	r2, r3
 800e6cc:	4b13      	ldr	r3, [pc, #76]	; (800e71c <socket+0x21c>)
 800e6ce:	881b      	ldrh	r3, [r3, #0]
 800e6d0:	b21b      	sxth	r3, r3
 800e6d2:	4013      	ands	r3, r2
 800e6d4:	b21b      	sxth	r3, r3
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	4b10      	ldr	r3, [pc, #64]	; (800e71c <socket+0x21c>)
 800e6da:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800e6dc:	79fb      	ldrb	r3, [r7, #7]
 800e6de:	4a10      	ldr	r2, [pc, #64]	; (800e720 <socket+0x220>)
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800e6e6:	79fb      	ldrb	r3, [r7, #7]
 800e6e8:	4a0e      	ldr	r2, [pc, #56]	; (800e724 <socket+0x224>)
 800e6ea:	2100      	movs	r1, #0
 800e6ec:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800e6ee:	bf00      	nop
 800e6f0:	79fb      	ldrb	r3, [r7, #7]
 800e6f2:	009b      	lsls	r3, r3, #2
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	00db      	lsls	r3, r3, #3
 800e6f8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7ff fc0f 	bl	800df20 <WIZCHIP_READ>
 800e702:	4603      	mov	r3, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d0f3      	beq.n	800e6f0 <socket+0x1f0>
   return (int8_t)sn;
 800e708:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800e70c:	4618      	mov	r0, r3
 800e70e:	3714      	adds	r7, #20
 800e710:	46bd      	mov	sp, r7
 800e712:	bd90      	pop	{r4, r7, pc}
 800e714:	200001ce 	.word	0x200001ce
 800e718:	200010cc 	.word	0x200010cc
 800e71c:	200010ce 	.word	0x200010ce
 800e720:	200010d0 	.word	0x200010d0
 800e724:	200010e0 	.word	0x200010e0

0800e728 <close>:

int8_t close(uint8_t sn)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	4603      	mov	r3, r0
 800e730:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800e732:	79fb      	ldrb	r3, [r7, #7]
 800e734:	2b08      	cmp	r3, #8
 800e736:	d902      	bls.n	800e73e <close+0x16>
 800e738:	f04f 33ff 	mov.w	r3, #4294967295
 800e73c:	e055      	b.n	800e7ea <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800e73e:	79fb      	ldrb	r3, [r7, #7]
 800e740:	009b      	lsls	r3, r3, #2
 800e742:	3301      	adds	r3, #1
 800e744:	00db      	lsls	r3, r3, #3
 800e746:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e74a:	2110      	movs	r1, #16
 800e74c:	4618      	mov	r0, r3
 800e74e:	f7ff fc33 	bl	800dfb8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800e752:	bf00      	nop
 800e754:	79fb      	ldrb	r3, [r7, #7]
 800e756:	009b      	lsls	r3, r3, #2
 800e758:	3301      	adds	r3, #1
 800e75a:	00db      	lsls	r3, r3, #3
 800e75c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e760:	4618      	mov	r0, r3
 800e762:	f7ff fbdd 	bl	800df20 <WIZCHIP_READ>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1f3      	bne.n	800e754 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800e76c:	79fb      	ldrb	r3, [r7, #7]
 800e76e:	009b      	lsls	r3, r3, #2
 800e770:	3301      	adds	r3, #1
 800e772:	00db      	lsls	r3, r3, #3
 800e774:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e778:	211f      	movs	r1, #31
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7ff fc1c 	bl	800dfb8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800e780:	79fb      	ldrb	r3, [r7, #7]
 800e782:	2201      	movs	r2, #1
 800e784:	fa02 f303 	lsl.w	r3, r2, r3
 800e788:	b21b      	sxth	r3, r3
 800e78a:	43db      	mvns	r3, r3
 800e78c:	b21a      	sxth	r2, r3
 800e78e:	4b19      	ldr	r3, [pc, #100]	; (800e7f4 <close+0xcc>)
 800e790:	881b      	ldrh	r3, [r3, #0]
 800e792:	b21b      	sxth	r3, r3
 800e794:	4013      	ands	r3, r2
 800e796:	b21b      	sxth	r3, r3
 800e798:	b29a      	uxth	r2, r3
 800e79a:	4b16      	ldr	r3, [pc, #88]	; (800e7f4 <close+0xcc>)
 800e79c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800e79e:	79fb      	ldrb	r3, [r7, #7]
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	fa02 f303 	lsl.w	r3, r2, r3
 800e7a6:	b21b      	sxth	r3, r3
 800e7a8:	43db      	mvns	r3, r3
 800e7aa:	b21a      	sxth	r2, r3
 800e7ac:	4b12      	ldr	r3, [pc, #72]	; (800e7f8 <close+0xd0>)
 800e7ae:	881b      	ldrh	r3, [r3, #0]
 800e7b0:	b21b      	sxth	r3, r3
 800e7b2:	4013      	ands	r3, r2
 800e7b4:	b21b      	sxth	r3, r3
 800e7b6:	b29a      	uxth	r2, r3
 800e7b8:	4b0f      	ldr	r3, [pc, #60]	; (800e7f8 <close+0xd0>)
 800e7ba:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800e7bc:	79fb      	ldrb	r3, [r7, #7]
 800e7be:	4a0f      	ldr	r2, [pc, #60]	; (800e7fc <close+0xd4>)
 800e7c0:	2100      	movs	r1, #0
 800e7c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800e7c6:	79fb      	ldrb	r3, [r7, #7]
 800e7c8:	4a0d      	ldr	r2, [pc, #52]	; (800e800 <close+0xd8>)
 800e7ca:	2100      	movs	r1, #0
 800e7cc:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800e7ce:	bf00      	nop
 800e7d0:	79fb      	ldrb	r3, [r7, #7]
 800e7d2:	009b      	lsls	r3, r3, #2
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	00db      	lsls	r3, r3, #3
 800e7d8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7ff fb9f 	bl	800df20 <WIZCHIP_READ>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d1f3      	bne.n	800e7d0 <close+0xa8>
	return SOCK_OK;
 800e7e8:	2301      	movs	r3, #1
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	200010cc 	.word	0x200010cc
 800e7f8:	200010ce 	.word	0x200010ce
 800e7fc:	200010d0 	.word	0x200010d0
 800e800:	200010e0 	.word	0x200010e0

0800e804 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b084      	sub	sp, #16
 800e808:	af00      	add	r7, sp, #0
 800e80a:	4603      	mov	r3, r0
 800e80c:	6039      	str	r1, [r7, #0]
 800e80e:	71fb      	strb	r3, [r7, #7]
 800e810:	4613      	mov	r3, r2
 800e812:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 800e814:	79fb      	ldrb	r3, [r7, #7]
 800e816:	2b08      	cmp	r3, #8
 800e818:	d902      	bls.n	800e820 <connect+0x1c>
 800e81a:	f04f 33ff 	mov.w	r3, #4294967295
 800e81e:	e0c6      	b.n	800e9ae <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800e820:	79fb      	ldrb	r3, [r7, #7]
 800e822:	009b      	lsls	r3, r3, #2
 800e824:	3301      	adds	r3, #1
 800e826:	00db      	lsls	r3, r3, #3
 800e828:	4618      	mov	r0, r3
 800e82a:	f7ff fb79 	bl	800df20 <WIZCHIP_READ>
 800e82e:	4603      	mov	r3, r0
 800e830:	f003 030f 	and.w	r3, r3, #15
 800e834:	2b01      	cmp	r3, #1
 800e836:	d002      	beq.n	800e83e <connect+0x3a>
 800e838:	f06f 0304 	mvn.w	r3, #4
 800e83c:	e0b7      	b.n	800e9ae <connect+0x1aa>
   CHECK_SOCKINIT();
 800e83e:	79fb      	ldrb	r3, [r7, #7]
 800e840:	009b      	lsls	r3, r3, #2
 800e842:	3301      	adds	r3, #1
 800e844:	00db      	lsls	r3, r3, #3
 800e846:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7ff fb68 	bl	800df20 <WIZCHIP_READ>
 800e850:	4603      	mov	r3, r0
 800e852:	2b13      	cmp	r3, #19
 800e854:	d002      	beq.n	800e85c <connect+0x58>
 800e856:	f06f 0302 	mvn.w	r3, #2
 800e85a:	e0a8      	b.n	800e9ae <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	021b      	lsls	r3, r3, #8
 800e866:	683a      	ldr	r2, [r7, #0]
 800e868:	3201      	adds	r2, #1
 800e86a:	7812      	ldrb	r2, [r2, #0]
 800e86c:	4413      	add	r3, r2
 800e86e:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	021b      	lsls	r3, r3, #8
 800e874:	683a      	ldr	r2, [r7, #0]
 800e876:	3202      	adds	r2, #2
 800e878:	7812      	ldrb	r2, [r2, #0]
 800e87a:	4413      	add	r3, r2
 800e87c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	021b      	lsls	r3, r3, #8
 800e882:	683a      	ldr	r2, [r7, #0]
 800e884:	3203      	adds	r2, #3
 800e886:	7812      	ldrb	r2, [r2, #0]
 800e888:	4413      	add	r3, r2
 800e88a:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e892:	d002      	beq.n	800e89a <connect+0x96>
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d102      	bne.n	800e8a0 <connect+0x9c>
 800e89a:	f06f 030b 	mvn.w	r3, #11
 800e89e:	e086      	b.n	800e9ae <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 800e8a0:	88bb      	ldrh	r3, [r7, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d102      	bne.n	800e8ac <connect+0xa8>
 800e8a6:	f06f 030a 	mvn.w	r3, #10
 800e8aa:	e080      	b.n	800e9ae <connect+0x1aa>
	setSn_DIPR(sn,addr);
 800e8ac:	79fb      	ldrb	r3, [r7, #7]
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	00db      	lsls	r3, r3, #3
 800e8b4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800e8b8:	2204      	movs	r2, #4
 800e8ba:	6839      	ldr	r1, [r7, #0]
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7ff fc29 	bl	800e114 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800e8c2:	79fb      	ldrb	r3, [r7, #7]
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	00db      	lsls	r3, r3, #3
 800e8ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	88bb      	ldrh	r3, [r7, #4]
 800e8d2:	0a1b      	lsrs	r3, r3, #8
 800e8d4:	b29b      	uxth	r3, r3
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4610      	mov	r0, r2
 800e8dc:	f7ff fb6c 	bl	800dfb8 <WIZCHIP_WRITE>
 800e8e0:	79fb      	ldrb	r3, [r7, #7]
 800e8e2:	009b      	lsls	r3, r3, #2
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	00db      	lsls	r3, r3, #3
 800e8e8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	88bb      	ldrh	r3, [r7, #4]
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	4610      	mov	r0, r2
 800e8f6:	f7ff fb5f 	bl	800dfb8 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800e8fa:	79fb      	ldrb	r3, [r7, #7]
 800e8fc:	009b      	lsls	r3, r3, #2
 800e8fe:	3301      	adds	r3, #1
 800e900:	00db      	lsls	r3, r3, #3
 800e902:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e906:	2104      	movs	r1, #4
 800e908:	4618      	mov	r0, r3
 800e90a:	f7ff fb55 	bl	800dfb8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800e90e:	bf00      	nop
 800e910:	79fb      	ldrb	r3, [r7, #7]
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	3301      	adds	r3, #1
 800e916:	00db      	lsls	r3, r3, #3
 800e918:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7ff faff 	bl	800df20 <WIZCHIP_READ>
 800e922:	4603      	mov	r3, r0
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1f3      	bne.n	800e910 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800e928:	4b23      	ldr	r3, [pc, #140]	; (800e9b8 <connect+0x1b4>)
 800e92a:	881b      	ldrh	r3, [r3, #0]
 800e92c:	461a      	mov	r2, r3
 800e92e:	79fb      	ldrb	r3, [r7, #7]
 800e930:	fa42 f303 	asr.w	r3, r2, r3
 800e934:	f003 0301 	and.w	r3, r3, #1
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d02b      	beq.n	800e994 <connect+0x190>
 800e93c:	2300      	movs	r3, #0
 800e93e:	e036      	b.n	800e9ae <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800e940:	79fb      	ldrb	r3, [r7, #7]
 800e942:	009b      	lsls	r3, r3, #2
 800e944:	3301      	adds	r3, #1
 800e946:	00db      	lsls	r3, r3, #3
 800e948:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7ff fae7 	bl	800df20 <WIZCHIP_READ>
 800e952:	4603      	mov	r3, r0
 800e954:	f003 0308 	and.w	r3, r3, #8
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d00c      	beq.n	800e976 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 800e95c:	79fb      	ldrb	r3, [r7, #7]
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	3301      	adds	r3, #1
 800e962:	00db      	lsls	r3, r3, #3
 800e964:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e968:	2108      	movs	r1, #8
 800e96a:	4618      	mov	r0, r3
 800e96c:	f7ff fb24 	bl	800dfb8 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 800e970:	f06f 030c 	mvn.w	r3, #12
 800e974:	e01b      	b.n	800e9ae <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 800e976:	79fb      	ldrb	r3, [r7, #7]
 800e978:	009b      	lsls	r3, r3, #2
 800e97a:	3301      	adds	r3, #1
 800e97c:	00db      	lsls	r3, r3, #3
 800e97e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800e982:	4618      	mov	r0, r3
 800e984:	f7ff facc 	bl	800df20 <WIZCHIP_READ>
 800e988:	4603      	mov	r3, r0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d102      	bne.n	800e994 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 800e98e:	f06f 0303 	mvn.w	r3, #3
 800e992:	e00c      	b.n	800e9ae <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 800e994:	79fb      	ldrb	r3, [r7, #7]
 800e996:	009b      	lsls	r3, r3, #2
 800e998:	3301      	adds	r3, #1
 800e99a:	00db      	lsls	r3, r3, #3
 800e99c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7ff fabd 	bl	800df20 <WIZCHIP_READ>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b17      	cmp	r3, #23
 800e9aa:	d1c9      	bne.n	800e940 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 800e9ac:	2301      	movs	r3, #1
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3710      	adds	r7, #16
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	200010cc 	.word	0x200010cc

0800e9bc <disconnect>:

int8_t disconnect(uint8_t sn)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800e9c6:	79fb      	ldrb	r3, [r7, #7]
 800e9c8:	2b08      	cmp	r3, #8
 800e9ca:	d902      	bls.n	800e9d2 <disconnect+0x16>
 800e9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e9d0:	e062      	b.n	800ea98 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800e9d2:	79fb      	ldrb	r3, [r7, #7]
 800e9d4:	009b      	lsls	r3, r3, #2
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	00db      	lsls	r3, r3, #3
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7ff faa0 	bl	800df20 <WIZCHIP_READ>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	f003 030f 	and.w	r3, r3, #15
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d002      	beq.n	800e9f0 <disconnect+0x34>
 800e9ea:	f06f 0304 	mvn.w	r3, #4
 800e9ee:	e053      	b.n	800ea98 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800e9f0:	79fb      	ldrb	r3, [r7, #7]
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	00db      	lsls	r3, r3, #3
 800e9f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e9fc:	2108      	movs	r1, #8
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7ff fada 	bl	800dfb8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800ea04:	bf00      	nop
 800ea06:	79fb      	ldrb	r3, [r7, #7]
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	3301      	adds	r3, #1
 800ea0c:	00db      	lsls	r3, r3, #3
 800ea0e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7ff fa84 	bl	800df20 <WIZCHIP_READ>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d1f3      	bne.n	800ea06 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800ea1e:	79fb      	ldrb	r3, [r7, #7]
 800ea20:	2201      	movs	r2, #1
 800ea22:	fa02 f303 	lsl.w	r3, r2, r3
 800ea26:	b21b      	sxth	r3, r3
 800ea28:	43db      	mvns	r3, r3
 800ea2a:	b21a      	sxth	r2, r3
 800ea2c:	4b1c      	ldr	r3, [pc, #112]	; (800eaa0 <disconnect+0xe4>)
 800ea2e:	881b      	ldrh	r3, [r3, #0]
 800ea30:	b21b      	sxth	r3, r3
 800ea32:	4013      	ands	r3, r2
 800ea34:	b21b      	sxth	r3, r3
 800ea36:	b29a      	uxth	r2, r3
 800ea38:	4b19      	ldr	r3, [pc, #100]	; (800eaa0 <disconnect+0xe4>)
 800ea3a:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800ea3c:	4b19      	ldr	r3, [pc, #100]	; (800eaa4 <disconnect+0xe8>)
 800ea3e:	881b      	ldrh	r3, [r3, #0]
 800ea40:	461a      	mov	r2, r3
 800ea42:	79fb      	ldrb	r3, [r7, #7]
 800ea44:	fa42 f303 	asr.w	r3, r2, r3
 800ea48:	f003 0301 	and.w	r3, r3, #1
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d016      	beq.n	800ea7e <disconnect+0xc2>
 800ea50:	2300      	movs	r3, #0
 800ea52:	e021      	b.n	800ea98 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800ea54:	79fb      	ldrb	r3, [r7, #7]
 800ea56:	009b      	lsls	r3, r3, #2
 800ea58:	3301      	adds	r3, #1
 800ea5a:	00db      	lsls	r3, r3, #3
 800ea5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7ff fa5d 	bl	800df20 <WIZCHIP_READ>
 800ea66:	4603      	mov	r3, r0
 800ea68:	f003 0308 	and.w	r3, r3, #8
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d006      	beq.n	800ea7e <disconnect+0xc2>
	   {
	      close(sn);
 800ea70:	79fb      	ldrb	r3, [r7, #7]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7ff fe58 	bl	800e728 <close>
	      return SOCKERR_TIMEOUT;
 800ea78:	f06f 030c 	mvn.w	r3, #12
 800ea7c:	e00c      	b.n	800ea98 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800ea7e:	79fb      	ldrb	r3, [r7, #7]
 800ea80:	009b      	lsls	r3, r3, #2
 800ea82:	3301      	adds	r3, #1
 800ea84:	00db      	lsls	r3, r3, #3
 800ea86:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7ff fa48 	bl	800df20 <WIZCHIP_READ>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d1de      	bne.n	800ea54 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 800ea96:	2301      	movs	r3, #1
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	200010ce 	.word	0x200010ce
 800eaa4:	200010cc 	.word	0x200010cc

0800eaa8 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	4603      	mov	r3, r0
 800eab0:	6039      	str	r1, [r7, #0]
 800eab2:	71fb      	strb	r3, [r7, #7]
 800eab4:	4613      	mov	r3, r2
 800eab6:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800eab8:	2300      	movs	r3, #0
 800eaba:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800eabc:	2300      	movs	r3, #0
 800eabe:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800eac0:	79fb      	ldrb	r3, [r7, #7]
 800eac2:	2b08      	cmp	r3, #8
 800eac4:	d902      	bls.n	800eacc <send+0x24>
 800eac6:	f04f 33ff 	mov.w	r3, #4294967295
 800eaca:	e0de      	b.n	800ec8a <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800eacc:	79fb      	ldrb	r3, [r7, #7]
 800eace:	009b      	lsls	r3, r3, #2
 800ead0:	3301      	adds	r3, #1
 800ead2:	00db      	lsls	r3, r3, #3
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7ff fa23 	bl	800df20 <WIZCHIP_READ>
 800eada:	4603      	mov	r3, r0
 800eadc:	f003 030f 	and.w	r3, r3, #15
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d002      	beq.n	800eaea <send+0x42>
 800eae4:	f06f 0304 	mvn.w	r3, #4
 800eae8:	e0cf      	b.n	800ec8a <send+0x1e2>
   CHECK_SOCKDATA();
 800eaea:	88bb      	ldrh	r3, [r7, #4]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d102      	bne.n	800eaf6 <send+0x4e>
 800eaf0:	f06f 030d 	mvn.w	r3, #13
 800eaf4:	e0c9      	b.n	800ec8a <send+0x1e2>
   tmp = getSn_SR(sn);
 800eaf6:	79fb      	ldrb	r3, [r7, #7]
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	3301      	adds	r3, #1
 800eafc:	00db      	lsls	r3, r3, #3
 800eafe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7ff fa0c 	bl	800df20 <WIZCHIP_READ>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800eb0c:	7bfb      	ldrb	r3, [r7, #15]
 800eb0e:	2b17      	cmp	r3, #23
 800eb10:	d005      	beq.n	800eb1e <send+0x76>
 800eb12:	7bfb      	ldrb	r3, [r7, #15]
 800eb14:	2b1c      	cmp	r3, #28
 800eb16:	d002      	beq.n	800eb1e <send+0x76>
 800eb18:	f06f 0306 	mvn.w	r3, #6
 800eb1c:	e0b5      	b.n	800ec8a <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800eb1e:	4b5d      	ldr	r3, [pc, #372]	; (800ec94 <send+0x1ec>)
 800eb20:	881b      	ldrh	r3, [r3, #0]
 800eb22:	461a      	mov	r2, r3
 800eb24:	79fb      	ldrb	r3, [r7, #7]
 800eb26:	fa42 f303 	asr.w	r3, r2, r3
 800eb2a:	f003 0301 	and.w	r3, r3, #1
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d039      	beq.n	800eba6 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800eb32:	79fb      	ldrb	r3, [r7, #7]
 800eb34:	009b      	lsls	r3, r3, #2
 800eb36:	3301      	adds	r3, #1
 800eb38:	00db      	lsls	r3, r3, #3
 800eb3a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7ff f9ee 	bl	800df20 <WIZCHIP_READ>
 800eb44:	4603      	mov	r3, r0
 800eb46:	f003 031f 	and.w	r3, r3, #31
 800eb4a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800eb4c:	7bfb      	ldrb	r3, [r7, #15]
 800eb4e:	f003 0310 	and.w	r3, r3, #16
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d019      	beq.n	800eb8a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800eb56:	79fb      	ldrb	r3, [r7, #7]
 800eb58:	009b      	lsls	r3, r3, #2
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	00db      	lsls	r3, r3, #3
 800eb5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800eb62:	2110      	movs	r1, #16
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7ff fa27 	bl	800dfb8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800eb6a:	79fb      	ldrb	r3, [r7, #7]
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	fa02 f303 	lsl.w	r3, r2, r3
 800eb72:	b21b      	sxth	r3, r3
 800eb74:	43db      	mvns	r3, r3
 800eb76:	b21a      	sxth	r2, r3
 800eb78:	4b46      	ldr	r3, [pc, #280]	; (800ec94 <send+0x1ec>)
 800eb7a:	881b      	ldrh	r3, [r3, #0]
 800eb7c:	b21b      	sxth	r3, r3
 800eb7e:	4013      	ands	r3, r2
 800eb80:	b21b      	sxth	r3, r3
 800eb82:	b29a      	uxth	r2, r3
 800eb84:	4b43      	ldr	r3, [pc, #268]	; (800ec94 <send+0x1ec>)
 800eb86:	801a      	strh	r2, [r3, #0]
 800eb88:	e00d      	b.n	800eba6 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800eb8a:	7bfb      	ldrb	r3, [r7, #15]
 800eb8c:	f003 0308 	and.w	r3, r3, #8
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d006      	beq.n	800eba2 <send+0xfa>
      {
         close(sn);
 800eb94:	79fb      	ldrb	r3, [r7, #7]
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7ff fdc6 	bl	800e728 <close>
         return SOCKERR_TIMEOUT;
 800eb9c:	f06f 030c 	mvn.w	r3, #12
 800eba0:	e073      	b.n	800ec8a <send+0x1e2>
      }
      else return SOCK_BUSY;
 800eba2:	2300      	movs	r3, #0
 800eba4:	e071      	b.n	800ec8a <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800eba6:	79fb      	ldrb	r3, [r7, #7]
 800eba8:	009b      	lsls	r3, r3, #2
 800ebaa:	3301      	adds	r3, #1
 800ebac:	00db      	lsls	r3, r3, #3
 800ebae:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7ff f9b4 	bl	800df20 <WIZCHIP_READ>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	029b      	lsls	r3, r3, #10
 800ebbe:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800ebc0:	88ba      	ldrh	r2, [r7, #4]
 800ebc2:	89bb      	ldrh	r3, [r7, #12]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d901      	bls.n	800ebcc <send+0x124>
 800ebc8:	89bb      	ldrh	r3, [r7, #12]
 800ebca:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800ebcc:	79fb      	ldrb	r3, [r7, #7]
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7ff fb00 	bl	800e1d4 <getSn_TX_FSR>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800ebd8:	79fb      	ldrb	r3, [r7, #7]
 800ebda:	009b      	lsls	r3, r3, #2
 800ebdc:	3301      	adds	r3, #1
 800ebde:	00db      	lsls	r3, r3, #3
 800ebe0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7ff f99b 	bl	800df20 <WIZCHIP_READ>
 800ebea:	4603      	mov	r3, r0
 800ebec:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800ebee:	7bfb      	ldrb	r3, [r7, #15]
 800ebf0:	2b17      	cmp	r3, #23
 800ebf2:	d009      	beq.n	800ec08 <send+0x160>
 800ebf4:	7bfb      	ldrb	r3, [r7, #15]
 800ebf6:	2b1c      	cmp	r3, #28
 800ebf8:	d006      	beq.n	800ec08 <send+0x160>
      {
         close(sn);
 800ebfa:	79fb      	ldrb	r3, [r7, #7]
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7ff fd93 	bl	800e728 <close>
         return SOCKERR_SOCKSTATUS;
 800ec02:	f06f 0306 	mvn.w	r3, #6
 800ec06:	e040      	b.n	800ec8a <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800ec08:	4b23      	ldr	r3, [pc, #140]	; (800ec98 <send+0x1f0>)
 800ec0a:	881b      	ldrh	r3, [r3, #0]
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	79fb      	ldrb	r3, [r7, #7]
 800ec10:	fa42 f303 	asr.w	r3, r2, r3
 800ec14:	f003 0301 	and.w	r3, r3, #1
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d005      	beq.n	800ec28 <send+0x180>
 800ec1c:	88ba      	ldrh	r2, [r7, #4]
 800ec1e:	89bb      	ldrh	r3, [r7, #12]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d901      	bls.n	800ec28 <send+0x180>
 800ec24:	2300      	movs	r3, #0
 800ec26:	e030      	b.n	800ec8a <send+0x1e2>
      if(len <= freesize) break;
 800ec28:	88ba      	ldrh	r2, [r7, #4]
 800ec2a:	89bb      	ldrh	r3, [r7, #12]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d900      	bls.n	800ec32 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800ec30:	e7cc      	b.n	800ebcc <send+0x124>
      if(len <= freesize) break;
 800ec32:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800ec34:	88ba      	ldrh	r2, [r7, #4]
 800ec36:	79fb      	ldrb	r3, [r7, #7]
 800ec38:	6839      	ldr	r1, [r7, #0]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7ff fb60 	bl	800e300 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800ec40:	79fb      	ldrb	r3, [r7, #7]
 800ec42:	009b      	lsls	r3, r3, #2
 800ec44:	3301      	adds	r3, #1
 800ec46:	00db      	lsls	r3, r3, #3
 800ec48:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ec4c:	2120      	movs	r1, #32
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7ff f9b2 	bl	800dfb8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800ec54:	bf00      	nop
 800ec56:	79fb      	ldrb	r3, [r7, #7]
 800ec58:	009b      	lsls	r3, r3, #2
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	00db      	lsls	r3, r3, #3
 800ec5e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7ff f95c 	bl	800df20 <WIZCHIP_READ>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d1f3      	bne.n	800ec56 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800ec6e:	79fb      	ldrb	r3, [r7, #7]
 800ec70:	2201      	movs	r2, #1
 800ec72:	fa02 f303 	lsl.w	r3, r2, r3
 800ec76:	b21a      	sxth	r2, r3
 800ec78:	4b06      	ldr	r3, [pc, #24]	; (800ec94 <send+0x1ec>)
 800ec7a:	881b      	ldrh	r3, [r3, #0]
 800ec7c:	b21b      	sxth	r3, r3
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	b21b      	sxth	r3, r3
 800ec82:	b29a      	uxth	r2, r3
 800ec84:	4b03      	ldr	r3, [pc, #12]	; (800ec94 <send+0x1ec>)
 800ec86:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800ec88:	88bb      	ldrh	r3, [r7, #4]
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3710      	adds	r7, #16
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	200010ce 	.word	0x200010ce
 800ec98:	200010cc 	.word	0x200010cc

0800ec9c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800ec9c:	b590      	push	{r4, r7, lr}
 800ec9e:	b085      	sub	sp, #20
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	4603      	mov	r3, r0
 800eca4:	6039      	str	r1, [r7, #0]
 800eca6:	71fb      	strb	r3, [r7, #7]
 800eca8:	4613      	mov	r3, r2
 800ecaa:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800ecac:	2300      	movs	r3, #0
 800ecae:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800ecb4:	79fb      	ldrb	r3, [r7, #7]
 800ecb6:	2b08      	cmp	r3, #8
 800ecb8:	d902      	bls.n	800ecc0 <recv+0x24>
 800ecba:	f04f 33ff 	mov.w	r3, #4294967295
 800ecbe:	e09c      	b.n	800edfa <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800ecc0:	79fb      	ldrb	r3, [r7, #7]
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	00db      	lsls	r3, r3, #3
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7ff f929 	bl	800df20 <WIZCHIP_READ>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	f003 030f 	and.w	r3, r3, #15
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d002      	beq.n	800ecde <recv+0x42>
 800ecd8:	f06f 0304 	mvn.w	r3, #4
 800ecdc:	e08d      	b.n	800edfa <recv+0x15e>
   CHECK_SOCKDATA();
 800ecde:	88bb      	ldrh	r3, [r7, #4]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d102      	bne.n	800ecea <recv+0x4e>
 800ece4:	f06f 030d 	mvn.w	r3, #13
 800ece8:	e087      	b.n	800edfa <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800ecea:	79fb      	ldrb	r3, [r7, #7]
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	3301      	adds	r3, #1
 800ecf0:	00db      	lsls	r3, r3, #3
 800ecf2:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7ff f912 	bl	800df20 <WIZCHIP_READ>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	029b      	lsls	r3, r3, #10
 800ed02:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800ed04:	89ba      	ldrh	r2, [r7, #12]
 800ed06:	88bb      	ldrh	r3, [r7, #4]
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d201      	bcs.n	800ed10 <recv+0x74>
 800ed0c:	89bb      	ldrh	r3, [r7, #12]
 800ed0e:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800ed10:	79fb      	ldrb	r3, [r7, #7]
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7ff faa9 	bl	800e26a <getSn_RX_RSR>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800ed1c:	79fb      	ldrb	r3, [r7, #7]
 800ed1e:	009b      	lsls	r3, r3, #2
 800ed20:	3301      	adds	r3, #1
 800ed22:	00db      	lsls	r3, r3, #3
 800ed24:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7ff f8f9 	bl	800df20 <WIZCHIP_READ>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800ed32:	7bfb      	ldrb	r3, [r7, #15]
 800ed34:	2b17      	cmp	r3, #23
 800ed36:	d026      	beq.n	800ed86 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800ed38:	7bfb      	ldrb	r3, [r7, #15]
 800ed3a:	2b1c      	cmp	r3, #28
 800ed3c:	d11c      	bne.n	800ed78 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800ed3e:	89bb      	ldrh	r3, [r7, #12]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d133      	bne.n	800edac <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800ed44:	79fb      	ldrb	r3, [r7, #7]
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7ff fa44 	bl	800e1d4 <getSn_TX_FSR>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	461c      	mov	r4, r3
 800ed50:	79fb      	ldrb	r3, [r7, #7]
 800ed52:	009b      	lsls	r3, r3, #2
 800ed54:	3301      	adds	r3, #1
 800ed56:	00db      	lsls	r3, r3, #3
 800ed58:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7ff f8df 	bl	800df20 <WIZCHIP_READ>
 800ed62:	4603      	mov	r3, r0
 800ed64:	029b      	lsls	r3, r3, #10
 800ed66:	429c      	cmp	r4, r3
 800ed68:	d10d      	bne.n	800ed86 <recv+0xea>
               {
                  close(sn);
 800ed6a:	79fb      	ldrb	r3, [r7, #7]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7ff fcdb 	bl	800e728 <close>
                  return SOCKERR_SOCKSTATUS;
 800ed72:	f06f 0306 	mvn.w	r3, #6
 800ed76:	e040      	b.n	800edfa <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 800ed78:	79fb      	ldrb	r3, [r7, #7]
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7ff fcd4 	bl	800e728 <close>
               return SOCKERR_SOCKSTATUS;
 800ed80:	f06f 0306 	mvn.w	r3, #6
 800ed84:	e039      	b.n	800edfa <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800ed86:	4b1f      	ldr	r3, [pc, #124]	; (800ee04 <recv+0x168>)
 800ed88:	881b      	ldrh	r3, [r3, #0]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	79fb      	ldrb	r3, [r7, #7]
 800ed8e:	fa42 f303 	asr.w	r3, r2, r3
 800ed92:	f003 0301 	and.w	r3, r3, #1
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d004      	beq.n	800eda4 <recv+0x108>
 800ed9a:	89bb      	ldrh	r3, [r7, #12]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d101      	bne.n	800eda4 <recv+0x108>
 800eda0:	2300      	movs	r3, #0
 800eda2:	e02a      	b.n	800edfa <recv+0x15e>
         if(recvsize != 0) break;
 800eda4:	89bb      	ldrh	r3, [r7, #12]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d102      	bne.n	800edb0 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800edaa:	e7b1      	b.n	800ed10 <recv+0x74>
               if(recvsize != 0) break;
 800edac:	bf00      	nop
 800edae:	e000      	b.n	800edb2 <recv+0x116>
         if(recvsize != 0) break;
 800edb0:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800edb2:	89ba      	ldrh	r2, [r7, #12]
 800edb4:	88bb      	ldrh	r3, [r7, #4]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d201      	bcs.n	800edbe <recv+0x122>
 800edba:	89bb      	ldrh	r3, [r7, #12]
 800edbc:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800edbe:	88ba      	ldrh	r2, [r7, #4]
 800edc0:	79fb      	ldrb	r3, [r7, #7]
 800edc2:	6839      	ldr	r1, [r7, #0]
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7ff faf7 	bl	800e3b8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800edca:	79fb      	ldrb	r3, [r7, #7]
 800edcc:	009b      	lsls	r3, r3, #2
 800edce:	3301      	adds	r3, #1
 800edd0:	00db      	lsls	r3, r3, #3
 800edd2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800edd6:	2140      	movs	r1, #64	; 0x40
 800edd8:	4618      	mov	r0, r3
 800edda:	f7ff f8ed 	bl	800dfb8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800edde:	bf00      	nop
 800ede0:	79fb      	ldrb	r3, [r7, #7]
 800ede2:	009b      	lsls	r3, r3, #2
 800ede4:	3301      	adds	r3, #1
 800ede6:	00db      	lsls	r3, r3, #3
 800ede8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800edec:	4618      	mov	r0, r3
 800edee:	f7ff f897 	bl	800df20 <WIZCHIP_READ>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d1f3      	bne.n	800ede0 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800edf8:	88bb      	ldrh	r3, [r7, #4]
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3714      	adds	r7, #20
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd90      	pop	{r4, r7, pc}
 800ee02:	bf00      	nop
 800ee04:	200010cc 	.word	0x200010cc

0800ee08 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b086      	sub	sp, #24
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	60b9      	str	r1, [r7, #8]
 800ee10:	607b      	str	r3, [r7, #4]
 800ee12:	4603      	mov	r3, r0
 800ee14:	73fb      	strb	r3, [r7, #15]
 800ee16:	4613      	mov	r3, r2
 800ee18:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800ee22:	7bfb      	ldrb	r3, [r7, #15]
 800ee24:	2b08      	cmp	r3, #8
 800ee26:	d902      	bls.n	800ee2e <sendto+0x26>
 800ee28:	f04f 33ff 	mov.w	r3, #4294967295
 800ee2c:	e11f      	b.n	800f06e <sendto+0x266>
   switch(getSn_MR(sn) & 0x0F)
 800ee2e:	7bfb      	ldrb	r3, [r7, #15]
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	3301      	adds	r3, #1
 800ee34:	00db      	lsls	r3, r3, #3
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7ff f872 	bl	800df20 <WIZCHIP_READ>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	f003 030f 	and.w	r3, r3, #15
 800ee42:	3b02      	subs	r3, #2
 800ee44:	2b02      	cmp	r3, #2
 800ee46:	d902      	bls.n	800ee4e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800ee48:	f06f 0304 	mvn.w	r3, #4
 800ee4c:	e10f      	b.n	800f06e <sendto+0x266>
         break;
 800ee4e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800ee50:	89bb      	ldrh	r3, [r7, #12]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d102      	bne.n	800ee5c <sendto+0x54>
 800ee56:	f06f 030d 	mvn.w	r3, #13
 800ee5a:	e108      	b.n	800f06e <sendto+0x266>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	021b      	lsls	r3, r3, #8
 800ee66:	687a      	ldr	r2, [r7, #4]
 800ee68:	3201      	adds	r2, #1
 800ee6a:	7812      	ldrb	r2, [r2, #0]
 800ee6c:	4413      	add	r3, r2
 800ee6e:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	021b      	lsls	r3, r3, #8
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	3202      	adds	r2, #2
 800ee78:	7812      	ldrb	r2, [r2, #0]
 800ee7a:	4413      	add	r3, r2
 800ee7c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	021b      	lsls	r3, r3, #8
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	3203      	adds	r2, #3
 800ee86:	7812      	ldrb	r2, [r2, #0]
 800ee88:	4413      	add	r3, r2
 800ee8a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d10e      	bne.n	800eeb0 <sendto+0xa8>
 800ee92:	7bfb      	ldrb	r3, [r7, #15]
 800ee94:	009b      	lsls	r3, r3, #2
 800ee96:	3301      	adds	r3, #1
 800ee98:	00db      	lsls	r3, r3, #3
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7ff f840 	bl	800df20 <WIZCHIP_READ>
 800eea0:	4603      	mov	r3, r0
 800eea2:	f003 0304 	and.w	r3, r3, #4
 800eea6:	2b04      	cmp	r3, #4
 800eea8:	d002      	beq.n	800eeb0 <sendto+0xa8>
 800eeaa:	f06f 030b 	mvn.w	r3, #11
 800eeae:	e0de      	b.n	800f06e <sendto+0x266>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800eeb0:	8c3b      	ldrh	r3, [r7, #32]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d10e      	bne.n	800eed4 <sendto+0xcc>
 800eeb6:	7bfb      	ldrb	r3, [r7, #15]
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	3301      	adds	r3, #1
 800eebc:	00db      	lsls	r3, r3, #3
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7ff f82e 	bl	800df20 <WIZCHIP_READ>
 800eec4:	4603      	mov	r3, r0
 800eec6:	f003 0304 	and.w	r3, r3, #4
 800eeca:	2b04      	cmp	r3, #4
 800eecc:	d002      	beq.n	800eed4 <sendto+0xcc>
 800eece:	f06f 030a 	mvn.w	r3, #10
 800eed2:	e0cc      	b.n	800f06e <sendto+0x266>
   tmp = getSn_SR(sn);
 800eed4:	7bfb      	ldrb	r3, [r7, #15]
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	3301      	adds	r3, #1
 800eeda:	00db      	lsls	r3, r3, #3
 800eedc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7ff f81d 	bl	800df20 <WIZCHIP_READ>
 800eee6:	4603      	mov	r3, r0
 800eee8:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800eeea:	7dfb      	ldrb	r3, [r7, #23]
 800eeec:	2b42      	cmp	r3, #66	; 0x42
 800eeee:	d008      	beq.n	800ef02 <sendto+0xfa>
 800eef0:	7dfb      	ldrb	r3, [r7, #23]
 800eef2:	2b22      	cmp	r3, #34	; 0x22
 800eef4:	d005      	beq.n	800ef02 <sendto+0xfa>
 800eef6:	7dfb      	ldrb	r3, [r7, #23]
 800eef8:	2b32      	cmp	r3, #50	; 0x32
 800eefa:	d002      	beq.n	800ef02 <sendto+0xfa>
 800eefc:	f06f 0306 	mvn.w	r3, #6
 800ef00:	e0b5      	b.n	800f06e <sendto+0x266>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800ef02:	7bfb      	ldrb	r3, [r7, #15]
 800ef04:	009b      	lsls	r3, r3, #2
 800ef06:	3301      	adds	r3, #1
 800ef08:	00db      	lsls	r3, r3, #3
 800ef0a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800ef0e:	2204      	movs	r2, #4
 800ef10:	6879      	ldr	r1, [r7, #4]
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7ff f8fe 	bl	800e114 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 800ef18:	7bfb      	ldrb	r3, [r7, #15]
 800ef1a:	009b      	lsls	r3, r3, #2
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	00db      	lsls	r3, r3, #3
 800ef20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef24:	461a      	mov	r2, r3
 800ef26:	8c3b      	ldrh	r3, [r7, #32]
 800ef28:	0a1b      	lsrs	r3, r3, #8
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	4619      	mov	r1, r3
 800ef30:	4610      	mov	r0, r2
 800ef32:	f7ff f841 	bl	800dfb8 <WIZCHIP_WRITE>
 800ef36:	7bfb      	ldrb	r3, [r7, #15]
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	00db      	lsls	r3, r3, #3
 800ef3e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800ef42:	461a      	mov	r2, r3
 800ef44:	8c3b      	ldrh	r3, [r7, #32]
 800ef46:	b2db      	uxtb	r3, r3
 800ef48:	4619      	mov	r1, r3
 800ef4a:	4610      	mov	r0, r2
 800ef4c:	f7ff f834 	bl	800dfb8 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800ef50:	7bfb      	ldrb	r3, [r7, #15]
 800ef52:	009b      	lsls	r3, r3, #2
 800ef54:	3301      	adds	r3, #1
 800ef56:	00db      	lsls	r3, r3, #3
 800ef58:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7fe ffdf 	bl	800df20 <WIZCHIP_READ>
 800ef62:	4603      	mov	r3, r0
 800ef64:	b29b      	uxth	r3, r3
 800ef66:	029b      	lsls	r3, r3, #10
 800ef68:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800ef6a:	89ba      	ldrh	r2, [r7, #12]
 800ef6c:	8abb      	ldrh	r3, [r7, #20]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d901      	bls.n	800ef76 <sendto+0x16e>
 800ef72:	8abb      	ldrh	r3, [r7, #20]
 800ef74:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
	  //uartPrintf(_DEF_CH1,"> test 1...\r\n");
      freesize = getSn_TX_FSR(sn);
 800ef76:	7bfb      	ldrb	r3, [r7, #15]
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7ff f92b 	bl	800e1d4 <getSn_TX_FSR>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800ef82:	7bfb      	ldrb	r3, [r7, #15]
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	3301      	adds	r3, #1
 800ef88:	00db      	lsls	r3, r3, #3
 800ef8a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7fe ffc6 	bl	800df20 <WIZCHIP_READ>
 800ef94:	4603      	mov	r3, r0
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d102      	bne.n	800efa0 <sendto+0x198>
 800ef9a:	f06f 0303 	mvn.w	r3, #3
 800ef9e:	e066      	b.n	800f06e <sendto+0x266>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800efa0:	4b35      	ldr	r3, [pc, #212]	; (800f078 <sendto+0x270>)
 800efa2:	881b      	ldrh	r3, [r3, #0]
 800efa4:	461a      	mov	r2, r3
 800efa6:	7bfb      	ldrb	r3, [r7, #15]
 800efa8:	fa42 f303 	asr.w	r3, r2, r3
 800efac:	f003 0301 	and.w	r3, r3, #1
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d005      	beq.n	800efc0 <sendto+0x1b8>
 800efb4:	89ba      	ldrh	r2, [r7, #12]
 800efb6:	8abb      	ldrh	r3, [r7, #20]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d901      	bls.n	800efc0 <sendto+0x1b8>
 800efbc:	2300      	movs	r3, #0
 800efbe:	e056      	b.n	800f06e <sendto+0x266>
      if(len <= freesize) break;
 800efc0:	89ba      	ldrh	r2, [r7, #12]
 800efc2:	8abb      	ldrh	r3, [r7, #20]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d900      	bls.n	800efca <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 800efc8:	e7d5      	b.n	800ef76 <sendto+0x16e>
      if(len <= freesize) break;
 800efca:	bf00      	nop

#ifdef _USE_WDG_
		wdgRefresh();
#endif
   };
	wiz_send_data(sn, buf, len);
 800efcc:	89ba      	ldrh	r2, [r7, #12]
 800efce:	7bfb      	ldrb	r3, [r7, #15]
 800efd0:	68b9      	ldr	r1, [r7, #8]
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7ff f994 	bl	800e300 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 800efd8:	7bfb      	ldrb	r3, [r7, #15]
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	3301      	adds	r3, #1
 800efde:	00db      	lsls	r3, r3, #3
 800efe0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800efe4:	2120      	movs	r1, #32
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fe ffe6 	bl	800dfb8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800efec:	bf00      	nop
 800efee:	7bfb      	ldrb	r3, [r7, #15]
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	3301      	adds	r3, #1
 800eff4:	00db      	lsls	r3, r3, #3
 800eff6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800effa:	4618      	mov	r0, r3
 800effc:	f7fe ff90 	bl	800df20 <WIZCHIP_READ>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	d1f3      	bne.n	800efee <sendto+0x1e6>
   while(1)
   {

      tmp = getSn_IR(sn);
 800f006:	7bfb      	ldrb	r3, [r7, #15]
 800f008:	009b      	lsls	r3, r3, #2
 800f00a:	3301      	adds	r3, #1
 800f00c:	00db      	lsls	r3, r3, #3
 800f00e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f012:	4618      	mov	r0, r3
 800f014:	f7fe ff84 	bl	800df20 <WIZCHIP_READ>
 800f018:	4603      	mov	r3, r0
 800f01a:	f003 031f 	and.w	r3, r3, #31
 800f01e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800f020:	7dfb      	ldrb	r3, [r7, #23]
 800f022:	f003 0310 	and.w	r3, r3, #16
 800f026:	2b00      	cmp	r3, #0
 800f028:	d00c      	beq.n	800f044 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800f02a:	7bfb      	ldrb	r3, [r7, #15]
 800f02c:	009b      	lsls	r3, r3, #2
 800f02e:	3301      	adds	r3, #1
 800f030:	00db      	lsls	r3, r3, #3
 800f032:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f036:	2110      	movs	r1, #16
 800f038:	4618      	mov	r0, r3
 800f03a:	f7fe ffbd 	bl	800dfb8 <WIZCHIP_WRITE>
         //uartPrintf(_DEF_CH1,"> test 2...\r\n");
         break;
 800f03e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800f040:	89bb      	ldrh	r3, [r7, #12]
 800f042:	e014      	b.n	800f06e <sendto+0x266>
      else if(tmp & Sn_IR_TIMEOUT)
 800f044:	7dfb      	ldrb	r3, [r7, #23]
 800f046:	f003 0308 	and.w	r3, r3, #8
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d0db      	beq.n	800f006 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800f04e:	7bfb      	ldrb	r3, [r7, #15]
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	3301      	adds	r3, #1
 800f054:	00db      	lsls	r3, r3, #3
 800f056:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f05a:	2108      	movs	r1, #8
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7fe ffab 	bl	800dfb8 <WIZCHIP_WRITE>
         uartPrintf(_DEF_CH1,"> test 3...\r\n");
 800f062:	4906      	ldr	r1, [pc, #24]	; (800f07c <sendto+0x274>)
 800f064:	2000      	movs	r0, #0
 800f066:	f7f3 febd 	bl	8002de4 <uartPrintf>
         return SOCKERR_TIMEOUT;
 800f06a:	f06f 030c 	mvn.w	r3, #12
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3718      	adds	r7, #24
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	200010cc 	.word	0x200010cc
 800f07c:	08015fe8 	.word	0x08015fe8

0800f080 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b088      	sub	sp, #32
 800f084:	af00      	add	r7, sp, #0
 800f086:	60b9      	str	r1, [r7, #8]
 800f088:	607b      	str	r3, [r7, #4]
 800f08a:	4603      	mov	r3, r0
 800f08c:	73fb      	strb	r3, [r7, #15]
 800f08e:	4613      	mov	r3, r2
 800f090:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800f092:	2300      	movs	r3, #0
 800f094:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800f096:	7bfb      	ldrb	r3, [r7, #15]
 800f098:	2b08      	cmp	r3, #8
 800f09a:	d902      	bls.n	800f0a2 <recvfrom+0x22>
 800f09c:	f04f 33ff 	mov.w	r3, #4294967295
 800f0a0:	e1d4      	b.n	800f44c <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800f0a2:	7bfb      	ldrb	r3, [r7, #15]
 800f0a4:	009b      	lsls	r3, r3, #2
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	00db      	lsls	r3, r3, #3
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7fe ff38 	bl	800df20 <WIZCHIP_READ>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	777b      	strb	r3, [r7, #29]
 800f0b4:	7f7b      	ldrb	r3, [r7, #29]
 800f0b6:	f003 030f 	and.w	r3, r3, #15
 800f0ba:	3b02      	subs	r3, #2
 800f0bc:	2b02      	cmp	r3, #2
 800f0be:	d902      	bls.n	800f0c6 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 800f0c0:	f06f 0304 	mvn.w	r3, #4
 800f0c4:	e1c2      	b.n	800f44c <recvfrom+0x3cc>
         break;
 800f0c6:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800f0c8:	89bb      	ldrh	r3, [r7, #12]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d102      	bne.n	800f0d4 <recvfrom+0x54>
 800f0ce:	f06f 030d 	mvn.w	r3, #13
 800f0d2:	e1bb      	b.n	800f44c <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 800f0d4:	7bfb      	ldrb	r3, [r7, #15]
 800f0d6:	4a88      	ldr	r2, [pc, #544]	; (800f2f8 <recvfrom+0x278>)
 800f0d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d128      	bne.n	800f132 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 800f0e0:	7bfb      	ldrb	r3, [r7, #15]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7ff f8c1 	bl	800e26a <getSn_RX_RSR>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800f0ec:	7bfb      	ldrb	r3, [r7, #15]
 800f0ee:	009b      	lsls	r3, r3, #2
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	00db      	lsls	r3, r3, #3
 800f0f4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7fe ff11 	bl	800df20 <WIZCHIP_READ>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d102      	bne.n	800f10a <recvfrom+0x8a>
 800f104:	f06f 0303 	mvn.w	r3, #3
 800f108:	e1a0      	b.n	800f44c <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800f10a:	4b7c      	ldr	r3, [pc, #496]	; (800f2fc <recvfrom+0x27c>)
 800f10c:	881b      	ldrh	r3, [r3, #0]
 800f10e:	461a      	mov	r2, r3
 800f110:	7bfb      	ldrb	r3, [r7, #15]
 800f112:	fa42 f303 	asr.w	r3, r2, r3
 800f116:	f003 0301 	and.w	r3, r3, #1
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d004      	beq.n	800f128 <recvfrom+0xa8>
 800f11e:	8bfb      	ldrh	r3, [r7, #30]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d101      	bne.n	800f128 <recvfrom+0xa8>
 800f124:	2300      	movs	r3, #0
 800f126:	e191      	b.n	800f44c <recvfrom+0x3cc>
         if(pack_len != 0) break;
 800f128:	8bfb      	ldrh	r3, [r7, #30]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d100      	bne.n	800f130 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800f12e:	e7d7      	b.n	800f0e0 <recvfrom+0x60>
         if(pack_len != 0) break;
 800f130:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800f132:	7f7b      	ldrb	r3, [r7, #29]
 800f134:	f003 0307 	and.w	r3, r3, #7
 800f138:	2b04      	cmp	r3, #4
 800f13a:	d079      	beq.n	800f230 <recvfrom+0x1b0>
 800f13c:	2b04      	cmp	r3, #4
 800f13e:	f300 8142 	bgt.w	800f3c6 <recvfrom+0x346>
 800f142:	2b02      	cmp	r3, #2
 800f144:	d003      	beq.n	800f14e <recvfrom+0xce>
 800f146:	2b03      	cmp	r3, #3
 800f148:	f000 80dc 	beq.w	800f304 <recvfrom+0x284>
 800f14c:	e13b      	b.n	800f3c6 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800f14e:	7bfb      	ldrb	r3, [r7, #15]
 800f150:	4a69      	ldr	r2, [pc, #420]	; (800f2f8 <recvfrom+0x278>)
 800f152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d152      	bne.n	800f200 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800f15a:	f107 0114 	add.w	r1, r7, #20
 800f15e:	7bfb      	ldrb	r3, [r7, #15]
 800f160:	2208      	movs	r2, #8
 800f162:	4618      	mov	r0, r3
 800f164:	f7ff f928 	bl	800e3b8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800f168:	7bfb      	ldrb	r3, [r7, #15]
 800f16a:	009b      	lsls	r3, r3, #2
 800f16c:	3301      	adds	r3, #1
 800f16e:	00db      	lsls	r3, r3, #3
 800f170:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f174:	2140      	movs	r1, #64	; 0x40
 800f176:	4618      	mov	r0, r3
 800f178:	f7fe ff1e 	bl	800dfb8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800f17c:	bf00      	nop
 800f17e:	7bfb      	ldrb	r3, [r7, #15]
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	3301      	adds	r3, #1
 800f184:	00db      	lsls	r3, r3, #3
 800f186:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fe fec8 	bl	800df20 <WIZCHIP_READ>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d1f3      	bne.n	800f17e <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800f196:	7d3a      	ldrb	r2, [r7, #20]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	7d7a      	ldrb	r2, [r7, #21]
 800f1a2:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	3302      	adds	r3, #2
 800f1a8:	7dba      	ldrb	r2, [r7, #22]
 800f1aa:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	3303      	adds	r3, #3
 800f1b0:	7dfa      	ldrb	r2, [r7, #23]
 800f1b2:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 800f1b4:	7e3b      	ldrb	r3, [r7, #24]
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ba:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800f1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1be:	881b      	ldrh	r3, [r3, #0]
 800f1c0:	021b      	lsls	r3, r3, #8
 800f1c2:	b29a      	uxth	r2, r3
 800f1c4:	7e7b      	ldrb	r3, [r7, #25]
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	4413      	add	r3, r2
 800f1ca:	b29a      	uxth	r2, r3
 800f1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ce:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800f1d0:	7eba      	ldrb	r2, [r7, #26]
 800f1d2:	7bfb      	ldrb	r3, [r7, #15]
 800f1d4:	b291      	uxth	r1, r2
 800f1d6:	4a48      	ldr	r2, [pc, #288]	; (800f2f8 <recvfrom+0x278>)
 800f1d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800f1dc:	7bfb      	ldrb	r3, [r7, #15]
 800f1de:	4a46      	ldr	r2, [pc, #280]	; (800f2f8 <recvfrom+0x278>)
 800f1e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1e4:	021b      	lsls	r3, r3, #8
 800f1e6:	b299      	uxth	r1, r3
 800f1e8:	7efb      	ldrb	r3, [r7, #27]
 800f1ea:	b29a      	uxth	r2, r3
 800f1ec:	7bfb      	ldrb	r3, [r7, #15]
 800f1ee:	440a      	add	r2, r1
 800f1f0:	b291      	uxth	r1, r2
 800f1f2:	4a41      	ldr	r2, [pc, #260]	; (800f2f8 <recvfrom+0x278>)
 800f1f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800f1f8:	7bfb      	ldrb	r3, [r7, #15]
 800f1fa:	4a41      	ldr	r2, [pc, #260]	; (800f300 <recvfrom+0x280>)
 800f1fc:	2180      	movs	r1, #128	; 0x80
 800f1fe:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800f200:	7bfb      	ldrb	r3, [r7, #15]
 800f202:	4a3d      	ldr	r2, [pc, #244]	; (800f2f8 <recvfrom+0x278>)
 800f204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f208:	89ba      	ldrh	r2, [r7, #12]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d202      	bcs.n	800f214 <recvfrom+0x194>
 800f20e:	89bb      	ldrh	r3, [r7, #12]
 800f210:	83fb      	strh	r3, [r7, #30]
 800f212:	e004      	b.n	800f21e <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 800f214:	7bfb      	ldrb	r3, [r7, #15]
 800f216:	4a38      	ldr	r2, [pc, #224]	; (800f2f8 <recvfrom+0x278>)
 800f218:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f21c:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800f21e:	8bfb      	ldrh	r3, [r7, #30]
 800f220:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800f222:	8bfa      	ldrh	r2, [r7, #30]
 800f224:	7bfb      	ldrb	r3, [r7, #15]
 800f226:	68b9      	ldr	r1, [r7, #8]
 800f228:	4618      	mov	r0, r3
 800f22a:	f7ff f8c5 	bl	800e3b8 <wiz_recv_data>
			break;
 800f22e:	e0d6      	b.n	800f3de <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800f230:	7bfb      	ldrb	r3, [r7, #15]
 800f232:	4a31      	ldr	r2, [pc, #196]	; (800f2f8 <recvfrom+0x278>)
 800f234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d146      	bne.n	800f2ca <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 800f23c:	f107 0114 	add.w	r1, r7, #20
 800f240:	7bfb      	ldrb	r3, [r7, #15]
 800f242:	2202      	movs	r2, #2
 800f244:	4618      	mov	r0, r3
 800f246:	f7ff f8b7 	bl	800e3b8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800f24a:	7bfb      	ldrb	r3, [r7, #15]
 800f24c:	009b      	lsls	r3, r3, #2
 800f24e:	3301      	adds	r3, #1
 800f250:	00db      	lsls	r3, r3, #3
 800f252:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f256:	2140      	movs	r1, #64	; 0x40
 800f258:	4618      	mov	r0, r3
 800f25a:	f7fe fead 	bl	800dfb8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800f25e:	bf00      	nop
 800f260:	7bfb      	ldrb	r3, [r7, #15]
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	3301      	adds	r3, #1
 800f266:	00db      	lsls	r3, r3, #3
 800f268:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7fe fe57 	bl	800df20 <WIZCHIP_READ>
 800f272:	4603      	mov	r3, r0
 800f274:	2b00      	cmp	r3, #0
 800f276:	d1f3      	bne.n	800f260 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800f278:	7d3a      	ldrb	r2, [r7, #20]
 800f27a:	7bfb      	ldrb	r3, [r7, #15]
 800f27c:	b291      	uxth	r1, r2
 800f27e:	4a1e      	ldr	r2, [pc, #120]	; (800f2f8 <recvfrom+0x278>)
 800f280:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800f284:	7bfb      	ldrb	r3, [r7, #15]
 800f286:	4a1c      	ldr	r2, [pc, #112]	; (800f2f8 <recvfrom+0x278>)
 800f288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f28c:	021b      	lsls	r3, r3, #8
 800f28e:	b29a      	uxth	r2, r3
 800f290:	7d7b      	ldrb	r3, [r7, #21]
 800f292:	b29b      	uxth	r3, r3
 800f294:	4413      	add	r3, r2
 800f296:	b29a      	uxth	r2, r3
 800f298:	7bfb      	ldrb	r3, [r7, #15]
 800f29a:	3a02      	subs	r2, #2
 800f29c:	b291      	uxth	r1, r2
 800f29e:	4a16      	ldr	r2, [pc, #88]	; (800f2f8 <recvfrom+0x278>)
 800f2a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 800f2a4:	7bfb      	ldrb	r3, [r7, #15]
 800f2a6:	4a14      	ldr	r2, [pc, #80]	; (800f2f8 <recvfrom+0x278>)
 800f2a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2ac:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d906      	bls.n	800f2c2 <recvfrom+0x242>
   			{
   			   close(sn);
 800f2b4:	7bfb      	ldrb	r3, [r7, #15]
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f7ff fa36 	bl	800e728 <close>
   			   return SOCKFATAL_PACKLEN;
 800f2bc:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 800f2c0:	e0c4      	b.n	800f44c <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800f2c2:	7bfb      	ldrb	r3, [r7, #15]
 800f2c4:	4a0e      	ldr	r2, [pc, #56]	; (800f300 <recvfrom+0x280>)
 800f2c6:	2180      	movs	r1, #128	; 0x80
 800f2c8:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800f2ca:	7bfb      	ldrb	r3, [r7, #15]
 800f2cc:	4a0a      	ldr	r2, [pc, #40]	; (800f2f8 <recvfrom+0x278>)
 800f2ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2d2:	89ba      	ldrh	r2, [r7, #12]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d202      	bcs.n	800f2de <recvfrom+0x25e>
 800f2d8:	89bb      	ldrh	r3, [r7, #12]
 800f2da:	83fb      	strh	r3, [r7, #30]
 800f2dc:	e004      	b.n	800f2e8 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 800f2de:	7bfb      	ldrb	r3, [r7, #15]
 800f2e0:	4a05      	ldr	r2, [pc, #20]	; (800f2f8 <recvfrom+0x278>)
 800f2e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2e6:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 800f2e8:	8bfa      	ldrh	r2, [r7, #30]
 800f2ea:	7bfb      	ldrb	r3, [r7, #15]
 800f2ec:	68b9      	ldr	r1, [r7, #8]
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7ff f862 	bl	800e3b8 <wiz_recv_data>
		   break;
 800f2f4:	e073      	b.n	800f3de <recvfrom+0x35e>
 800f2f6:	bf00      	nop
 800f2f8:	200010d0 	.word	0x200010d0
 800f2fc:	200010cc 	.word	0x200010cc
 800f300:	200010e0 	.word	0x200010e0
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 800f304:	7bfb      	ldrb	r3, [r7, #15]
 800f306:	4a53      	ldr	r2, [pc, #332]	; (800f454 <recvfrom+0x3d4>)
 800f308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d144      	bne.n	800f39a <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 800f310:	f107 0114 	add.w	r1, r7, #20
 800f314:	7bfb      	ldrb	r3, [r7, #15]
 800f316:	2206      	movs	r2, #6
 800f318:	4618      	mov	r0, r3
 800f31a:	f7ff f84d 	bl	800e3b8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800f31e:	7bfb      	ldrb	r3, [r7, #15]
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	3301      	adds	r3, #1
 800f324:	00db      	lsls	r3, r3, #3
 800f326:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f32a:	2140      	movs	r1, #64	; 0x40
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7fe fe43 	bl	800dfb8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800f332:	bf00      	nop
 800f334:	7bfb      	ldrb	r3, [r7, #15]
 800f336:	009b      	lsls	r3, r3, #2
 800f338:	3301      	adds	r3, #1
 800f33a:	00db      	lsls	r3, r3, #3
 800f33c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f340:	4618      	mov	r0, r3
 800f342:	f7fe fded 	bl	800df20 <WIZCHIP_READ>
 800f346:	4603      	mov	r3, r0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d1f3      	bne.n	800f334 <recvfrom+0x2b4>
   			addr[0] = head[0];
 800f34c:	7d3a      	ldrb	r2, [r7, #20]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	3301      	adds	r3, #1
 800f356:	7d7a      	ldrb	r2, [r7, #21]
 800f358:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	3302      	adds	r3, #2
 800f35e:	7dba      	ldrb	r2, [r7, #22]
 800f360:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	3303      	adds	r3, #3
 800f366:	7dfa      	ldrb	r2, [r7, #23]
 800f368:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800f36a:	7e3a      	ldrb	r2, [r7, #24]
 800f36c:	7bfb      	ldrb	r3, [r7, #15]
 800f36e:	b291      	uxth	r1, r2
 800f370:	4a38      	ldr	r2, [pc, #224]	; (800f454 <recvfrom+0x3d4>)
 800f372:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800f376:	7bfb      	ldrb	r3, [r7, #15]
 800f378:	4a36      	ldr	r2, [pc, #216]	; (800f454 <recvfrom+0x3d4>)
 800f37a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f37e:	021b      	lsls	r3, r3, #8
 800f380:	b299      	uxth	r1, r3
 800f382:	7e7b      	ldrb	r3, [r7, #25]
 800f384:	b29a      	uxth	r2, r3
 800f386:	7bfb      	ldrb	r3, [r7, #15]
 800f388:	440a      	add	r2, r1
 800f38a:	b291      	uxth	r1, r2
 800f38c:	4a31      	ldr	r2, [pc, #196]	; (800f454 <recvfrom+0x3d4>)
 800f38e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800f392:	7bfb      	ldrb	r3, [r7, #15]
 800f394:	4a30      	ldr	r2, [pc, #192]	; (800f458 <recvfrom+0x3d8>)
 800f396:	2180      	movs	r1, #128	; 0x80
 800f398:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800f39a:	7bfb      	ldrb	r3, [r7, #15]
 800f39c:	4a2d      	ldr	r2, [pc, #180]	; (800f454 <recvfrom+0x3d4>)
 800f39e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3a2:	89ba      	ldrh	r2, [r7, #12]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d202      	bcs.n	800f3ae <recvfrom+0x32e>
 800f3a8:	89bb      	ldrh	r3, [r7, #12]
 800f3aa:	83fb      	strh	r3, [r7, #30]
 800f3ac:	e004      	b.n	800f3b8 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 800f3ae:	7bfb      	ldrb	r3, [r7, #15]
 800f3b0:	4a28      	ldr	r2, [pc, #160]	; (800f454 <recvfrom+0x3d4>)
 800f3b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3b6:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800f3b8:	8bfa      	ldrh	r2, [r7, #30]
 800f3ba:	7bfb      	ldrb	r3, [r7, #15]
 800f3bc:	68b9      	ldr	r1, [r7, #8]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7fe fffa 	bl	800e3b8 <wiz_recv_data>
			break;
 800f3c4:	e00b      	b.n	800f3de <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800f3c6:	8bfa      	ldrh	r2, [r7, #30]
 800f3c8:	7bfb      	ldrb	r3, [r7, #15]
 800f3ca:	4611      	mov	r1, r2
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7ff f84f 	bl	800e470 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800f3d2:	7bfb      	ldrb	r3, [r7, #15]
 800f3d4:	491f      	ldr	r1, [pc, #124]	; (800f454 <recvfrom+0x3d4>)
 800f3d6:	8bfa      	ldrh	r2, [r7, #30]
 800f3d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 800f3dc:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800f3de:	7bfb      	ldrb	r3, [r7, #15]
 800f3e0:	009b      	lsls	r3, r3, #2
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	00db      	lsls	r3, r3, #3
 800f3e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f3ea:	2140      	movs	r1, #64	; 0x40
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fe fde3 	bl	800dfb8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800f3f2:	bf00      	nop
 800f3f4:	7bfb      	ldrb	r3, [r7, #15]
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	00db      	lsls	r3, r3, #3
 800f3fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f400:	4618      	mov	r0, r3
 800f402:	f7fe fd8d 	bl	800df20 <WIZCHIP_READ>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d1f3      	bne.n	800f3f4 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 800f40c:	7bfb      	ldrb	r3, [r7, #15]
 800f40e:	4a11      	ldr	r2, [pc, #68]	; (800f454 <recvfrom+0x3d4>)
 800f410:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800f414:	7bfb      	ldrb	r3, [r7, #15]
 800f416:	8bfa      	ldrh	r2, [r7, #30]
 800f418:	1a8a      	subs	r2, r1, r2
 800f41a:	b291      	uxth	r1, r2
 800f41c:	4a0d      	ldr	r2, [pc, #52]	; (800f454 <recvfrom+0x3d4>)
 800f41e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800f422:	7bfb      	ldrb	r3, [r7, #15]
 800f424:	4a0b      	ldr	r2, [pc, #44]	; (800f454 <recvfrom+0x3d4>)
 800f426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d009      	beq.n	800f442 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800f42e:	7bfb      	ldrb	r3, [r7, #15]
 800f430:	4a09      	ldr	r2, [pc, #36]	; (800f458 <recvfrom+0x3d8>)
 800f432:	5cd2      	ldrb	r2, [r2, r3]
 800f434:	7bfb      	ldrb	r3, [r7, #15]
 800f436:	f042 0201 	orr.w	r2, r2, #1
 800f43a:	b2d1      	uxtb	r1, r2
 800f43c:	4a06      	ldr	r2, [pc, #24]	; (800f458 <recvfrom+0x3d8>)
 800f43e:	54d1      	strb	r1, [r2, r3]
 800f440:	e003      	b.n	800f44a <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 800f442:	7bfb      	ldrb	r3, [r7, #15]
 800f444:	4a04      	ldr	r2, [pc, #16]	; (800f458 <recvfrom+0x3d8>)
 800f446:	2100      	movs	r1, #0
 800f448:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800f44a:	8bfb      	ldrh	r3, [r7, #30]
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3720      	adds	r7, #32
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}
 800f454:	200010d0 	.word	0x200010d0
 800f458:	200010e0 	.word	0x200010e0

0800f45c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800f45c:	b480      	push	{r7}
 800f45e:	af00      	add	r7, sp, #0
 800f460:	bf00      	nop
 800f462:	46bd      	mov	sp, r7
 800f464:	bc80      	pop	{r7}
 800f466:	4770      	bx	lr

0800f468 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800f468:	b480      	push	{r7}
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	bf00      	nop
 800f46e:	46bd      	mov	sp, r7
 800f470:	bc80      	pop	{r7}
 800f472:	4770      	bx	lr

0800f474 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800f474:	b480      	push	{r7}
 800f476:	af00      	add	r7, sp, #0
 800f478:	bf00      	nop
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bc80      	pop	{r7}
 800f47e:	4770      	bx	lr

0800f480 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800f480:	b480      	push	{r7}
 800f482:	af00      	add	r7, sp, #0
 800f484:	bf00      	nop
 800f486:	46bd      	mov	sp, r7
 800f488:	bc80      	pop	{r7}
 800f48a:	4770      	bx	lr

0800f48c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	4618      	mov	r0, r3
 800f49c:	370c      	adds	r7, #12
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bc80      	pop	{r7}
 800f4a2:	4770      	bx	lr

0800f4a4 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800f4a4:	b480      	push	{r7}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	70fb      	strb	r3, [r7, #3]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	78fa      	ldrb	r2, [r7, #3]
 800f4b4:	701a      	strb	r2, [r3, #0]
 800f4b6:	bf00      	nop
 800f4b8:	370c      	adds	r7, #12
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bc80      	pop	{r7}
 800f4be:	4770      	bx	lr

0800f4c0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800f4c0:	b480      	push	{r7}
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bc80      	pop	{r7}
 800f4cc:	4770      	bx	lr

0800f4ce <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800f4ce:	b480      	push	{r7}
 800f4d0:	b083      	sub	sp, #12
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	71fb      	strb	r3, [r7, #7]
 800f4d8:	bf00      	nop
 800f4da:	370c      	adds	r7, #12
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bc80      	pop	{r7}
 800f4e0:	4770      	bx	lr
	...

0800f4e4 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b083      	sub	sp, #12
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d002      	beq.n	800f4fa <reg_wizchip_cs_cbfunc+0x16>
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d106      	bne.n	800f508 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800f4fa:	4b09      	ldr	r3, [pc, #36]	; (800f520 <reg_wizchip_cs_cbfunc+0x3c>)
 800f4fc:	4a09      	ldr	r2, [pc, #36]	; (800f524 <reg_wizchip_cs_cbfunc+0x40>)
 800f4fe:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800f500:	4b07      	ldr	r3, [pc, #28]	; (800f520 <reg_wizchip_cs_cbfunc+0x3c>)
 800f502:	4a09      	ldr	r2, [pc, #36]	; (800f528 <reg_wizchip_cs_cbfunc+0x44>)
 800f504:	619a      	str	r2, [r3, #24]
 800f506:	e006      	b.n	800f516 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800f508:	4a05      	ldr	r2, [pc, #20]	; (800f520 <reg_wizchip_cs_cbfunc+0x3c>)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800f50e:	4a04      	ldr	r2, [pc, #16]	; (800f520 <reg_wizchip_cs_cbfunc+0x3c>)
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	6193      	str	r3, [r2, #24]
   }
}
 800f514:	bf00      	nop
 800f516:	bf00      	nop
 800f518:	370c      	adds	r7, #12
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bc80      	pop	{r7}
 800f51e:	4770      	bx	lr
 800f520:	200001d0 	.word	0x200001d0
 800f524:	0800f475 	.word	0x0800f475
 800f528:	0800f481 	.word	0x0800f481

0800f52c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800f536:	bf00      	nop
 800f538:	4b0f      	ldr	r3, [pc, #60]	; (800f578 <reg_wizchip_spi_cbfunc+0x4c>)
 800f53a:	881b      	ldrh	r3, [r3, #0]
 800f53c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f540:	2b00      	cmp	r3, #0
 800f542:	d0f9      	beq.n	800f538 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d002      	beq.n	800f550 <reg_wizchip_spi_cbfunc+0x24>
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d106      	bne.n	800f55e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800f550:	4b09      	ldr	r3, [pc, #36]	; (800f578 <reg_wizchip_spi_cbfunc+0x4c>)
 800f552:	4a0a      	ldr	r2, [pc, #40]	; (800f57c <reg_wizchip_spi_cbfunc+0x50>)
 800f554:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800f556:	4b08      	ldr	r3, [pc, #32]	; (800f578 <reg_wizchip_spi_cbfunc+0x4c>)
 800f558:	4a09      	ldr	r2, [pc, #36]	; (800f580 <reg_wizchip_spi_cbfunc+0x54>)
 800f55a:	621a      	str	r2, [r3, #32]
 800f55c:	e006      	b.n	800f56c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800f55e:	4a06      	ldr	r2, [pc, #24]	; (800f578 <reg_wizchip_spi_cbfunc+0x4c>)
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800f564:	4a04      	ldr	r2, [pc, #16]	; (800f578 <reg_wizchip_spi_cbfunc+0x4c>)
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	6213      	str	r3, [r2, #32]
   }
}
 800f56a:	bf00      	nop
 800f56c:	bf00      	nop
 800f56e:	370c      	adds	r7, #12
 800f570:	46bd      	mov	sp, r7
 800f572:	bc80      	pop	{r7}
 800f574:	4770      	bx	lr
 800f576:	bf00      	nop
 800f578:	200001d0 	.word	0x200001d0
 800f57c:	0800f4c1 	.word	0x0800f4c1
 800f580:	0800f4cf 	.word	0x0800f4cf

0800f584 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800f584:	b590      	push	{r4, r7, lr}
 800f586:	b087      	sub	sp, #28
 800f588:	af00      	add	r7, sp, #0
 800f58a:	4603      	mov	r3, r0
 800f58c:	6039      	str	r1, [r7, #0]
 800f58e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 800f590:	2300      	movs	r3, #0
 800f592:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800f594:	2300      	movs	r3, #0
 800f596:	60fb      	str	r3, [r7, #12]
 800f598:	2300      	movs	r3, #0
 800f59a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 800f59c:	79fb      	ldrb	r3, [r7, #7]
 800f59e:	2b0f      	cmp	r3, #15
 800f5a0:	f200 80c7 	bhi.w	800f732 <ctlwizchip+0x1ae>
 800f5a4:	a201      	add	r2, pc, #4	; (adr r2, 800f5ac <ctlwizchip+0x28>)
 800f5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5aa:	bf00      	nop
 800f5ac:	0800f5ed 	.word	0x0800f5ed
 800f5b0:	0800f5f3 	.word	0x0800f5f3
 800f5b4:	0800f61f 	.word	0x0800f61f
 800f5b8:	0800f613 	.word	0x0800f613
 800f5bc:	0800f62d 	.word	0x0800f62d
 800f5c0:	0800f639 	.word	0x0800f639
 800f5c4:	0800f647 	.word	0x0800f647
 800f5c8:	0800f66d 	.word	0x0800f66d
 800f5cc:	0800f693 	.word	0x0800f693
 800f5d0:	0800f6d7 	.word	0x0800f6d7
 800f5d4:	0800f6dd 	.word	0x0800f6dd
 800f5d8:	0800f6e5 	.word	0x0800f6e5
 800f5dc:	0800f739 	.word	0x0800f739
 800f5e0:	0800f6ed 	.word	0x0800f6ed
 800f5e4:	0800f6fb 	.word	0x0800f6fb
 800f5e8:	0800f717 	.word	0x0800f717
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 800f5ec:	f000 f8ac 	bl	800f748 <wizchip_sw_reset>
         break;
 800f5f0:	e0a3      	b.n	800f73a <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d004      	beq.n	800f602 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	3308      	adds	r3, #8
 800f600:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	693a      	ldr	r2, [r7, #16]
 800f606:	4611      	mov	r1, r2
 800f608:	4618      	mov	r0, r3
 800f60a:	f000 f8e9 	bl	800f7e0 <wizchip_init>
 800f60e:	4603      	mov	r3, r0
 800f610:	e094      	b.n	800f73c <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	881b      	ldrh	r3, [r3, #0]
 800f616:	4618      	mov	r0, r3
 800f618:	f000 f96e 	bl	800f8f8 <wizchip_clrinterrupt>
         break;
 800f61c:	e08d      	b.n	800f73a <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800f61e:	f000 f99f 	bl	800f960 <wizchip_getinterrupt>
 800f622:	4603      	mov	r3, r0
 800f624:	461a      	mov	r2, r3
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	801a      	strh	r2, [r3, #0]
         break;
 800f62a:	e086      	b.n	800f73a <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	881b      	ldrh	r3, [r3, #0]
 800f630:	4618      	mov	r0, r3
 800f632:	f000 f9ba 	bl	800f9aa <wizchip_setinterruptmask>
         break;         
 800f636:	e080      	b.n	800f73a <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 800f638:	f000 f9d2 	bl	800f9e0 <wizchip_getinterruptmask>
 800f63c:	4603      	mov	r3, r0
 800f63e:	461a      	mov	r2, r3
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	801a      	strh	r2, [r3, #0]
         break;
 800f644:	e079      	b.n	800f73a <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	881b      	ldrh	r3, [r3, #0]
 800f64a:	0a1b      	lsrs	r3, r3, #8
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	4619      	mov	r1, r3
 800f652:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800f656:	f7fe fcaf 	bl	800dfb8 <WIZCHIP_WRITE>
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	881b      	ldrh	r3, [r3, #0]
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	4619      	mov	r1, r3
 800f662:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800f666:	f7fe fca7 	bl	800dfb8 <WIZCHIP_WRITE>
         break;
 800f66a:	e066      	b.n	800f73a <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 800f66c:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800f670:	f7fe fc56 	bl	800df20 <WIZCHIP_READ>
 800f674:	4603      	mov	r3, r0
 800f676:	b29b      	uxth	r3, r3
 800f678:	021b      	lsls	r3, r3, #8
 800f67a:	b29c      	uxth	r4, r3
 800f67c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800f680:	f7fe fc4e 	bl	800df20 <WIZCHIP_READ>
 800f684:	4603      	mov	r3, r0
 800f686:	b29b      	uxth	r3, r3
 800f688:	4423      	add	r3, r4
 800f68a:	b29a      	uxth	r2, r3
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	801a      	strh	r2, [r3, #0]
         break;
 800f690:	e053      	b.n	800f73a <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800f692:	4b2c      	ldr	r3, [pc, #176]	; (800f744 <ctlwizchip+0x1c0>)
 800f694:	789a      	ldrb	r2, [r3, #2]
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	3301      	adds	r3, #1
 800f69e:	4a29      	ldr	r2, [pc, #164]	; (800f744 <ctlwizchip+0x1c0>)
 800f6a0:	78d2      	ldrb	r2, [r2, #3]
 800f6a2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	3302      	adds	r3, #2
 800f6a8:	4a26      	ldr	r2, [pc, #152]	; (800f744 <ctlwizchip+0x1c0>)
 800f6aa:	7912      	ldrb	r2, [r2, #4]
 800f6ac:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	3303      	adds	r3, #3
 800f6b2:	4a24      	ldr	r2, [pc, #144]	; (800f744 <ctlwizchip+0x1c0>)
 800f6b4:	7952      	ldrb	r2, [r2, #5]
 800f6b6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	3304      	adds	r3, #4
 800f6bc:	4a21      	ldr	r2, [pc, #132]	; (800f744 <ctlwizchip+0x1c0>)
 800f6be:	7992      	ldrb	r2, [r2, #6]
 800f6c0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	3305      	adds	r3, #5
 800f6c6:	4a1f      	ldr	r2, [pc, #124]	; (800f744 <ctlwizchip+0x1c0>)
 800f6c8:	79d2      	ldrb	r2, [r2, #7]
 800f6ca:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	3306      	adds	r3, #6
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	701a      	strb	r2, [r3, #0]
         break;
 800f6d4:	e031      	b.n	800f73a <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800f6d6:	f000 f9d5 	bl	800fa84 <wizphy_reset>
         break;
 800f6da:	e02e      	b.n	800f73a <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800f6dc:	6838      	ldr	r0, [r7, #0]
 800f6de:	f000 f9f8 	bl	800fad2 <wizphy_setphyconf>
         break;
 800f6e2:	e02a      	b.n	800f73a <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800f6e4:	6838      	ldr	r0, [r7, #0]
 800f6e6:	f000 fa37 	bl	800fb58 <wizphy_getphyconf>
         break;
 800f6ea:	e026      	b.n	800f73a <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f000 fa9b 	bl	800fc2c <wizphy_setphypmode>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	e020      	b.n	800f73c <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800f6fa:	f000 f9aa 	bl	800fa52 <wizphy_getphypmode>
 800f6fe:	4603      	mov	r3, r0
 800f700:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800f702:	7dfb      	ldrb	r3, [r7, #23]
 800f704:	2bff      	cmp	r3, #255	; 0xff
 800f706:	d102      	bne.n	800f70e <ctlwizchip+0x18a>
 800f708:	f04f 33ff 	mov.w	r3, #4294967295
 800f70c:	e016      	b.n	800f73c <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	7dfa      	ldrb	r2, [r7, #23]
 800f712:	701a      	strb	r2, [r3, #0]
         break;
 800f714:	e011      	b.n	800f73a <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800f716:	f000 f986 	bl	800fa26 <wizphy_getphylink>
 800f71a:	4603      	mov	r3, r0
 800f71c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800f71e:	7dfb      	ldrb	r3, [r7, #23]
 800f720:	2bff      	cmp	r3, #255	; 0xff
 800f722:	d102      	bne.n	800f72a <ctlwizchip+0x1a6>
 800f724:	f04f 33ff 	mov.w	r3, #4294967295
 800f728:	e008      	b.n	800f73c <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	7dfa      	ldrb	r2, [r7, #23]
 800f72e:	701a      	strb	r2, [r3, #0]
         break;
 800f730:	e003      	b.n	800f73a <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 800f732:	f04f 33ff 	mov.w	r3, #4294967295
 800f736:	e001      	b.n	800f73c <ctlwizchip+0x1b8>
         break;
 800f738:	bf00      	nop
   }
   return 0;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	371c      	adds	r7, #28
 800f740:	46bd      	mov	sp, r7
 800f742:	bd90      	pop	{r4, r7, pc}
 800f744:	200001d0 	.word	0x200001d0

0800f748 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b086      	sub	sp, #24
 800f74c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800f74e:	1d3b      	adds	r3, r7, #4
 800f750:	2206      	movs	r2, #6
 800f752:	4619      	mov	r1, r3
 800f754:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800f758:	f7fe fc7c 	bl	800e054 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800f75c:	f107 0314 	add.w	r3, r7, #20
 800f760:	2204      	movs	r2, #4
 800f762:	4619      	mov	r1, r3
 800f764:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f768:	f7fe fc74 	bl	800e054 <WIZCHIP_READ_BUF>
 800f76c:	f107 0310 	add.w	r3, r7, #16
 800f770:	2204      	movs	r2, #4
 800f772:	4619      	mov	r1, r3
 800f774:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800f778:	f7fe fc6c 	bl	800e054 <WIZCHIP_READ_BUF>
 800f77c:	f107 030c 	add.w	r3, r7, #12
 800f780:	2204      	movs	r2, #4
 800f782:	4619      	mov	r1, r3
 800f784:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800f788:	f7fe fc64 	bl	800e054 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800f78c:	2180      	movs	r1, #128	; 0x80
 800f78e:	2000      	movs	r0, #0
 800f790:	f7fe fc12 	bl	800dfb8 <WIZCHIP_WRITE>
   getMR(); // for delay
 800f794:	2000      	movs	r0, #0
 800f796:	f7fe fbc3 	bl	800df20 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800f79a:	1d3b      	adds	r3, r7, #4
 800f79c:	2206      	movs	r2, #6
 800f79e:	4619      	mov	r1, r3
 800f7a0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800f7a4:	f7fe fcb6 	bl	800e114 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800f7a8:	f107 0314 	add.w	r3, r7, #20
 800f7ac:	2204      	movs	r2, #4
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f7b4:	f7fe fcae 	bl	800e114 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800f7b8:	f107 0310 	add.w	r3, r7, #16
 800f7bc:	2204      	movs	r2, #4
 800f7be:	4619      	mov	r1, r3
 800f7c0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800f7c4:	f7fe fca6 	bl	800e114 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800f7c8:	f107 030c 	add.w	r3, r7, #12
 800f7cc:	2204      	movs	r2, #4
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800f7d4:	f7fe fc9e 	bl	800e114 <WIZCHIP_WRITE_BUF>
}
 800f7d8:	bf00      	nop
 800f7da:	3718      	adds	r7, #24
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b084      	sub	sp, #16
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800f7ee:	f7ff ffab 	bl	800f748 <wizchip_sw_reset>
   if(txsize)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d03b      	beq.n	800f870 <wizchip_init+0x90>
   {
      tmp = 0;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	73fb      	strb	r3, [r7, #15]
 800f800:	e015      	b.n	800f82e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800f802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	4413      	add	r3, r2
 800f80a:	781a      	ldrb	r2, [r3, #0]
 800f80c:	7bbb      	ldrb	r3, [r7, #14]
 800f80e:	4413      	add	r3, r2
 800f810:	b2db      	uxtb	r3, r3
 800f812:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800f814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f818:	2b10      	cmp	r3, #16
 800f81a:	dd02      	ble.n	800f822 <wizchip_init+0x42>
 800f81c:	f04f 33ff 	mov.w	r3, #4294967295
 800f820:	e066      	b.n	800f8f0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800f822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f826:	b2db      	uxtb	r3, r3
 800f828:	3301      	adds	r3, #1
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	73fb      	strb	r3, [r7, #15]
 800f82e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f832:	2b07      	cmp	r3, #7
 800f834:	dde5      	ble.n	800f802 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800f836:	2300      	movs	r3, #0
 800f838:	73fb      	strb	r3, [r7, #15]
 800f83a:	e015      	b.n	800f868 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800f83c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f840:	009b      	lsls	r3, r3, #2
 800f842:	3301      	adds	r3, #1
 800f844:	00db      	lsls	r3, r3, #3
 800f846:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800f84a:	4618      	mov	r0, r3
 800f84c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	4413      	add	r3, r2
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	4619      	mov	r1, r3
 800f858:	f7fe fbae 	bl	800dfb8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800f85c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f860:	b2db      	uxtb	r3, r3
 800f862:	3301      	adds	r3, #1
 800f864:	b2db      	uxtb	r3, r3
 800f866:	73fb      	strb	r3, [r7, #15]
 800f868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f86c:	2b07      	cmp	r3, #7
 800f86e:	dde5      	ble.n	800f83c <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d03b      	beq.n	800f8ee <wizchip_init+0x10e>
   {
      tmp = 0;
 800f876:	2300      	movs	r3, #0
 800f878:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800f87a:	2300      	movs	r3, #0
 800f87c:	73fb      	strb	r3, [r7, #15]
 800f87e:	e015      	b.n	800f8ac <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800f880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f884:	683a      	ldr	r2, [r7, #0]
 800f886:	4413      	add	r3, r2
 800f888:	781a      	ldrb	r2, [r3, #0]
 800f88a:	7bbb      	ldrb	r3, [r7, #14]
 800f88c:	4413      	add	r3, r2
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800f892:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f896:	2b10      	cmp	r3, #16
 800f898:	dd02      	ble.n	800f8a0 <wizchip_init+0xc0>
 800f89a:	f04f 33ff 	mov.w	r3, #4294967295
 800f89e:	e027      	b.n	800f8f0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800f8a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	73fb      	strb	r3, [r7, #15]
 800f8ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8b0:	2b07      	cmp	r3, #7
 800f8b2:	dde5      	ble.n	800f880 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	73fb      	strb	r3, [r7, #15]
 800f8b8:	e015      	b.n	800f8e6 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800f8ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	00db      	lsls	r3, r3, #3
 800f8c4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8ce:	683a      	ldr	r2, [r7, #0]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	f7fe fb6f 	bl	800dfb8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800f8da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8de:	b2db      	uxtb	r3, r3
 800f8e0:	3301      	adds	r3, #1
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	73fb      	strb	r3, [r7, #15]
 800f8e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8ea:	2b07      	cmp	r3, #7
 800f8ec:	dde5      	ble.n	800f8ba <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 800f8ee:	2300      	movs	r3, #0
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3710      	adds	r7, #16
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	4603      	mov	r3, r0
 800f900:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800f902:	88fb      	ldrh	r3, [r7, #6]
 800f904:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800f906:	88fb      	ldrh	r3, [r7, #6]
 800f908:	0a1b      	lsrs	r3, r3, #8
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800f90e:	7bfb      	ldrb	r3, [r7, #15]
 800f910:	f023 030f 	bic.w	r3, r3, #15
 800f914:	b2db      	uxtb	r3, r3
 800f916:	4619      	mov	r1, r3
 800f918:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800f91c:	f7fe fb4c 	bl	800dfb8 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 800f920:	2300      	movs	r3, #0
 800f922:	73fb      	strb	r3, [r7, #15]
 800f924:	e014      	b.n	800f950 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800f926:	7bba      	ldrb	r2, [r7, #14]
 800f928:	7bfb      	ldrb	r3, [r7, #15]
 800f92a:	fa42 f303 	asr.w	r3, r2, r3
 800f92e:	f003 0301 	and.w	r3, r3, #1
 800f932:	2b00      	cmp	r3, #0
 800f934:	d009      	beq.n	800f94a <wizchip_clrinterrupt+0x52>
 800f936:	7bfb      	ldrb	r3, [r7, #15]
 800f938:	009b      	lsls	r3, r3, #2
 800f93a:	3301      	adds	r3, #1
 800f93c:	00db      	lsls	r3, r3, #3
 800f93e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f942:	211f      	movs	r1, #31
 800f944:	4618      	mov	r0, r3
 800f946:	f7fe fb37 	bl	800dfb8 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800f94a:	7bfb      	ldrb	r3, [r7, #15]
 800f94c:	3301      	adds	r3, #1
 800f94e:	73fb      	strb	r3, [r7, #15]
 800f950:	7bfb      	ldrb	r3, [r7, #15]
 800f952:	2b07      	cmp	r3, #7
 800f954:	d9e7      	bls.n	800f926 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800f956:	bf00      	nop
 800f958:	bf00      	nop
 800f95a:	3710      	adds	r7, #16
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800f966:	2300      	movs	r3, #0
 800f968:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800f96a:	2300      	movs	r3, #0
 800f96c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800f96e:	2300      	movs	r3, #0
 800f970:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800f972:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800f976:	f7fe fad3 	bl	800df20 <WIZCHIP_READ>
 800f97a:	4603      	mov	r3, r0
 800f97c:	f023 030f 	bic.w	r3, r3, #15
 800f980:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800f982:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800f986:	f7fe facb 	bl	800df20 <WIZCHIP_READ>
 800f98a:	4603      	mov	r3, r0
 800f98c:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800f98e:	79bb      	ldrb	r3, [r7, #6]
 800f990:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800f992:	88bb      	ldrh	r3, [r7, #4]
 800f994:	021b      	lsls	r3, r3, #8
 800f996:	b29a      	uxth	r2, r3
 800f998:	79fb      	ldrb	r3, [r7, #7]
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	4413      	add	r3, r2
 800f99e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800f9a0:	88bb      	ldrh	r3, [r7, #4]
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3708      	adds	r7, #8
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}

0800f9aa <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800f9aa:	b580      	push	{r7, lr}
 800f9ac:	b084      	sub	sp, #16
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 800f9b4:	88fb      	ldrh	r3, [r7, #6]
 800f9b6:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800f9b8:	88fb      	ldrh	r3, [r7, #6]
 800f9ba:	0a1b      	lsrs	r3, r3, #8
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800f9c0:	7bfb      	ldrb	r3, [r7, #15]
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800f9c8:	f7fe faf6 	bl	800dfb8 <WIZCHIP_WRITE>
   setSIMR(simr);
 800f9cc:	7bbb      	ldrb	r3, [r7, #14]
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800f9d4:	f7fe faf0 	bl	800dfb8 <WIZCHIP_WRITE>
#endif   
}
 800f9d8:	bf00      	nop
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800f9f2:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800f9f6:	f7fe fa93 	bl	800df20 <WIZCHIP_READ>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800f9fe:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800fa02:	f7fe fa8d 	bl	800df20 <WIZCHIP_READ>
 800fa06:	4603      	mov	r3, r0
 800fa08:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800fa0a:	79bb      	ldrb	r3, [r7, #6]
 800fa0c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800fa0e:	88bb      	ldrh	r3, [r7, #4]
 800fa10:	021b      	lsls	r3, r3, #8
 800fa12:	b29a      	uxth	r2, r3
 800fa14:	79fb      	ldrb	r3, [r7, #7]
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	4413      	add	r3, r2
 800fa1a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800fa1c:	88bb      	ldrh	r3, [r7, #4]
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3708      	adds	r7, #8
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}

0800fa26 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800fa26:	b580      	push	{r7, lr}
 800fa28:	b082      	sub	sp, #8
 800fa2a:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 800fa30:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800fa34:	f7fe fa74 	bl	800df20 <WIZCHIP_READ>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	f003 0301 	and.w	r3, r3, #1
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d001      	beq.n	800fa46 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800fa42:	2301      	movs	r3, #1
 800fa44:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800fa46:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3708      	adds	r7, #8
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}

0800fa52 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800fa52:	b580      	push	{r7, lr}
 800fa54:	b082      	sub	sp, #8
 800fa56:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 800fa5c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800fa60:	f7fe fa5e 	bl	800df20 <WIZCHIP_READ>
 800fa64:	4603      	mov	r3, r0
 800fa66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fa6a:	2b30      	cmp	r3, #48	; 0x30
 800fa6c:	d102      	bne.n	800fa74 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800fa6e:	2301      	movs	r3, #1
 800fa70:	71fb      	strb	r3, [r7, #7]
 800fa72:	e001      	b.n	800fa78 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800fa74:	2300      	movs	r3, #0
 800fa76:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 800fa78:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3708      	adds	r7, #8
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800fa8a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800fa8e:	f7fe fa47 	bl	800df20 <WIZCHIP_READ>
 800fa92:	4603      	mov	r3, r0
 800fa94:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800fa96:	79fb      	ldrb	r3, [r7, #7]
 800fa98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa9c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800fa9e:	79fb      	ldrb	r3, [r7, #7]
 800faa0:	4619      	mov	r1, r3
 800faa2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800faa6:	f7fe fa87 	bl	800dfb8 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800faaa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800faae:	f7fe fa37 	bl	800df20 <WIZCHIP_READ>
 800fab2:	4603      	mov	r3, r0
 800fab4:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800fab6:	79fb      	ldrb	r3, [r7, #7]
 800fab8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fabc:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800fabe:	79fb      	ldrb	r3, [r7, #7]
 800fac0:	4619      	mov	r1, r3
 800fac2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800fac6:	f7fe fa77 	bl	800dfb8 <WIZCHIP_WRITE>
}
 800faca:	bf00      	nop
 800facc:	3708      	adds	r7, #8
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}

0800fad2 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800fad2:	b580      	push	{r7, lr}
 800fad4:	b084      	sub	sp, #16
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800fada:	2300      	movs	r3, #0
 800fadc:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	2b01      	cmp	r3, #1
 800fae4:	d104      	bne.n	800faf0 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800fae6:	7bfb      	ldrb	r3, [r7, #15]
 800fae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faec:	73fb      	strb	r3, [r7, #15]
 800faee:	e003      	b.n	800faf8 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 800faf0:	7bfb      	ldrb	r3, [r7, #15]
 800faf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800faf6:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	785b      	ldrb	r3, [r3, #1]
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d104      	bne.n	800fb0a <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 800fb00:	7bfb      	ldrb	r3, [r7, #15]
 800fb02:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800fb06:	73fb      	strb	r3, [r7, #15]
 800fb08:	e019      	b.n	800fb3e <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	78db      	ldrb	r3, [r3, #3]
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d10d      	bne.n	800fb2e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	789b      	ldrb	r3, [r3, #2]
 800fb16:	2b01      	cmp	r3, #1
 800fb18:	d104      	bne.n	800fb24 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800fb1a:	7bfb      	ldrb	r3, [r7, #15]
 800fb1c:	f043 0318 	orr.w	r3, r3, #24
 800fb20:	73fb      	strb	r3, [r7, #15]
 800fb22:	e00c      	b.n	800fb3e <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 800fb24:	7bfb      	ldrb	r3, [r7, #15]
 800fb26:	f043 0308 	orr.w	r3, r3, #8
 800fb2a:	73fb      	strb	r3, [r7, #15]
 800fb2c:	e007      	b.n	800fb3e <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	789b      	ldrb	r3, [r3, #2]
 800fb32:	2b01      	cmp	r3, #1
 800fb34:	d103      	bne.n	800fb3e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800fb36:	7bfb      	ldrb	r3, [r7, #15]
 800fb38:	f043 0310 	orr.w	r3, r3, #16
 800fb3c:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 800fb3e:	7bfb      	ldrb	r3, [r7, #15]
 800fb40:	4619      	mov	r1, r3
 800fb42:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800fb46:	f7fe fa37 	bl	800dfb8 <WIZCHIP_WRITE>
   wizphy_reset();
 800fb4a:	f7ff ff9b 	bl	800fa84 <wizphy_reset>
}
 800fb4e:	bf00      	nop
 800fb50:	3710      	adds	r7, #16
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}
	...

0800fb58 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800fb60:	2300      	movs	r3, #0
 800fb62:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800fb64:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800fb68:	f7fe f9da 	bl	800df20 <WIZCHIP_READ>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 800fb70:	7bfb      	ldrb	r3, [r7, #15]
 800fb72:	119b      	asrs	r3, r3, #6
 800fb74:	b2db      	uxtb	r3, r3
 800fb76:	f003 0301 	and.w	r3, r3, #1
 800fb7a:	b2da      	uxtb	r2, r3
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800fb80:	7bfb      	ldrb	r3, [r7, #15]
 800fb82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fb86:	2b20      	cmp	r3, #32
 800fb88:	d001      	beq.n	800fb8e <wizphy_getphyconf+0x36>
 800fb8a:	2b38      	cmp	r3, #56	; 0x38
 800fb8c:	d103      	bne.n	800fb96 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2201      	movs	r2, #1
 800fb92:	705a      	strb	r2, [r3, #1]
         break;
 800fb94:	e003      	b.n	800fb9e <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	705a      	strb	r2, [r3, #1]
         break;
 800fb9c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800fb9e:	7bfb      	ldrb	r3, [r7, #15]
 800fba0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fba4:	3b10      	subs	r3, #16
 800fba6:	2b10      	cmp	r3, #16
 800fba8:	bf8c      	ite	hi
 800fbaa:	2201      	movhi	r2, #1
 800fbac:	2200      	movls	r2, #0
 800fbae:	b2d2      	uxtb	r2, r2
 800fbb0:	2a00      	cmp	r2, #0
 800fbb2:	d10f      	bne.n	800fbd4 <wizphy_getphyconf+0x7c>
 800fbb4:	4a1b      	ldr	r2, [pc, #108]	; (800fc24 <wizphy_getphyconf+0xcc>)
 800fbb6:	fa22 f303 	lsr.w	r3, r2, r3
 800fbba:	f003 0301 	and.w	r3, r3, #1
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	bf14      	ite	ne
 800fbc2:	2301      	movne	r3, #1
 800fbc4:	2300      	moveq	r3, #0
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d003      	beq.n	800fbd4 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2201      	movs	r2, #1
 800fbd0:	709a      	strb	r2, [r3, #2]
         break;
 800fbd2:	e003      	b.n	800fbdc <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	709a      	strb	r2, [r3, #2]
         break;
 800fbda:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800fbdc:	7bfb      	ldrb	r3, [r7, #15]
 800fbde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fbe2:	3b08      	subs	r3, #8
 800fbe4:	2b18      	cmp	r3, #24
 800fbe6:	bf8c      	ite	hi
 800fbe8:	2201      	movhi	r2, #1
 800fbea:	2200      	movls	r2, #0
 800fbec:	b2d2      	uxtb	r2, r2
 800fbee:	2a00      	cmp	r2, #0
 800fbf0:	d10f      	bne.n	800fc12 <wizphy_getphyconf+0xba>
 800fbf2:	4a0d      	ldr	r2, [pc, #52]	; (800fc28 <wizphy_getphyconf+0xd0>)
 800fbf4:	fa22 f303 	lsr.w	r3, r2, r3
 800fbf8:	f003 0301 	and.w	r3, r3, #1
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	bf14      	ite	ne
 800fc00:	2301      	movne	r3, #1
 800fc02:	2300      	moveq	r3, #0
 800fc04:	b2db      	uxtb	r3, r3
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d003      	beq.n	800fc12 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	70da      	strb	r2, [r3, #3]
         break;
 800fc10:	e003      	b.n	800fc1a <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2200      	movs	r2, #0
 800fc16:	70da      	strb	r2, [r3, #3]
         break;
 800fc18:	bf00      	nop
   }
}
 800fc1a:	bf00      	nop
 800fc1c:	3710      	adds	r7, #16
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	00010101 	.word	0x00010101
 800fc28:	01010001 	.word	0x01010001

0800fc2c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	4603      	mov	r3, r0
 800fc34:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800fc36:	2300      	movs	r3, #0
 800fc38:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800fc3a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800fc3e:	f7fe f96f 	bl	800df20 <WIZCHIP_READ>
 800fc42:	4603      	mov	r3, r0
 800fc44:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800fc46:	7bfb      	ldrb	r3, [r7, #15]
 800fc48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d102      	bne.n	800fc56 <wizphy_setphypmode+0x2a>
 800fc50:	f04f 33ff 	mov.w	r3, #4294967295
 800fc54:	e030      	b.n	800fcb8 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800fc56:	7bfb      	ldrb	r3, [r7, #15]
 800fc58:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800fc5c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800fc5e:	79fb      	ldrb	r3, [r7, #7]
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	d104      	bne.n	800fc6e <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 800fc64:	7bfb      	ldrb	r3, [r7, #15]
 800fc66:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800fc6a:	73fb      	strb	r3, [r7, #15]
 800fc6c:	e003      	b.n	800fc76 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800fc6e:	7bfb      	ldrb	r3, [r7, #15]
 800fc70:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800fc74:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800fc76:	7bfb      	ldrb	r3, [r7, #15]
 800fc78:	4619      	mov	r1, r3
 800fc7a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800fc7e:	f7fe f99b 	bl	800dfb8 <WIZCHIP_WRITE>
   wizphy_reset();
 800fc82:	f7ff feff 	bl	800fa84 <wizphy_reset>
   tmp = getPHYCFGR();
 800fc86:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800fc8a:	f7fe f949 	bl	800df20 <WIZCHIP_READ>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800fc92:	79fb      	ldrb	r3, [r7, #7]
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d106      	bne.n	800fca6 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800fc98:	7bfb      	ldrb	r3, [r7, #15]
 800fc9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d008      	beq.n	800fcb4 <wizphy_setphypmode+0x88>
 800fca2:	2300      	movs	r3, #0
 800fca4:	e008      	b.n	800fcb8 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800fca6:	7bfb      	ldrb	r3, [r7, #15]
 800fca8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d001      	beq.n	800fcb4 <wizphy_setphypmode+0x88>
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	e001      	b.n	800fcb8 <wizphy_setphypmode+0x8c>
   }
   return -1;
 800fcb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3710      	adds	r7, #16
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b082      	sub	sp, #8
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2206      	movs	r2, #6
 800fccc:	4619      	mov	r1, r3
 800fcce:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800fcd2:	f7fe fa1f 	bl	800e114 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	330e      	adds	r3, #14
 800fcda:	2204      	movs	r2, #4
 800fcdc:	4619      	mov	r1, r3
 800fcde:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fce2:	f7fe fa17 	bl	800e114 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	330a      	adds	r3, #10
 800fcea:	2204      	movs	r2, #4
 800fcec:	4619      	mov	r1, r3
 800fcee:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800fcf2:	f7fe fa0f 	bl	800e114 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	3306      	adds	r3, #6
 800fcfa:	2204      	movs	r2, #4
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800fd02:	f7fe fa07 	bl	800e114 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	7c9a      	ldrb	r2, [r3, #18]
 800fd0a:	4b0b      	ldr	r3, [pc, #44]	; (800fd38 <wizchip_setnetinfo+0x78>)
 800fd0c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	7cda      	ldrb	r2, [r3, #19]
 800fd12:	4b09      	ldr	r3, [pc, #36]	; (800fd38 <wizchip_setnetinfo+0x78>)
 800fd14:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	7d1a      	ldrb	r2, [r3, #20]
 800fd1a:	4b07      	ldr	r3, [pc, #28]	; (800fd38 <wizchip_setnetinfo+0x78>)
 800fd1c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	7d5a      	ldrb	r2, [r3, #21]
 800fd22:	4b05      	ldr	r3, [pc, #20]	; (800fd38 <wizchip_setnetinfo+0x78>)
 800fd24:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	7d9a      	ldrb	r2, [r3, #22]
 800fd2a:	4b04      	ldr	r3, [pc, #16]	; (800fd3c <wizchip_setnetinfo+0x7c>)
 800fd2c:	701a      	strb	r2, [r3, #0]
}
 800fd2e:	bf00      	nop
 800fd30:	3708      	adds	r7, #8
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	200010e8 	.word	0x200010e8
 800fd3c:	200010ec 	.word	0x200010ec

0800fd40 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2206      	movs	r2, #6
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800fd52:	f7fe f97f 	bl	800e054 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	330e      	adds	r3, #14
 800fd5a:	2204      	movs	r2, #4
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fd62:	f7fe f977 	bl	800e054 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	330a      	adds	r3, #10
 800fd6a:	2204      	movs	r2, #4
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800fd72:	f7fe f96f 	bl	800e054 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	3306      	adds	r3, #6
 800fd7a:	2204      	movs	r2, #4
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800fd82:	f7fe f967 	bl	800e054 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800fd86:	4b0c      	ldr	r3, [pc, #48]	; (800fdb8 <wizchip_getnetinfo+0x78>)
 800fd88:	781a      	ldrb	r2, [r3, #0]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800fd8e:	4b0a      	ldr	r3, [pc, #40]	; (800fdb8 <wizchip_getnetinfo+0x78>)
 800fd90:	785a      	ldrb	r2, [r3, #1]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800fd96:	4b08      	ldr	r3, [pc, #32]	; (800fdb8 <wizchip_getnetinfo+0x78>)
 800fd98:	789a      	ldrb	r2, [r3, #2]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800fd9e:	4b06      	ldr	r3, [pc, #24]	; (800fdb8 <wizchip_getnetinfo+0x78>)
 800fda0:	78da      	ldrb	r2, [r3, #3]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800fda6:	4b05      	ldr	r3, [pc, #20]	; (800fdbc <wizchip_getnetinfo+0x7c>)
 800fda8:	781a      	ldrb	r2, [r3, #0]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	759a      	strb	r2, [r3, #22]
}
 800fdae:	bf00      	nop
 800fdb0:	3708      	adds	r7, #8
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	200010e8 	.word	0x200010e8
 800fdbc:	200010ec 	.word	0x200010ec

0800fdc0 <__NVIC_SystemReset>:
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800fdc4:	f3bf 8f4f 	dsb	sy
}
 800fdc8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800fdca:	4b06      	ldr	r3, [pc, #24]	; (800fde4 <__NVIC_SystemReset+0x24>)
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800fdd2:	4904      	ldr	r1, [pc, #16]	; (800fde4 <__NVIC_SystemReset+0x24>)
 800fdd4:	4b04      	ldr	r3, [pc, #16]	; (800fde8 <__NVIC_SystemReset+0x28>)
 800fdd6:	4313      	orrs	r3, r2
 800fdd8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800fdda:	f3bf 8f4f 	dsb	sy
}
 800fdde:	bf00      	nop
    __NOP();
 800fde0:	bf00      	nop
 800fde2:	e7fd      	b.n	800fde0 <__NVIC_SystemReset+0x20>
 800fde4:	e000ed00 	.word	0xe000ed00
 800fde8:	05fa0004 	.word	0x05fa0004

0800fdec <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b085      	sub	sp, #20
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	1c5a      	adds	r2, r3, #1
 800fdf8:	607a      	str	r2, [r7, #4]
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	021b      	lsls	r3, r3, #8
 800fe00:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	b29a      	uxth	r2, r3
 800fe08:	89fb      	ldrh	r3, [r7, #14]
 800fe0a:	4413      	add	r3, r2
 800fe0c:	81fb      	strh	r3, [r7, #14]
	return i;
 800fe0e:	89fb      	ldrh	r3, [r7, #14]
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3714      	adds	r7, #20
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bc80      	pop	{r7}
 800fe18:	4770      	bx	lr

0800fe1a <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 800fe1a:	b480      	push	{r7}
 800fe1c:	b083      	sub	sp, #12
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
 800fe22:	460b      	mov	r3, r1
 800fe24:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 800fe26:	887b      	ldrh	r3, [r7, #2]
 800fe28:	0a1b      	lsrs	r3, r3, #8
 800fe2a:	b299      	uxth	r1, r3
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	1c5a      	adds	r2, r3, #1
 800fe30:	607a      	str	r2, [r7, #4]
 800fe32:	b2ca      	uxtb	r2, r1
 800fe34:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	1c5a      	adds	r2, r3, #1
 800fe3a:	607a      	str	r2, [r7, #4]
 800fe3c:	887a      	ldrh	r2, [r7, #2]
 800fe3e:	b2d2      	uxtb	r2, r2
 800fe40:	701a      	strb	r2, [r3, #0]
	return s;
 800fe42:	687b      	ldr	r3, [r7, #4]
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	370c      	adds	r7, #12
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bc80      	pop	{r7}
 800fe4c:	4770      	bx	lr

0800fe4e <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 800fe4e:	b480      	push	{r7}
 800fe50:	b08b      	sub	sp, #44	; 0x2c
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	60f8      	str	r0, [r7, #12]
 800fe56:	60b9      	str	r1, [r7, #8]
 800fe58:	607a      	str	r2, [r7, #4]
 800fe5a:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 800fe60:	2300      	movs	r3, #0
 800fe62:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 800fe64:	2300      	movs	r3, #0
 800fe66:	617b      	str	r3, [r7, #20]

	cp = compressed;
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 800fe6c:	6a3b      	ldr	r3, [r7, #32]
 800fe6e:	1c5a      	adds	r2, r3, #1
 800fe70:	623a      	str	r2, [r7, #32]
 800fe72:	781b      	ldrb	r3, [r3, #0]
 800fe74:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d102      	bne.n	800fe82 <parse_name+0x34>
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	3301      	adds	r3, #1
 800fe80:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 800fe82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fe84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fe88:	2bc0      	cmp	r3, #192	; 0xc0
 800fe8a:	d117      	bne.n	800febc <parse_name+0x6e>
		{
			if (!indirect)
 800fe8c:	69bb      	ldr	r3, [r7, #24]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d102      	bne.n	800fe98 <parse_name+0x4a>
				clen++;
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	3301      	adds	r3, #1
 800fe96:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 800fe98:	2301      	movs	r3, #1
 800fe9a:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 800fe9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fe9e:	021b      	lsls	r3, r3, #8
 800fea0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800fea4:	6a3a      	ldr	r2, [r7, #32]
 800fea6:	7812      	ldrb	r2, [r2, #0]
 800fea8:	4413      	add	r3, r2
 800feaa:	461a      	mov	r2, r3
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	4413      	add	r3, r2
 800feb0:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 800feb2:	6a3b      	ldr	r3, [r7, #32]
 800feb4:	1c5a      	adds	r2, r3, #1
 800feb6:	623a      	str	r2, [r7, #32]
 800feb8:	781b      	ldrb	r3, [r3, #0]
 800feba:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 800febc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d02b      	beq.n	800ff1a <parse_name+0xcc>
			break;

		len -= slen + 1;
 800fec2:	887a      	ldrh	r2, [r7, #2]
 800fec4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fec6:	1ad3      	subs	r3, r2, r3
 800fec8:	b29b      	uxth	r3, r3
 800feca:	3b01      	subs	r3, #1
 800fecc:	b29b      	uxth	r3, r3
 800fece:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 800fed0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	da02      	bge.n	800fede <parse_name+0x90>
 800fed8:	f04f 33ff 	mov.w	r3, #4294967295
 800fedc:	e038      	b.n	800ff50 <parse_name+0x102>

		if (!indirect) clen += slen;
 800fede:	69bb      	ldr	r3, [r7, #24]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d10c      	bne.n	800fefe <parse_name+0xb0>
 800fee4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fee6:	69fa      	ldr	r2, [r7, #28]
 800fee8:	4413      	add	r3, r2
 800feea:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 800feec:	e007      	b.n	800fefe <parse_name+0xb0>
 800feee:	6a3a      	ldr	r2, [r7, #32]
 800fef0:	1c53      	adds	r3, r2, #1
 800fef2:	623b      	str	r3, [r7, #32]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	1c59      	adds	r1, r3, #1
 800fef8:	6079      	str	r1, [r7, #4]
 800fefa:	7812      	ldrb	r2, [r2, #0]
 800fefc:	701a      	strb	r2, [r3, #0]
 800fefe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff00:	1e5a      	subs	r2, r3, #1
 800ff02:	84fa      	strh	r2, [r7, #38]	; 0x26
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d1f2      	bne.n	800feee <parse_name+0xa0>
		*buf++ = '.';
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	1c5a      	adds	r2, r3, #1
 800ff0c:	607a      	str	r2, [r7, #4]
 800ff0e:	222e      	movs	r2, #46	; 0x2e
 800ff10:	701a      	strb	r2, [r3, #0]
		nseg++;
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	3301      	adds	r3, #1
 800ff16:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 800ff18:	e7a8      	b.n	800fe6c <parse_name+0x1e>
			break;
 800ff1a:	bf00      	nop
	}

	if (nseg == 0)
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d10a      	bne.n	800ff38 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	1c5a      	adds	r2, r3, #1
 800ff26:	607a      	str	r2, [r7, #4]
 800ff28:	222e      	movs	r2, #46	; 0x2e
 800ff2a:	701a      	strb	r2, [r3, #0]
		len--;
 800ff2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ff30:	b29b      	uxth	r3, r3
 800ff32:	3b01      	subs	r3, #1
 800ff34:	b29b      	uxth	r3, r3
 800ff36:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	1c5a      	adds	r2, r3, #1
 800ff3c:	607a      	str	r2, [r7, #4]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	701a      	strb	r2, [r3, #0]
	len--;
 800ff42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	3b01      	subs	r3, #1
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 800ff4e:	69fb      	ldr	r3, [r7, #28]
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	372c      	adds	r7, #44	; 0x2c
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bc80      	pop	{r7}
 800ff58:	4770      	bx	lr

0800ff5a <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 800ff5a:	b580      	push	{r7, lr}
 800ff5c:	b0b4      	sub	sp, #208	; 0xd0
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
 800ff62:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 800ff64:	f107 020c 	add.w	r2, r7, #12
 800ff68:	23c0      	movs	r3, #192	; 0xc0
 800ff6a:	6839      	ldr	r1, [r7, #0]
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f7ff ff6e 	bl	800fe4e <parse_name>
 800ff72:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 800ff76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ff7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff7e:	d101      	bne.n	800ff84 <dns_question+0x2a>
 800ff80:	2300      	movs	r3, #0
 800ff82:	e00b      	b.n	800ff9c <dns_question+0x42>

	cp += len;
 800ff84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ff88:	683a      	ldr	r2, [r7, #0]
 800ff8a:	4413      	add	r3, r2
 800ff8c:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	3302      	adds	r3, #2
 800ff92:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	3302      	adds	r3, #2
 800ff98:	603b      	str	r3, [r7, #0]

	return cp;
 800ff9a:	683b      	ldr	r3, [r7, #0]
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	37d0      	adds	r7, #208	; 0xd0
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b0b6      	sub	sp, #216	; 0xd8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 800ffb0:	f107 0210 	add.w	r2, r7, #16
 800ffb4:	23c0      	movs	r3, #192	; 0xc0
 800ffb6:	68b9      	ldr	r1, [r7, #8]
 800ffb8:	68f8      	ldr	r0, [r7, #12]
 800ffba:	f7ff ff48 	bl	800fe4e <parse_name>
 800ffbe:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 800ffc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ffc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffca:	d101      	bne.n	800ffd0 <dns_answer+0x2c>
 800ffcc:	2300      	movs	r3, #0
 800ffce:	e0f9      	b.n	80101c4 <dns_answer+0x220>

	cp += len;
 800ffd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ffd4:	68ba      	ldr	r2, [r7, #8]
 800ffd6:	4413      	add	r3, r2
 800ffd8:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 800ffda:	68b8      	ldr	r0, [r7, #8]
 800ffdc:	f7ff ff06 	bl	800fdec <get16>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	3302      	adds	r3, #2
 800ffea:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	3302      	adds	r3, #2
 800fff0:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	3304      	adds	r3, #4
 800fff6:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	3302      	adds	r3, #2
 800fffc:	60bb      	str	r3, [r7, #8]


	switch (type)
 800fffe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010002:	2b10      	cmp	r3, #16
 8010004:	f000 80da 	beq.w	80101bc <dns_answer+0x218>
 8010008:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801000c:	2b10      	cmp	r3, #16
 801000e:	f300 80d7 	bgt.w	80101c0 <dns_answer+0x21c>
 8010012:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010016:	2b0f      	cmp	r3, #15
 8010018:	d07d      	beq.n	8010116 <dns_answer+0x172>
 801001a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801001e:	2b0f      	cmp	r3, #15
 8010020:	f300 80ce 	bgt.w	80101c0 <dns_answer+0x21c>
 8010024:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010028:	2b0c      	cmp	r3, #12
 801002a:	dc26      	bgt.n	801007a <dns_answer+0xd6>
 801002c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010030:	2b00      	cmp	r3, #0
 8010032:	f340 80c5 	ble.w	80101c0 <dns_answer+0x21c>
 8010036:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801003a:	2201      	movs	r2, #1
 801003c:	fa02 f303 	lsl.w	r3, r2, r3
 8010040:	f241 32a4 	movw	r2, #5028	; 0x13a4
 8010044:	401a      	ands	r2, r3
 8010046:	2a00      	cmp	r2, #0
 8010048:	bf14      	ite	ne
 801004a:	2201      	movne	r2, #1
 801004c:	2200      	moveq	r2, #0
 801004e:	b2d2      	uxtb	r2, r2
 8010050:	2a00      	cmp	r2, #0
 8010052:	d133      	bne.n	80100bc <dns_answer+0x118>
 8010054:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8010058:	2a00      	cmp	r2, #0
 801005a:	bf14      	ite	ne
 801005c:	2201      	movne	r2, #1
 801005e:	2200      	moveq	r2, #0
 8010060:	b2d2      	uxtb	r2, r2
 8010062:	2a00      	cmp	r2, #0
 8010064:	d170      	bne.n	8010148 <dns_answer+0x1a4>
 8010066:	f003 0302 	and.w	r3, r3, #2
 801006a:	2b00      	cmp	r3, #0
 801006c:	bf14      	ite	ne
 801006e:	2301      	movne	r3, #1
 8010070:	2300      	moveq	r3, #0
 8010072:	b2db      	uxtb	r3, r3
 8010074:	2b00      	cmp	r3, #0
 8010076:	d105      	bne.n	8010084 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 8010078:	e0a2      	b.n	80101c0 <dns_answer+0x21c>
	switch (type)
 801007a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801007e:	2b0d      	cmp	r3, #13
 8010080:	d032      	beq.n	80100e8 <dns_answer+0x144>
		break;
 8010082:	e09d      	b.n	80101c0 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	1c5a      	adds	r2, r3, #1
 8010088:	60ba      	str	r2, [r7, #8]
 801008a:	781a      	ldrb	r2, [r3, #0]
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	1c5a      	adds	r2, r3, #1
 8010094:	60ba      	str	r2, [r7, #8]
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	3201      	adds	r2, #1
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	1c5a      	adds	r2, r3, #1
 80100a2:	60ba      	str	r2, [r7, #8]
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	3202      	adds	r2, #2
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	1c5a      	adds	r2, r3, #1
 80100b0:	60ba      	str	r2, [r7, #8]
 80100b2:	687a      	ldr	r2, [r7, #4]
 80100b4:	3203      	adds	r2, #3
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	7013      	strb	r3, [r2, #0]
		break;
 80100ba:	e082      	b.n	80101c2 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 80100bc:	f107 0210 	add.w	r2, r7, #16
 80100c0:	23c0      	movs	r3, #192	; 0xc0
 80100c2:	68b9      	ldr	r1, [r7, #8]
 80100c4:	68f8      	ldr	r0, [r7, #12]
 80100c6:	f7ff fec2 	bl	800fe4e <parse_name>
 80100ca:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80100ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80100d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100d6:	d101      	bne.n	80100dc <dns_answer+0x138>
 80100d8:	2300      	movs	r3, #0
 80100da:	e073      	b.n	80101c4 <dns_answer+0x220>
		cp += len;
 80100dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80100e0:	68ba      	ldr	r2, [r7, #8]
 80100e2:	4413      	add	r3, r2
 80100e4:	60bb      	str	r3, [r7, #8]
		break;
 80100e6:	e06c      	b.n	80101c2 <dns_answer+0x21e>
		len = *cp++;
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	1c5a      	adds	r2, r3, #1
 80100ec:	60ba      	str	r2, [r7, #8]
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 80100f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80100f8:	68ba      	ldr	r2, [r7, #8]
 80100fa:	4413      	add	r3, r2
 80100fc:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	1c5a      	adds	r2, r3, #1
 8010102:	60ba      	str	r2, [r7, #8]
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 801010a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801010e:	68ba      	ldr	r2, [r7, #8]
 8010110:	4413      	add	r3, r2
 8010112:	60bb      	str	r3, [r7, #8]
		break;
 8010114:	e055      	b.n	80101c2 <dns_answer+0x21e>
		cp += 2;
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	3302      	adds	r3, #2
 801011a:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801011c:	f107 0210 	add.w	r2, r7, #16
 8010120:	23c0      	movs	r3, #192	; 0xc0
 8010122:	68b9      	ldr	r1, [r7, #8]
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	f7ff fe92 	bl	800fe4e <parse_name>
 801012a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801012e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010136:	d101      	bne.n	801013c <dns_answer+0x198>
 8010138:	2300      	movs	r3, #0
 801013a:	e043      	b.n	80101c4 <dns_answer+0x220>
		cp += len;
 801013c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010140:	68ba      	ldr	r2, [r7, #8]
 8010142:	4413      	add	r3, r2
 8010144:	60bb      	str	r3, [r7, #8]
		break;
 8010146:	e03c      	b.n	80101c2 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8010148:	f107 0210 	add.w	r2, r7, #16
 801014c:	23c0      	movs	r3, #192	; 0xc0
 801014e:	68b9      	ldr	r1, [r7, #8]
 8010150:	68f8      	ldr	r0, [r7, #12]
 8010152:	f7ff fe7c 	bl	800fe4e <parse_name>
 8010156:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801015a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801015e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010162:	d101      	bne.n	8010168 <dns_answer+0x1c4>
 8010164:	2300      	movs	r3, #0
 8010166:	e02d      	b.n	80101c4 <dns_answer+0x220>
		cp += len;
 8010168:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801016c:	68ba      	ldr	r2, [r7, #8]
 801016e:	4413      	add	r3, r2
 8010170:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8010172:	f107 0210 	add.w	r2, r7, #16
 8010176:	23c0      	movs	r3, #192	; 0xc0
 8010178:	68b9      	ldr	r1, [r7, #8]
 801017a:	68f8      	ldr	r0, [r7, #12]
 801017c:	f7ff fe67 	bl	800fe4e <parse_name>
 8010180:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8010184:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801018c:	d101      	bne.n	8010192 <dns_answer+0x1ee>
 801018e:	2300      	movs	r3, #0
 8010190:	e018      	b.n	80101c4 <dns_answer+0x220>
		cp += len;
 8010192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010196:	68ba      	ldr	r2, [r7, #8]
 8010198:	4413      	add	r3, r2
 801019a:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	3304      	adds	r3, #4
 80101a0:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	3304      	adds	r3, #4
 80101a6:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	3304      	adds	r3, #4
 80101ac:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	3304      	adds	r3, #4
 80101b2:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	3304      	adds	r3, #4
 80101b8:	60bb      	str	r3, [r7, #8]
		break;
 80101ba:	e002      	b.n	80101c2 <dns_answer+0x21e>
		break;
 80101bc:	bf00      	nop
 80101be:	e000      	b.n	80101c2 <dns_answer+0x21e>
		break;
 80101c0:	bf00      	nop
	}

	return cp;
 80101c2:	68bb      	ldr	r3, [r7, #8]
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	37d8      	adds	r7, #216	; 0xd8
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b088      	sub	sp, #32
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	60f8      	str	r0, [r7, #12]
 80101d4:	60b9      	str	r1, [r7, #8]
 80101d6:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 80101dc:	2212      	movs	r2, #18
 80101de:	2100      	movs	r1, #0
 80101e0:	68f8      	ldr	r0, [r7, #12]
 80101e2:	f003 f875 	bl	80132d0 <memset>

	pdhdr->id = get16(&msg[0]);
 80101e6:	6978      	ldr	r0, [r7, #20]
 80101e8:	f7ff fe00 	bl	800fdec <get16>
 80101ec:	4603      	mov	r3, r0
 80101ee:	461a      	mov	r2, r3
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	3302      	adds	r3, #2
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7ff fdf7 	bl	800fdec <get16>
 80101fe:	4603      	mov	r3, r0
 8010200:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 8010202:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010206:	2b00      	cmp	r3, #0
 8010208:	da02      	bge.n	8010210 <parseDNSMSG+0x44>
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2201      	movs	r2, #1
 801020e:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8010210:	8a7b      	ldrh	r3, [r7, #18]
 8010212:	0adb      	lsrs	r3, r3, #11
 8010214:	b29b      	uxth	r3, r3
 8010216:	b2db      	uxtb	r3, r3
 8010218:	f003 030f 	and.w	r3, r3, #15
 801021c:	b2da      	uxtb	r2, r3
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 8010222:	8a7b      	ldrh	r3, [r7, #18]
 8010224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010228:	2b00      	cmp	r3, #0
 801022a:	d002      	beq.n	8010232 <parseDNSMSG+0x66>
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2201      	movs	r2, #1
 8010230:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8010232:	8a7b      	ldrh	r3, [r7, #18]
 8010234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010238:	2b00      	cmp	r3, #0
 801023a:	d002      	beq.n	8010242 <parseDNSMSG+0x76>
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2201      	movs	r2, #1
 8010240:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 8010242:	8a7b      	ldrh	r3, [r7, #18]
 8010244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010248:	2b00      	cmp	r3, #0
 801024a:	d002      	beq.n	8010252 <parseDNSMSG+0x86>
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	2201      	movs	r2, #1
 8010250:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 8010252:	8a7b      	ldrh	r3, [r7, #18]
 8010254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010258:	2b00      	cmp	r3, #0
 801025a:	d002      	beq.n	8010262 <parseDNSMSG+0x96>
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2201      	movs	r2, #1
 8010260:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 8010262:	8a7b      	ldrh	r3, [r7, #18]
 8010264:	b2db      	uxtb	r3, r3
 8010266:	f003 030f 	and.w	r3, r3, #15
 801026a:	b2da      	uxtb	r2, r3
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	3304      	adds	r3, #4
 8010274:	4618      	mov	r0, r3
 8010276:	f7ff fdb9 	bl	800fdec <get16>
 801027a:	4603      	mov	r3, r0
 801027c:	461a      	mov	r2, r3
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	3306      	adds	r3, #6
 8010286:	4618      	mov	r0, r3
 8010288:	f7ff fdb0 	bl	800fdec <get16>
 801028c:	4603      	mov	r3, r0
 801028e:	461a      	mov	r2, r3
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	3308      	adds	r3, #8
 8010298:	4618      	mov	r0, r3
 801029a:	f7ff fda7 	bl	800fdec <get16>
 801029e:	4603      	mov	r3, r0
 80102a0:	461a      	mov	r2, r3
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	330a      	adds	r3, #10
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7ff fd9e 	bl	800fdec <get16>
 80102b0:	4603      	mov	r3, r0
 80102b2:	461a      	mov	r2, r3
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	330c      	adds	r3, #12
 80102bc:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 80102be:	2300      	movs	r3, #0
 80102c0:	83fb      	strh	r3, [r7, #30]
 80102c2:	e00d      	b.n	80102e0 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 80102c4:	69b9      	ldr	r1, [r7, #24]
 80102c6:	6978      	ldr	r0, [r7, #20]
 80102c8:	f7ff fe47 	bl	800ff5a <dns_question>
 80102cc:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80102ce:	69bb      	ldr	r3, [r7, #24]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d102      	bne.n	80102da <parseDNSMSG+0x10e>
 80102d4:	f04f 33ff 	mov.w	r3, #4294967295
 80102d8:	e03b      	b.n	8010352 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 80102da:	8bfb      	ldrh	r3, [r7, #30]
 80102dc:	3301      	adds	r3, #1
 80102de:	83fb      	strh	r3, [r7, #30]
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	895b      	ldrh	r3, [r3, #10]
 80102e4:	8bfa      	ldrh	r2, [r7, #30]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d3ec      	bcc.n	80102c4 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 80102ea:	2300      	movs	r3, #0
 80102ec:	83fb      	strh	r3, [r7, #30]
 80102ee:	e00e      	b.n	801030e <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	69b9      	ldr	r1, [r7, #24]
 80102f4:	6978      	ldr	r0, [r7, #20]
 80102f6:	f7ff fe55 	bl	800ffa4 <dns_answer>
 80102fa:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80102fc:	69bb      	ldr	r3, [r7, #24]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d102      	bne.n	8010308 <parseDNSMSG+0x13c>
 8010302:	f04f 33ff 	mov.w	r3, #4294967295
 8010306:	e024      	b.n	8010352 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 8010308:	8bfb      	ldrh	r3, [r7, #30]
 801030a:	3301      	adds	r3, #1
 801030c:	83fb      	strh	r3, [r7, #30]
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	899b      	ldrh	r3, [r3, #12]
 8010312:	8bfa      	ldrh	r2, [r7, #30]
 8010314:	429a      	cmp	r2, r3
 8010316:	d3eb      	bcc.n	80102f0 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8010318:	2300      	movs	r3, #0
 801031a:	83fb      	strh	r3, [r7, #30]
 801031c:	e002      	b.n	8010324 <parseDNSMSG+0x158>
 801031e:	8bfb      	ldrh	r3, [r7, #30]
 8010320:	3301      	adds	r3, #1
 8010322:	83fb      	strh	r3, [r7, #30]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	89db      	ldrh	r3, [r3, #14]
 8010328:	8bfa      	ldrh	r2, [r7, #30]
 801032a:	429a      	cmp	r2, r3
 801032c:	d3f7      	bcc.n	801031e <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 801032e:	2300      	movs	r3, #0
 8010330:	83fb      	strh	r3, [r7, #30]
 8010332:	e002      	b.n	801033a <parseDNSMSG+0x16e>
 8010334:	8bfb      	ldrh	r3, [r7, #30]
 8010336:	3301      	adds	r3, #1
 8010338:	83fb      	strh	r3, [r7, #30]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	8a1b      	ldrh	r3, [r3, #16]
 801033e:	8bfa      	ldrh	r2, [r7, #30]
 8010340:	429a      	cmp	r2, r3
 8010342:	d3f7      	bcc.n	8010334 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	7a1b      	ldrb	r3, [r3, #8]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d101      	bne.n	8010350 <parseDNSMSG+0x184>
 801034c:	2301      	movs	r3, #1
 801034e:	e000      	b.n	8010352 <parseDNSMSG+0x186>
	else return 0;
 8010350:	2300      	movs	r3, #0
}
 8010352:	4618      	mov	r0, r3
 8010354:	3720      	adds	r7, #32
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
	...

0801035c <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b0b8      	sub	sp, #224	; 0xe0
 8010360:	af00      	add	r7, sp, #0
 8010362:	60b9      	str	r1, [r7, #8]
 8010364:	607a      	str	r2, [r7, #4]
 8010366:	461a      	mov	r2, r3
 8010368:	4603      	mov	r3, r0
 801036a:	81fb      	strh	r3, [r7, #14]
 801036c:	4613      	mov	r3, r2
 801036e:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 8010376:	4b57      	ldr	r3, [pc, #348]	; (80104d4 <dns_makequery+0x178>)
 8010378:	881b      	ldrh	r3, [r3, #0]
 801037a:	3301      	adds	r3, #1
 801037c:	b29a      	uxth	r2, r3
 801037e:	4b55      	ldr	r3, [pc, #340]	; (80104d4 <dns_makequery+0x178>)
 8010380:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 8010382:	4b54      	ldr	r3, [pc, #336]	; (80104d4 <dns_makequery+0x178>)
 8010384:	881b      	ldrh	r3, [r3, #0]
 8010386:	4619      	mov	r1, r3
 8010388:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801038c:	f7ff fd45 	bl	800fe1a <put16>
 8010390:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8010394:	89fb      	ldrh	r3, [r7, #14]
 8010396:	02db      	lsls	r3, r3, #11
 8010398:	b21b      	sxth	r3, r3
 801039a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801039e:	b21b      	sxth	r3, r3
 80103a0:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 80103a4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80103a8:	4619      	mov	r1, r3
 80103aa:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80103ae:	f7ff fd34 	bl	800fe1a <put16>
 80103b2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 80103b6:	2101      	movs	r1, #1
 80103b8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80103bc:	f7ff fd2d 	bl	800fe1a <put16>
 80103c0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 80103c4:	2100      	movs	r1, #0
 80103c6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80103ca:	f7ff fd26 	bl	800fe1a <put16>
 80103ce:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 80103d2:	2100      	movs	r1, #0
 80103d4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80103d8:	f7ff fd1f 	bl	800fe1a <put16>
 80103dc:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 80103e0:	2100      	movs	r1, #0
 80103e2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80103e6:	f7ff fd18 	bl	800fe1a <put16>
 80103ea:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 80103ee:	f107 0310 	add.w	r3, r7, #16
 80103f2:	68b9      	ldr	r1, [r7, #8]
 80103f4:	4618      	mov	r0, r3
 80103f6:	f003 f858 	bl	80134aa <strcpy>
	dname = sname;
 80103fa:	f107 0310 	add.w	r3, r7, #16
 80103fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 8010402:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8010406:	f7ef fead 	bl	8000164 <strlen>
 801040a:	4603      	mov	r3, r0
 801040c:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		//uartPrintf(_DEF_CH1,"test1 dns,...\r\n");
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8010410:	212e      	movs	r1, #46	; 0x2e
 8010412:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8010416:	f002 ff63 	bl	80132e0 <strchr>
 801041a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 801041e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d006      	beq.n	8010434 <dns_makequery+0xd8>
 8010426:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801042a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801042e:	1ad3      	subs	r3, r2, r3
 8010430:	81bb      	strh	r3, [r7, #12]
 8010432:	e002      	b.n	801043a <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 8010434:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8010438:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 801043a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801043e:	1c5a      	adds	r2, r3, #1
 8010440:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8010444:	89ba      	ldrh	r2, [r7, #12]
 8010446:	b2d2      	uxtb	r2, r2
 8010448:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 801044a:	89bb      	ldrh	r3, [r7, #12]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d029      	beq.n	80104a4 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8010450:	89bb      	ldrh	r3, [r7, #12]
 8010452:	461a      	mov	r2, r3
 8010454:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8010458:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801045c:	f002 ff5f 	bl	801331e <strncpy>
		cp += len;
 8010460:	89bb      	ldrh	r3, [r7, #12]
 8010462:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010466:	4413      	add	r3, r2
 8010468:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 801046c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010470:	2b00      	cmp	r3, #0
 8010472:	d107      	bne.n	8010484 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8010474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010478:	1c5a      	adds	r2, r3, #1
 801047a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801047e:	2200      	movs	r2, #0
 8010480:	701a      	strb	r2, [r3, #0]
			break;
 8010482:	e010      	b.n	80104a6 <dns_makequery+0x14a>
			//uartPrintf(_DEF_CH1,"test2 dns,...\r\n");
		}
		dname += len+1;
 8010484:	89bb      	ldrh	r3, [r7, #12]
 8010486:	3301      	adds	r3, #1
 8010488:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801048c:	4413      	add	r3, r2
 801048e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 8010492:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8010496:	89bb      	ldrh	r3, [r7, #12]
 8010498:	1ad3      	subs	r3, r2, r3
 801049a:	b29b      	uxth	r3, r3
 801049c:	3b01      	subs	r3, #1
 801049e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 80104a2:	e7b5      	b.n	8010410 <dns_makequery+0xb4>
		if (len == 0) break;
 80104a4:	bf00      	nop
#ifdef _USE_WDG_
		wdgRefresh();
#endif
	}

	cp = put16(cp, 0x0001);				/* type */
 80104a6:	2101      	movs	r1, #1
 80104a8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80104ac:	f7ff fcb5 	bl	800fe1a <put16>
 80104b0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 80104b4:	2101      	movs	r1, #1
 80104b6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80104ba:	f7ff fcae 	bl	800fe1a <put16>
 80104be:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 80104c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	1ad3      	subs	r3, r2, r3
 80104ca:	b21b      	sxth	r3, r3
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	37e0      	adds	r7, #224	; 0xe0
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	20004804 	.word	0x20004804

080104d8 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 80104d8:	b480      	push	{r7}
 80104da:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 80104dc:	4b0e      	ldr	r3, [pc, #56]	; (8010518 <check_DNS_timeout+0x40>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2b02      	cmp	r3, #2
 80104e2:	d914      	bls.n	801050e <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 80104e4:	4b0c      	ldr	r3, [pc, #48]	; (8010518 <check_DNS_timeout+0x40>)
 80104e6:	2200      	movs	r2, #0
 80104e8:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 80104ea:	4b0c      	ldr	r3, [pc, #48]	; (801051c <check_DNS_timeout+0x44>)
 80104ec:	781b      	ldrb	r3, [r3, #0]
 80104ee:	2b01      	cmp	r3, #1
 80104f0:	d905      	bls.n	80104fe <check_DNS_timeout+0x26>
			retry_count = 0;
 80104f2:	4b0a      	ldr	r3, [pc, #40]	; (801051c <check_DNS_timeout+0x44>)
 80104f4:	2200      	movs	r2, #0
 80104f6:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 80104f8:	f04f 33ff 	mov.w	r3, #4294967295
 80104fc:	e008      	b.n	8010510 <check_DNS_timeout+0x38>
		}
		retry_count++;
 80104fe:	4b07      	ldr	r3, [pc, #28]	; (801051c <check_DNS_timeout+0x44>)
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	3301      	adds	r3, #1
 8010504:	b2da      	uxtb	r2, r3
 8010506:	4b05      	ldr	r3, [pc, #20]	; (801051c <check_DNS_timeout+0x44>)
 8010508:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 801050a:	2300      	movs	r3, #0
 801050c:	e000      	b.n	8010510 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 801050e:	2301      	movs	r3, #1
}
 8010510:	4618      	mov	r0, r3
 8010512:	46bd      	mov	sp, r7
 8010514:	bc80      	pop	{r7}
 8010516:	4770      	bx	lr
 8010518:	200047fc 	.word	0x200047fc
 801051c:	200010ed 	.word	0x200010ed

08010520 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8010520:	b480      	push	{r7}
 8010522:	b083      	sub	sp, #12
 8010524:	af00      	add	r7, sp, #0
 8010526:	4603      	mov	r3, r0
 8010528:	6039      	str	r1, [r7, #0]
 801052a:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 801052c:	4a07      	ldr	r2, [pc, #28]	; (801054c <DNS_init+0x2c>)
 801052e:	79fb      	ldrb	r3, [r7, #7]
 8010530:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 8010532:	4a07      	ldr	r2, [pc, #28]	; (8010550 <DNS_init+0x30>)
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8010538:	4b06      	ldr	r3, [pc, #24]	; (8010554 <DNS_init+0x34>)
 801053a:	f241 1222 	movw	r2, #4386	; 0x1122
 801053e:	801a      	strh	r2, [r3, #0]
}
 8010540:	bf00      	nop
 8010542:	370c      	adds	r7, #12
 8010544:	46bd      	mov	sp, r7
 8010546:	bc80      	pop	{r7}
 8010548:	4770      	bx	lr
 801054a:	bf00      	nop
 801054c:	200047f8 	.word	0x200047f8
 8010550:	20004800 	.word	0x20004800
 8010554:	20004804 	.word	0x20004804

08010558 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8010558:	b5b0      	push	{r4, r5, r7, lr}
 801055a:	b090      	sub	sp, #64	; 0x40
 801055c:	af04      	add	r7, sp, #16
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	607a      	str	r2, [r7, #4]
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;
	int32_t temp;

	retry_count = 0;
 8010564:	4b64      	ldr	r3, [pc, #400]	; (80106f8 <DNS_run+0x1a0>)
 8010566:	2200      	movs	r2, #0
 8010568:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 801056a:	4b64      	ldr	r3, [pc, #400]	; (80106fc <DNS_run+0x1a4>)
 801056c:	2200      	movs	r2, #0
 801056e:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8010570:	4b63      	ldr	r3, [pc, #396]	; (8010700 <DNS_run+0x1a8>)
 8010572:	7818      	ldrb	r0, [r3, #0]
 8010574:	2300      	movs	r3, #0
 8010576:	2200      	movs	r2, #0
 8010578:	2102      	movs	r1, #2
 801057a:	f7fd ffc1 	bl	800e500 <socket>

//#ifdef _DNS_DEBUG_
   uartPrintf(_DEF_CH1,"> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	4619      	mov	r1, r3
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	3301      	adds	r3, #1
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	4618      	mov	r0, r3
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	3302      	adds	r3, #2
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	461a      	mov	r2, r3
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	3303      	adds	r3, #3
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	9301      	str	r3, [sp, #4]
 801059c:	9200      	str	r2, [sp, #0]
 801059e:	4603      	mov	r3, r0
 80105a0:	460a      	mov	r2, r1
 80105a2:	4958      	ldr	r1, [pc, #352]	; (8010704 <DNS_run+0x1ac>)
 80105a4:	2000      	movs	r0, #0
 80105a6:	f7f2 fc1d 	bl	8002de4 <uartPrintf>
//#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 80105aa:	4b57      	ldr	r3, [pc, #348]	; (8010708 <DNS_run+0x1b0>)
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105b2:	68b9      	ldr	r1, [r7, #8]
 80105b4:	2000      	movs	r0, #0
 80105b6:	f7ff fed1 	bl	801035c <dns_makequery>
 80105ba:	4603      	mov	r3, r0
 80105bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uartPrintf(_DEF_CH1,"> checked make query...\r\n");
 80105be:	4953      	ldr	r1, [pc, #332]	; (801070c <DNS_run+0x1b4>)
 80105c0:	2000      	movs	r0, #0
 80105c2:	f7f2 fc0f 	bl	8002de4 <uartPrintf>


	if(sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN) < 0)
 80105c6:	4b4e      	ldr	r3, [pc, #312]	; (8010700 <DNS_run+0x1a8>)
 80105c8:	7818      	ldrb	r0, [r3, #0]
 80105ca:	4b4f      	ldr	r3, [pc, #316]	; (8010708 <DNS_run+0x1b0>)
 80105cc:	6819      	ldr	r1, [r3, #0]
 80105ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80105d0:	2335      	movs	r3, #53	; 0x35
 80105d2:	9300      	str	r3, [sp, #0]
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f7fe fc17 	bl	800ee08 <sendto>
 80105da:	4603      	mov	r3, r0
 80105dc:	2b00      	cmp	r3, #0
 80105de:	da05      	bge.n	80105ec <DNS_run+0x94>
	{
		uartPrintf(_DEF_CH1,"[ERROR] Socket open \r\n");
 80105e0:	494b      	ldr	r1, [pc, #300]	; (8010710 <DNS_run+0x1b8>)
 80105e2:	2000      	movs	r0, #0
 80105e4:	f7f2 fbfe 	bl	8002de4 <uartPrintf>
		NVIC_SystemReset();
 80105e8:	f7ff fbea 	bl	800fdc0 <__NVIC_SystemReset>
	}else{
		uartPrintf(_DEF_CH1,"> Socket open ....\r\n");
 80105ec:	4949      	ldr	r1, [pc, #292]	; (8010714 <DNS_run+0x1bc>)
 80105ee:	2000      	movs	r0, #0
 80105f0:	f7f2 fbf8 	bl	8002de4 <uartPrintf>
	}


	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 80105f4:	4b42      	ldr	r3, [pc, #264]	; (8010700 <DNS_run+0x1a8>)
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7fd fe36 	bl	800e26a <getSn_RX_RSR>
 80105fe:	4603      	mov	r3, r0
 8010600:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010602:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010604:	2b00      	cmp	r3, #0
 8010606:	d036      	beq.n	8010676 <DNS_run+0x11e>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8010608:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801060a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801060e:	d902      	bls.n	8010616 <DNS_run+0xbe>
 8010610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010614:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8010616:	4b3a      	ldr	r3, [pc, #232]	; (8010700 <DNS_run+0x1a8>)
 8010618:	7818      	ldrb	r0, [r3, #0]
 801061a:	4b3b      	ldr	r3, [pc, #236]	; (8010708 <DNS_run+0x1b0>)
 801061c:	6819      	ldr	r1, [r3, #0]
 801061e:	f107 0414 	add.w	r4, r7, #20
 8010622:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010624:	f107 0312 	add.w	r3, r7, #18
 8010628:	9300      	str	r3, [sp, #0]
 801062a:	4623      	mov	r3, r4
 801062c:	f7fe fd28 	bl	800f080 <recvfrom>
 8010630:	4603      	mov	r3, r0
 8010632:	85fb      	strh	r3, [r7, #46]	; 0x2e
      //#ifdef _DNS_DEBUG_
			uartPrintf(_DEF_CH1,"> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
 8010634:	7d3b      	ldrb	r3, [r7, #20]
 8010636:	461c      	mov	r4, r3
 8010638:	7d7b      	ldrb	r3, [r7, #21]
 801063a:	461d      	mov	r5, r3
 801063c:	7dbb      	ldrb	r3, [r7, #22]
 801063e:	461a      	mov	r2, r3
 8010640:	7dfb      	ldrb	r3, [r7, #23]
 8010642:	4619      	mov	r1, r3
 8010644:	8a7b      	ldrh	r3, [r7, #18]
 8010646:	4618      	mov	r0, r3
 8010648:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801064a:	9303      	str	r3, [sp, #12]
 801064c:	9002      	str	r0, [sp, #8]
 801064e:	9101      	str	r1, [sp, #4]
 8010650:	9200      	str	r2, [sp, #0]
 8010652:	462b      	mov	r3, r5
 8010654:	4622      	mov	r2, r4
 8010656:	4930      	ldr	r1, [pc, #192]	; (8010718 <DNS_run+0x1c0>)
 8010658:	2000      	movs	r0, #0
 801065a:	f7f2 fbc3 	bl	8002de4 <uartPrintf>
      //#endif
			ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 801065e:	4b2a      	ldr	r3, [pc, #168]	; (8010708 <DNS_run+0x1b0>)
 8010660:	6819      	ldr	r1, [r3, #0]
 8010662:	f107 0318 	add.w	r3, r7, #24
 8010666:	687a      	ldr	r2, [r7, #4]
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff fdaf 	bl	80101cc <parseDNSMSG>
 801066e:	4603      	mov	r3, r0
 8010670:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 8010674:	e034      	b.n	80106e0 <DNS_run+0x188>
//			HAL_Delay(5000);
//			close(DNS_SOCKET);
//			NVIC_SystemReset();
//		}
		// Check Timeout
		ret_check_timeout = check_DNS_timeout();
 8010676:	f7ff ff2f 	bl	80104d8 <check_DNS_timeout>
 801067a:	4603      	mov	r3, r0
 801067c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 8010680:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8010684:	2b00      	cmp	r3, #0
 8010686:	da1c      	bge.n	80106c2 <DNS_run+0x16a>

//#ifdef _DNS_DEBUG_
			uartPrintf(_DEF_CH1,"> DNS Server is not responding : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	4619      	mov	r1, r3
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	3301      	adds	r3, #1
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	4618      	mov	r0, r3
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	3302      	adds	r3, #2
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	461a      	mov	r2, r3
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	3303      	adds	r3, #3
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	9301      	str	r3, [sp, #4]
 80106a6:	9200      	str	r2, [sp, #0]
 80106a8:	4603      	mov	r3, r0
 80106aa:	460a      	mov	r2, r1
 80106ac:	491b      	ldr	r1, [pc, #108]	; (801071c <DNS_run+0x1c4>)
 80106ae:	2000      	movs	r0, #0
 80106b0:	f7f2 fb98 	bl	8002de4 <uartPrintf>
//#endif
			close(DNS_SOCKET);
 80106b4:	4b12      	ldr	r3, [pc, #72]	; (8010700 <DNS_run+0x1a8>)
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7fe f835 	bl	800e728 <close>
			NVIC_SystemReset();
 80106be:	f7ff fb7f 	bl	800fdc0 <__NVIC_SystemReset>
			return 0; // timeout occurred
		}
		else if (ret_check_timeout == 0) {
 80106c2:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d194      	bne.n	80105f4 <DNS_run+0x9c>

//#ifdef _DNS_DEBUG_
			uartPrintf(_DEF_CH1,"> DNS Timeout\r\n");
 80106ca:	4915      	ldr	r1, [pc, #84]	; (8010720 <DNS_run+0x1c8>)
 80106cc:	2000      	movs	r0, #0
 80106ce:	f7f2 fb89 	bl	8002de4 <uartPrintf>
			close(DNS_SOCKET);
 80106d2:	4b0b      	ldr	r3, [pc, #44]	; (8010700 <DNS_run+0x1a8>)
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	4618      	mov	r0, r3
 80106d8:	f7fe f826 	bl	800e728 <close>
			NVIC_SystemReset();
 80106dc:	f7ff fb70 	bl	800fdc0 <__NVIC_SystemReset>
		}
#ifdef _USE_WDG_
		wdgRefresh();
#endif
	}
	close(DNS_SOCKET);
 80106e0:	4b07      	ldr	r3, [pc, #28]	; (8010700 <DNS_run+0x1a8>)
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7fe f81f 	bl	800e728 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 80106ea:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3730      	adds	r7, #48	; 0x30
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bdb0      	pop	{r4, r5, r7, pc}
 80106f6:	bf00      	nop
 80106f8:	200010ed 	.word	0x200010ed
 80106fc:	200047fc 	.word	0x200047fc
 8010700:	200047f8 	.word	0x200047f8
 8010704:	08015ff8 	.word	0x08015ff8
 8010708:	20004800 	.word	0x20004800
 801070c:	08016024 	.word	0x08016024
 8010710:	08016040 	.word	0x08016040
 8010714:	08016058 	.word	0x08016058
 8010718:	08016070 	.word	0x08016070
 801071c:	080160a8 	.word	0x080160a8
 8010720:	080160d8 	.word	0x080160d8

08010724 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8010724:	b480      	push	{r7}
 8010726:	b085      	sub	sp, #20
 8010728:	af00      	add	r7, sp, #0
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	60b9      	str	r1, [r7, #8]
 801072e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	68ba      	ldr	r2, [r7, #8]
 8010734:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	601a      	str	r2, [r3, #0]
}
 801073c:	bf00      	nop
 801073e:	3714      	adds	r7, #20
 8010740:	46bd      	mov	sp, r7
 8010742:	bc80      	pop	{r7}
 8010744:	4770      	bx	lr

08010746 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8010746:	b480      	push	{r7}
 8010748:	b083      	sub	sp, #12
 801074a:	af00      	add	r7, sp, #0
 801074c:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010756:	4293      	cmp	r3, r2
 8010758:	d003      	beq.n	8010762 <getNextPacketId+0x1c>
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	3301      	adds	r3, #1
 8010760:	e000      	b.n	8010764 <getNextPacketId+0x1e>
 8010762:	2301      	movs	r3, #1
 8010764:	687a      	ldr	r2, [r7, #4]
 8010766:	6013      	str	r3, [r2, #0]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
}
 801076c:	4618      	mov	r0, r3
 801076e:	370c      	adds	r7, #12
 8010770:	46bd      	mov	sp, r7
 8010772:	bc80      	pop	{r7}
 8010774:	4770      	bx	lr

08010776 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8010776:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010778:	b087      	sub	sp, #28
 801077a:	af00      	add	r7, sp, #0
 801077c:	60f8      	str	r0, [r7, #12]
 801077e:	60b9      	str	r1, [r7, #8]
 8010780:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8010782:	f04f 33ff 	mov.w	r3, #4294967295
 8010786:	617b      	str	r3, [r7, #20]
        sent = 0;
 8010788:	2300      	movs	r3, #0
 801078a:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 801078c:	e018      	b.n	80107c0 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010792:	689c      	ldr	r4, [r3, #8]
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	691a      	ldr	r2, [r3, #16]
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	18d6      	adds	r6, r2, r3
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f000 fdc1 	bl	8011328 <TimerLeftMS>
 80107a6:	4603      	mov	r3, r0
 80107a8:	68ba      	ldr	r2, [r7, #8]
 80107aa:	4631      	mov	r1, r6
 80107ac:	4628      	mov	r0, r5
 80107ae:	47a0      	blx	r4
 80107b0:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	db0e      	blt.n	80107d6 <sendPacket+0x60>
            break;
        sent += rc;
 80107b8:	693a      	ldr	r2, [r7, #16]
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	4413      	add	r3, r2
 80107be:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 80107c0:	693a      	ldr	r2, [r7, #16]
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	da07      	bge.n	80107d8 <sendPacket+0x62>
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f000 fd71 	bl	80112b0 <TimerIsExpired>
 80107ce:	4603      	mov	r3, r0
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d0dc      	beq.n	801078e <sendPacket+0x18>
 80107d4:	e000      	b.n	80107d8 <sendPacket+0x62>
            break;
 80107d6:	bf00      	nop
    }
    if (sent == length)
 80107d8:	693a      	ldr	r2, [r7, #16]
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	429a      	cmp	r2, r3
 80107de:	d10b      	bne.n	80107f8 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	699b      	ldr	r3, [r3, #24]
 80107ea:	4619      	mov	r1, r3
 80107ec:	4610      	mov	r0, r2
 80107ee:	f000 fd85 	bl	80112fc <TimerCountdown>
        rc = SUCCESSS;
 80107f2:	2300      	movs	r3, #0
 80107f4:	617b      	str	r3, [r7, #20]
 80107f6:	e002      	b.n	80107fe <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 80107f8:	f04f 33ff 	mov.w	r3, #4294967295
 80107fc:	617b      	str	r3, [r7, #20]
    return rc;
 80107fe:	697b      	ldr	r3, [r7, #20]
}
 8010800:	4618      	mov	r0, r3
 8010802:	371c      	adds	r7, #28
 8010804:	46bd      	mov	sp, r7
 8010806:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010808 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b086      	sub	sp, #24
 801080c:	af00      	add	r7, sp, #0
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	60b9      	str	r1, [r7, #8]
 8010812:	607a      	str	r2, [r7, #4]
 8010814:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	68ba      	ldr	r2, [r7, #8]
 801081a:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801081c:	2300      	movs	r3, #0
 801081e:	617b      	str	r3, [r7, #20]
 8010820:	e009      	b.n	8010836 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 8010822:	68fa      	ldr	r2, [r7, #12]
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	3304      	adds	r3, #4
 8010828:	00db      	lsls	r3, r3, #3
 801082a:	4413      	add	r3, r2
 801082c:	2200      	movs	r2, #0
 801082e:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	3301      	adds	r3, #1
 8010834:	617b      	str	r3, [r7, #20]
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	2b04      	cmp	r3, #4
 801083a:	ddf2      	ble.n	8010822 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	687a      	ldr	r2, [r7, #4]
 8010840:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	683a      	ldr	r2, [r7, #0]
 8010846:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	6a3a      	ldr	r2, [r7, #32]
 801084c:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010852:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010858:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	2200      	movs	r2, #0
 801085e:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	2200      	movs	r2, #0
 8010864:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	2200      	movs	r2, #0
 801086a:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	2201      	movs	r2, #1
 8010870:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	3354      	adds	r3, #84	; 0x54
 8010876:	4618      	mov	r0, r3
 8010878:	f000 fd0e 	bl	8011298 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 801087c:	bf00      	nop
 801087e:	3718      	adds	r7, #24
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8010884:	b590      	push	{r4, r7, lr}
 8010886:	b08b      	sub	sp, #44	; 0x2c
 8010888:	af00      	add	r7, sp, #0
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8010890:	2301      	movs	r3, #1
 8010892:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 8010894:	2300      	movs	r3, #0
 8010896:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8010898:	2304      	movs	r3, #4
 801089a:	61fb      	str	r3, [r7, #28]

    *value = 0;
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	2200      	movs	r2, #0
 80108a0:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 80108a2:	f04f 33ff 	mov.w	r3, #4294967295
 80108a6:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80108a8:	6a3b      	ldr	r3, [r7, #32]
 80108aa:	3301      	adds	r3, #1
 80108ac:	623b      	str	r3, [r7, #32]
 80108ae:	6a3a      	ldr	r2, [r7, #32]
 80108b0:	69fb      	ldr	r3, [r7, #28]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	dd03      	ble.n	80108be <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 80108b6:	f04f 33ff 	mov.w	r3, #4294967295
 80108ba:	61bb      	str	r3, [r7, #24]
            goto exit;
 80108bc:	e021      	b.n	8010902 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108c2:	685c      	ldr	r4, [r3, #4]
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80108c8:	f107 0117 	add.w	r1, r7, #23
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2201      	movs	r2, #1
 80108d0:	47a0      	blx	r4
 80108d2:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 80108d4:	69bb      	ldr	r3, [r7, #24]
 80108d6:	2b01      	cmp	r3, #1
 80108d8:	d112      	bne.n	8010900 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	7dfb      	ldrb	r3, [r7, #23]
 80108e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80108e6:	fb01 f303 	mul.w	r3, r1, r3
 80108ea:	441a      	add	r2, r3
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 80108f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f2:	01db      	lsls	r3, r3, #7
 80108f4:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 80108f6:	7dfb      	ldrb	r3, [r7, #23]
 80108f8:	b25b      	sxtb	r3, r3
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	dbd1      	blt.n	80108a2 <decodePacket+0x1e>
exit:
 80108fe:	e000      	b.n	8010902 <decodePacket+0x7e>
            goto exit;
 8010900:	bf00      	nop
    return len;
 8010902:	6a3b      	ldr	r3, [r7, #32]
}
 8010904:	4618      	mov	r0, r3
 8010906:	372c      	adds	r7, #44	; 0x2c
 8010908:	46bd      	mov	sp, r7
 801090a:	bd90      	pop	{r4, r7, pc}

0801090c <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 801090c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801090e:	b089      	sub	sp, #36	; 0x24
 8010910:	af00      	add	r7, sp, #0
 8010912:	60f8      	str	r0, [r7, #12]
 8010914:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 8010916:	f04f 33ff 	mov.w	r3, #4294967295
 801091a:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 801091c:	2300      	movs	r3, #0
 801091e:	617b      	str	r3, [r7, #20]
    int len = 0;
 8010920:	2300      	movs	r3, #0
 8010922:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8010924:	2300      	movs	r3, #0
 8010926:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801092c:	685c      	ldr	r4, [r3, #4]
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	695e      	ldr	r6, [r3, #20]
 8010936:	68b8      	ldr	r0, [r7, #8]
 8010938:	f000 fcf6 	bl	8011328 <TimerLeftMS>
 801093c:	4603      	mov	r3, r0
 801093e:	2201      	movs	r2, #1
 8010940:	4631      	mov	r1, r6
 8010942:	4628      	mov	r0, r5
 8010944:	47a0      	blx	r4
 8010946:	4603      	mov	r3, r0
 8010948:	2b01      	cmp	r3, #1
 801094a:	d13b      	bne.n	80109c4 <readPacket+0xb8>
        goto exit;

    len = 1;
 801094c:	2301      	movs	r3, #1
 801094e:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8010950:	68b8      	ldr	r0, [r7, #8]
 8010952:	f000 fce9 	bl	8011328 <TimerLeftMS>
 8010956:	4602      	mov	r2, r0
 8010958:	f107 0310 	add.w	r3, r7, #16
 801095c:	4619      	mov	r1, r3
 801095e:	68f8      	ldr	r0, [r7, #12]
 8010960:	f7ff ff90 	bl	8010884 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	695b      	ldr	r3, [r3, #20]
 8010968:	3301      	adds	r3, #1
 801096a:	693a      	ldr	r2, [r7, #16]
 801096c:	4611      	mov	r1, r2
 801096e:	4618      	mov	r0, r3
 8010970:	f001 f84a 	bl	8011a08 <MQTTPacket_encode>
 8010974:	4602      	mov	r2, r0
 8010976:	69bb      	ldr	r3, [r7, #24]
 8010978:	4413      	add	r3, r2
 801097a:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	2b00      	cmp	r3, #0
 8010980:	dd16      	ble.n	80109b0 <readPacket+0xa4>
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010986:	685c      	ldr	r4, [r3, #4]
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	695a      	ldr	r2, [r3, #20]
 8010990:	69bb      	ldr	r3, [r7, #24]
 8010992:	18d6      	adds	r6, r2, r3
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	607b      	str	r3, [r7, #4]
 8010998:	68b8      	ldr	r0, [r7, #8]
 801099a:	f000 fcc5 	bl	8011328 <TimerLeftMS>
 801099e:	4603      	mov	r3, r0
 80109a0:	687a      	ldr	r2, [r7, #4]
 80109a2:	4631      	mov	r1, r6
 80109a4:	4628      	mov	r0, r5
 80109a6:	47a0      	blx	r4
 80109a8:	4602      	mov	r2, r0
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d10b      	bne.n	80109c8 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	695b      	ldr	r3, [r3, #20]
 80109b4:	781b      	ldrb	r3, [r3, #0]
 80109b6:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 80109b8:	7d3b      	ldrb	r3, [r7, #20]
 80109ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80109be:	b2db      	uxtb	r3, r3
 80109c0:	61fb      	str	r3, [r7, #28]
 80109c2:	e002      	b.n	80109ca <readPacket+0xbe>
        goto exit;
 80109c4:	bf00      	nop
 80109c6:	e000      	b.n	80109ca <readPacket+0xbe>
        goto exit;
 80109c8:	bf00      	nop
exit:
    return rc;
 80109ca:	69fb      	ldr	r3, [r7, #28]
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	3724      	adds	r7, #36	; 0x24
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080109d4 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 80109d4:	b480      	push	{r7}
 80109d6:	b087      	sub	sp, #28
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	689b      	ldr	r3, [r3, #8]
 80109e6:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	685b      	ldr	r3, [r3, #4]
 80109ec:	461a      	mov	r2, r3
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	4413      	add	r3, r2
 80109f2:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 80109f4:	e039      	b.n	8010a6a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	2b2f      	cmp	r3, #47	; 0x2f
 80109fc:	d103      	bne.n	8010a06 <isTopicMatched+0x32>
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	781b      	ldrb	r3, [r3, #0]
 8010a02:	2b2f      	cmp	r3, #47	; 0x2f
 8010a04:	d13a      	bne.n	8010a7c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	2b2b      	cmp	r3, #43	; 0x2b
 8010a0c:	d009      	beq.n	8010a22 <isTopicMatched+0x4e>
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	2b23      	cmp	r3, #35	; 0x23
 8010a14:	d005      	beq.n	8010a22 <isTopicMatched+0x4e>
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	781a      	ldrb	r2, [r3, #0]
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	781b      	ldrb	r3, [r3, #0]
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d12e      	bne.n	8010a80 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8010a22:	697b      	ldr	r3, [r7, #20]
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	2b2b      	cmp	r3, #43	; 0x2b
 8010a28:	d112      	bne.n	8010a50 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8010a2a:	693b      	ldr	r3, [r7, #16]
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8010a30:	e005      	b.n	8010a3e <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	3301      	adds	r3, #1
 8010a36:	613b      	str	r3, [r7, #16]
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8010a3e:	68fa      	ldr	r2, [r7, #12]
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d20b      	bcs.n	8010a5e <isTopicMatched+0x8a>
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	781b      	ldrb	r3, [r3, #0]
 8010a4a:	2b2f      	cmp	r3, #47	; 0x2f
 8010a4c:	d1f1      	bne.n	8010a32 <isTopicMatched+0x5e>
 8010a4e:	e006      	b.n	8010a5e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	2b23      	cmp	r3, #35	; 0x23
 8010a56:	d102      	bne.n	8010a5e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	3b01      	subs	r3, #1
 8010a5c:	613b      	str	r3, [r7, #16]
        curf++;
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	3301      	adds	r3, #1
 8010a62:	617b      	str	r3, [r7, #20]
        curn++;
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	3301      	adds	r3, #1
 8010a68:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	781b      	ldrb	r3, [r3, #0]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d007      	beq.n	8010a82 <isTopicMatched+0xae>
 8010a72:	693a      	ldr	r2, [r7, #16]
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d3bd      	bcc.n	80109f6 <isTopicMatched+0x22>
 8010a7a:	e002      	b.n	8010a82 <isTopicMatched+0xae>
            break;
 8010a7c:	bf00      	nop
 8010a7e:	e000      	b.n	8010a82 <isTopicMatched+0xae>
            break;
 8010a80:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8010a82:	693a      	ldr	r2, [r7, #16]
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d105      	bne.n	8010a96 <isTopicMatched+0xc2>
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	781b      	ldrb	r3, [r3, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d101      	bne.n	8010a96 <isTopicMatched+0xc2>
 8010a92:	2301      	movs	r3, #1
 8010a94:	e000      	b.n	8010a98 <isTopicMatched+0xc4>
 8010a96:	2300      	movs	r3, #0
 8010a98:	b2db      	uxtb	r3, r3
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	371c      	adds	r7, #28
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bc80      	pop	{r7}
 8010aa2:	4770      	bx	lr

08010aa4 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b08a      	sub	sp, #40	; 0x28
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8010ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ab4:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8010aba:	e03f      	b.n	8010b3c <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8010abc:	68fa      	ldr	r2, [r7, #12]
 8010abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac0:	3304      	adds	r3, #4
 8010ac2:	00db      	lsls	r3, r3, #3
 8010ac4:	4413      	add	r3, r2
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d034      	beq.n	8010b36 <deliverMessage+0x92>
 8010acc:	68fa      	ldr	r2, [r7, #12]
 8010ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad0:	3304      	adds	r3, #4
 8010ad2:	00db      	lsls	r3, r3, #3
 8010ad4:	4413      	add	r3, r2
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	4619      	mov	r1, r3
 8010ada:	68b8      	ldr	r0, [r7, #8]
 8010adc:	f001 f95e 	bl	8011d9c <MQTTPacket_equals>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d10c      	bne.n	8010b00 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8010ae6:	68fa      	ldr	r2, [r7, #12]
 8010ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aea:	3304      	adds	r3, #4
 8010aec:	00db      	lsls	r3, r3, #3
 8010aee:	4413      	add	r3, r2
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	68b9      	ldr	r1, [r7, #8]
 8010af4:	4618      	mov	r0, r3
 8010af6:	f7ff ff6d 	bl	80109d4 <isTopicMatched>
 8010afa:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d01a      	beq.n	8010b36 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 8010b00:	68fa      	ldr	r2, [r7, #12]
 8010b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b04:	3304      	adds	r3, #4
 8010b06:	00db      	lsls	r3, r3, #3
 8010b08:	4413      	add	r3, r2
 8010b0a:	689b      	ldr	r3, [r3, #8]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d012      	beq.n	8010b36 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8010b10:	f107 0318 	add.w	r3, r7, #24
 8010b14:	687a      	ldr	r2, [r7, #4]
 8010b16:	68b9      	ldr	r1, [r7, #8]
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7ff fe03 	bl	8010724 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8010b1e:	68fa      	ldr	r2, [r7, #12]
 8010b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b22:	3304      	adds	r3, #4
 8010b24:	00db      	lsls	r3, r3, #3
 8010b26:	4413      	add	r3, r2
 8010b28:	689b      	ldr	r3, [r3, #8]
 8010b2a:	f107 0218 	add.w	r2, r7, #24
 8010b2e:	4610      	mov	r0, r2
 8010b30:	4798      	blx	r3
                rc = SUCCESSS;
 8010b32:	2300      	movs	r3, #0
 8010b34:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8010b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b38:	3301      	adds	r3, #1
 8010b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8010b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3e:	2b04      	cmp	r3, #4
 8010b40:	ddbc      	ble.n	8010abc <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8010b42:	6a3b      	ldr	r3, [r7, #32]
 8010b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b48:	d112      	bne.n	8010b70 <deliverMessage+0xcc>
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d00e      	beq.n	8010b70 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8010b52:	f107 0310 	add.w	r3, r7, #16
 8010b56:	687a      	ldr	r2, [r7, #4]
 8010b58:	68b9      	ldr	r1, [r7, #8]
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7ff fde2 	bl	8010724 <NewMessageData>
        c->defaultMessageHandler(&md);
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b64:	f107 0210 	add.w	r2, r7, #16
 8010b68:	4610      	mov	r0, r2
 8010b6a:	4798      	blx	r3
        rc = SUCCESSS;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8010b70:	6a3b      	ldr	r3, [r7, #32]
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3728      	adds	r7, #40	; 0x28
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}

08010b7a <keepalive>:


int keepalive(MQTTClient* c)
{
 8010b7a:	b580      	push	{r7, lr}
 8010b7c:	b086      	sub	sp, #24
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8010b82:	f04f 33ff 	mov.w	r3, #4294967295
 8010b86:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	699b      	ldr	r3, [r3, #24]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d102      	bne.n	8010b96 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 8010b90:	2300      	movs	r3, #0
 8010b92:	617b      	str	r3, [r7, #20]
        goto exit;
 8010b94:	e033      	b.n	8010bfe <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	3354      	adds	r3, #84	; 0x54
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f000 fb88 	bl	80112b0 <TimerIsExpired>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d02a      	beq.n	8010bfc <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	7f1b      	ldrb	r3, [r3, #28]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d126      	bne.n	8010bfc <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 8010bae:	f107 0308 	add.w	r3, r7, #8
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f000 fb70 	bl	8011298 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8010bb8:	f107 0308 	add.w	r3, r7, #8
 8010bbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f000 fb89 	bl	80112d8 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	691a      	ldr	r2, [r3, #16]
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	689b      	ldr	r3, [r3, #8]
 8010bce:	4619      	mov	r1, r3
 8010bd0:	4610      	mov	r0, r2
 8010bd2:	f000 fe4d 	bl	8011870 <MQTTSerialize_pingreq>
 8010bd6:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	dd0f      	ble.n	8010bfe <keepalive+0x84>
 8010bde:	f107 0308 	add.w	r3, r7, #8
 8010be2:	461a      	mov	r2, r3
 8010be4:	6939      	ldr	r1, [r7, #16]
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f7ff fdc5 	bl	8010776 <sendPacket>
 8010bec:	6178      	str	r0, [r7, #20]
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d104      	bne.n	8010bfe <keepalive+0x84>
                c->ping_outstanding = 1;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	771a      	strb	r2, [r3, #28]
 8010bfa:	e000      	b.n	8010bfe <keepalive+0x84>
        }
    }

exit:
 8010bfc:	bf00      	nop
    return rc;
 8010bfe:	697b      	ldr	r3, [r7, #20]
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3718      	adds	r7, #24
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8010c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c0a:	b095      	sub	sp, #84	; 0x54
 8010c0c:	af06      	add	r7, sp, #24
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 8010c12:	6839      	ldr	r1, [r7, #0]
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f7ff fe79 	bl	801090c <readPacket>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 8010c1e:	2300      	movs	r3, #0
 8010c20:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 8010c22:	2300      	movs	r3, #0
 8010c24:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 8010c26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c28:	3b02      	subs	r3, #2
 8010c2a:	2b0b      	cmp	r3, #11
 8010c2c:	f200 80c0 	bhi.w	8010db0 <cycle+0x1a8>
 8010c30:	a201      	add	r2, pc, #4	; (adr r2, 8010c38 <cycle+0x30>)
 8010c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c36:	bf00      	nop
 8010c38:	08010db1 	.word	0x08010db1
 8010c3c:	08010c69 	.word	0x08010c69
 8010c40:	08010db1 	.word	0x08010db1
 8010c44:	08010d31 	.word	0x08010d31
 8010c48:	08010db1 	.word	0x08010db1
 8010c4c:	08010db1 	.word	0x08010db1
 8010c50:	08010db1 	.word	0x08010db1
 8010c54:	08010db1 	.word	0x08010db1
 8010c58:	08010db1 	.word	0x08010db1
 8010c5c:	08010db1 	.word	0x08010db1
 8010c60:	08010db1 	.word	0x08010db1
 8010c64:	08010da3 	.word	0x08010da3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8010c70:	4616      	mov	r6, r2
 8010c72:	f107 0210 	add.w	r2, r7, #16
 8010c76:	1d15      	adds	r5, r2, #4
 8010c78:	f107 0210 	add.w	r2, r7, #16
 8010c7c:	1c54      	adds	r4, r2, #1
 8010c7e:	f107 010c 	add.w	r1, r7, #12
 8010c82:	f107 0210 	add.w	r2, r7, #16
 8010c86:	1c90      	adds	r0, r2, #2
 8010c88:	9604      	str	r6, [sp, #16]
 8010c8a:	9303      	str	r3, [sp, #12]
 8010c8c:	f107 0310 	add.w	r3, r7, #16
 8010c90:	330c      	adds	r3, #12
 8010c92:	9302      	str	r3, [sp, #8]
 8010c94:	f107 0310 	add.w	r3, r7, #16
 8010c98:	3308      	adds	r3, #8
 8010c9a:	9301      	str	r3, [sp, #4]
 8010c9c:	f107 0320 	add.w	r3, r7, #32
 8010ca0:	9300      	str	r3, [sp, #0]
 8010ca2:	462b      	mov	r3, r5
 8010ca4:	4622      	mov	r2, r4
 8010ca6:	f000 fdf2 	bl	801188e <MQTTDeserialize_publish>
 8010caa:	4603      	mov	r3, r0
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	f040 8083 	bne.w	8010db8 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	b2db      	uxtb	r3, r3
 8010cb6:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8010cb8:	f107 0210 	add.w	r2, r7, #16
 8010cbc:	f107 0320 	add.w	r3, r7, #32
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f7ff feee 	bl	8010aa4 <deliverMessage>
            if (msg.qos != QOS0)
 8010cc8:	7c3b      	ldrb	r3, [r7, #16]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d06d      	beq.n	8010daa <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 8010cce:	7c3b      	ldrb	r3, [r7, #16]
 8010cd0:	2b01      	cmp	r3, #1
 8010cd2:	d10c      	bne.n	8010cee <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6918      	ldr	r0, [r3, #16]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	689b      	ldr	r3, [r3, #8]
 8010cdc:	4619      	mov	r1, r3
 8010cde:	8abb      	ldrh	r3, [r7, #20]
 8010ce0:	9300      	str	r3, [sp, #0]
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	2204      	movs	r2, #4
 8010ce6:	f001 f926 	bl	8011f36 <MQTTSerialize_ack>
 8010cea:	6378      	str	r0, [r7, #52]	; 0x34
 8010cec:	e00e      	b.n	8010d0c <cycle+0x104>
                else if (msg.qos == QOS2)
 8010cee:	7c3b      	ldrb	r3, [r7, #16]
 8010cf0:	2b02      	cmp	r3, #2
 8010cf2:	d10b      	bne.n	8010d0c <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6918      	ldr	r0, [r3, #16]
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	689b      	ldr	r3, [r3, #8]
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	8abb      	ldrh	r3, [r7, #20]
 8010d00:	9300      	str	r3, [sp, #0]
 8010d02:	2300      	movs	r3, #0
 8010d04:	2205      	movs	r2, #5
 8010d06:	f001 f916 	bl	8011f36 <MQTTSerialize_ack>
 8010d0a:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8010d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	dc03      	bgt.n	8010d1a <cycle+0x112>
                    rc = FAILURE;
 8010d12:	f04f 33ff 	mov.w	r3, #4294967295
 8010d16:	633b      	str	r3, [r7, #48]	; 0x30
 8010d18:	e005      	b.n	8010d26 <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 8010d1a:	683a      	ldr	r2, [r7, #0]
 8010d1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f7ff fd29 	bl	8010776 <sendPacket>
 8010d24:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8010d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d2c:	d13d      	bne.n	8010daa <cycle+0x1a2>
                    goto exit; // there was a problem
 8010d2e:	e044      	b.n	8010dba <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	695c      	ldr	r4, [r3, #20]
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	f107 020a 	add.w	r2, r7, #10
 8010d3c:	f107 0109 	add.w	r1, r7, #9
 8010d40:	f107 0008 	add.w	r0, r7, #8
 8010d44:	9300      	str	r3, [sp, #0]
 8010d46:	4623      	mov	r3, r4
 8010d48:	f000 fe13 	bl	8011972 <MQTTDeserialize_ack>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	2b01      	cmp	r3, #1
 8010d50:	d003      	beq.n	8010d5a <cycle+0x152>
                rc = FAILURE;
 8010d52:	f04f 33ff 	mov.w	r3, #4294967295
 8010d56:	633b      	str	r3, [r7, #48]	; 0x30
 8010d58:	e01e      	b.n	8010d98 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6918      	ldr	r0, [r3, #16]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	4619      	mov	r1, r3
 8010d64:	897b      	ldrh	r3, [r7, #10]
 8010d66:	9300      	str	r3, [sp, #0]
 8010d68:	2300      	movs	r3, #0
 8010d6a:	2206      	movs	r2, #6
 8010d6c:	f001 f8e3 	bl	8011f36 <MQTTSerialize_ack>
 8010d70:	6378      	str	r0, [r7, #52]	; 0x34
 8010d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	dc03      	bgt.n	8010d80 <cycle+0x178>
                rc = FAILURE;
 8010d78:	f04f 33ff 	mov.w	r3, #4294967295
 8010d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8010d7e:	e00b      	b.n	8010d98 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 8010d80:	683a      	ldr	r2, [r7, #0]
 8010d82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f7ff fcf6 	bl	8010776 <sendPacket>
 8010d8a:	6338      	str	r0, [r7, #48]	; 0x30
 8010d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d002      	beq.n	8010d98 <cycle+0x190>
                rc = FAILURE; // there was a problem
 8010d92:	f04f 33ff 	mov.w	r3, #4294967295
 8010d96:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8010d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d9e:	d106      	bne.n	8010dae <cycle+0x1a6>
                goto exit; // there was a problem
 8010da0:	e00b      	b.n	8010dba <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2200      	movs	r2, #0
 8010da6:	771a      	strb	r2, [r3, #28]
            break;
 8010da8:	e002      	b.n	8010db0 <cycle+0x1a8>
            break;
 8010daa:	bf00      	nop
 8010dac:	e000      	b.n	8010db0 <cycle+0x1a8>
            break;
 8010dae:	bf00      	nop
    }
    keepalive(c);
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f7ff fee2 	bl	8010b7a <keepalive>
 8010db6:	e000      	b.n	8010dba <cycle+0x1b2>
                goto exit;
 8010db8:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 8010dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d101      	bne.n	8010dc4 <cycle+0x1bc>
        rc = packet_type;
 8010dc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010dc2:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 8010dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	373c      	adds	r7, #60	; 0x3c
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dce:	bf00      	nop

08010dd0 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b086      	sub	sp, #24
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8010dde:	f107 030c 	add.w	r3, r7, #12
 8010de2:	4618      	mov	r0, r3
 8010de4:	f000 fa58 	bl	8011298 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8010de8:	683a      	ldr	r2, [r7, #0]
 8010dea:	f107 030c 	add.w	r3, r7, #12
 8010dee:	4611      	mov	r1, r2
 8010df0:	4618      	mov	r0, r3
 8010df2:	f000 fa71 	bl	80112d8 <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 8010df6:	f107 030c 	add.w	r3, r7, #12
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f7ff ff03 	bl	8010c08 <cycle>
 8010e02:	4603      	mov	r3, r0
 8010e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e08:	d102      	bne.n	8010e10 <MQTTYield+0x40>
    {
        rc = FAILURE;
 8010e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8010e0e:	617b      	str	r3, [r7, #20]
    }

    return rc;
 8010e10:	697b      	ldr	r3, [r7, #20]
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3718      	adds	r7, #24
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}

08010e1a <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8010e1a:	b580      	push	{r7, lr}
 8010e1c:	b086      	sub	sp, #24
 8010e1e:	af00      	add	r7, sp, #0
 8010e20:	60f8      	str	r0, [r7, #12]
 8010e22:	60b9      	str	r1, [r7, #8]
 8010e24:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8010e26:	f04f 33ff 	mov.w	r3, #4294967295
 8010e2a:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f000 fa3f 	bl	80112b0 <TimerIsExpired>
 8010e32:	4603      	mov	r3, r0
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d109      	bne.n	8010e4c <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 8010e38:	6879      	ldr	r1, [r7, #4]
 8010e3a:	68f8      	ldr	r0, [r7, #12]
 8010e3c:	f7ff fee4 	bl	8010c08 <cycle>
 8010e40:	6178      	str	r0, [r7, #20]
 8010e42:	697a      	ldr	r2, [r7, #20]
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d1f0      	bne.n	8010e2c <waitfor+0x12>
 8010e4a:	e000      	b.n	8010e4e <waitfor+0x34>
            break; // we timed out
 8010e4c:	bf00      	nop

    return rc;
 8010e4e:	697b      	ldr	r3, [r7, #20]
}
 8010e50:	4618      	mov	r0, r3
 8010e52:	3718      	adds	r7, #24
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b09e      	sub	sp, #120	; 0x78
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 8010e62:	f04f 33ff 	mov.w	r3, #4294967295
 8010e66:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8010e68:	4a3d      	ldr	r2, [pc, #244]	; (8010f60 <MQTTConnect+0x108>)
 8010e6a:	f107 0310 	add.w	r3, r7, #16
 8010e6e:	4611      	mov	r1, r2
 8010e70:	2258      	movs	r2, #88	; 0x58
 8010e72:	4618      	mov	r0, r3
 8010e74:	f002 fb2f 	bl	80134d6 <memcpy>
    int len = 0;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6a1b      	ldr	r3, [r3, #32]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d15d      	bne.n	8010f40 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 8010e84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f000 fa05 	bl	8011298 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	685a      	ldr	r2, [r3, #4]
 8010e92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010e96:	4611      	mov	r1, r2
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f000 fa1d 	bl	80112d8 <TimerCountdownMS>

    if (options == 0)
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d102      	bne.n	8010eaa <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 8010ea4:	f107 0310 	add.w	r3, r7, #16
 8010ea8:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	8b1b      	ldrh	r3, [r3, #24]
 8010eae:	461a      	mov	r2, r3
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	699b      	ldr	r3, [r3, #24]
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	4610      	mov	r0, r2
 8010ec2:	f000 fa1b 	bl	80112fc <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	6918      	ldr	r0, [r3, #16]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	689b      	ldr	r3, [r3, #8]
 8010ece:	683a      	ldr	r2, [r7, #0]
 8010ed0:	4619      	mov	r1, r3
 8010ed2:	f000 fb45 	bl	8011560 <MQTTSerialize_connect>
 8010ed6:	6738      	str	r0, [r7, #112]	; 0x70
 8010ed8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	dd32      	ble.n	8010f44 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 8010ede:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010ee2:	461a      	mov	r2, r3
 8010ee4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f7ff fc45 	bl	8010776 <sendPacket>
 8010eec:	6778      	str	r0, [r7, #116]	; 0x74
 8010eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d129      	bne.n	8010f48 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8010ef4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010ef8:	461a      	mov	r2, r3
 8010efa:	2102      	movs	r1, #2
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f7ff ff8c 	bl	8010e1a <waitfor>
 8010f02:	4603      	mov	r3, r0
 8010f04:	2b02      	cmp	r3, #2
 8010f06:	d117      	bne.n	8010f38 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 8010f08:	23ff      	movs	r3, #255	; 0xff
 8010f0a:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	695a      	ldr	r2, [r3, #20]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	68db      	ldr	r3, [r3, #12]
 8010f18:	f107 010f 	add.w	r1, r7, #15
 8010f1c:	f107 000e 	add.w	r0, r7, #14
 8010f20:	f000 fc0a 	bl	8011738 <MQTTDeserialize_connack>
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d102      	bne.n	8010f30 <MQTTConnect+0xd8>
            rc = connack_rc;
 8010f2a:	7bfb      	ldrb	r3, [r7, #15]
 8010f2c:	677b      	str	r3, [r7, #116]	; 0x74
 8010f2e:	e00c      	b.n	8010f4a <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 8010f30:	f04f 33ff 	mov.w	r3, #4294967295
 8010f34:	677b      	str	r3, [r7, #116]	; 0x74
 8010f36:	e008      	b.n	8010f4a <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 8010f38:	f04f 33ff 	mov.w	r3, #4294967295
 8010f3c:	677b      	str	r3, [r7, #116]	; 0x74
 8010f3e:	e004      	b.n	8010f4a <MQTTConnect+0xf2>
		goto exit;
 8010f40:	bf00      	nop
 8010f42:	e002      	b.n	8010f4a <MQTTConnect+0xf2>
        goto exit;
 8010f44:	bf00      	nop
 8010f46:	e000      	b.n	8010f4a <MQTTConnect+0xf2>
        goto exit; // there was a problem
 8010f48:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 8010f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d102      	bne.n	8010f56 <MQTTConnect+0xfe>
        c->isconnected = 1;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2201      	movs	r2, #1
 8010f54:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 8010f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3778      	adds	r7, #120	; 0x78
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}
 8010f60:	080160e8 	.word	0x080160e8

08010f64 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 8010f64:	b5b0      	push	{r4, r5, r7, lr}
 8010f66:	b094      	sub	sp, #80	; 0x50
 8010f68:	af04      	add	r7, sp, #16
 8010f6a:	60f8      	str	r0, [r7, #12]
 8010f6c:	60b9      	str	r1, [r7, #8]
 8010f6e:	603b      	str	r3, [r7, #0]
 8010f70:	4613      	mov	r3, r2
 8010f72:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8010f74:	f04f 33ff 	mov.w	r3, #4294967295
 8010f78:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	623b      	str	r3, [r7, #32]
 8010f82:	2300      	movs	r3, #0
 8010f84:	627b      	str	r3, [r7, #36]	; 0x24
 8010f86:	2300      	movs	r3, #0
 8010f88:	62bb      	str	r3, [r7, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	623b      	str	r3, [r7, #32]
    // This was added because enum QoS was previously typed to *int which resulted in HardFault and unaligned integer read.
    // This coping below makes sure the parameter for MQTTSerialize_subscribe is always char no matter what compiler is using for enums
    char charQos = (char)qos;
 8010f8e:	79fb      	ldrb	r3, [r7, #7]
 8010f90:	77fb      	strb	r3, [r7, #31]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	6a1b      	ldr	r3, [r3, #32]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	f000 8083 	beq.w	80110a2 <MQTTSubscribe+0x13e>
		goto exit;

    TimerInit(&timer);
 8010f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f000 f979 	bl	8011298 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	685a      	ldr	r2, [r3, #4]
 8010faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010fae:	4611      	mov	r1, r2
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f000 f991 	bl	80112d8 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &charQos);
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	691c      	ldr	r4, [r3, #16]
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	689b      	ldr	r3, [r3, #8]
 8010fbe:	461d      	mov	r5, r3
 8010fc0:	68f8      	ldr	r0, [r7, #12]
 8010fc2:	f7ff fbc0 	bl	8010746 <getNextPacketId>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	b29a      	uxth	r2, r3
 8010fca:	f107 031f 	add.w	r3, r7, #31
 8010fce:	9302      	str	r3, [sp, #8]
 8010fd0:	f107 0320 	add.w	r3, r7, #32
 8010fd4:	9301      	str	r3, [sp, #4]
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	9300      	str	r3, [sp, #0]
 8010fda:	4613      	mov	r3, r2
 8010fdc:	2200      	movs	r2, #0
 8010fde:	4629      	mov	r1, r5
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	f001 f824 	bl	801202e <MQTTSerialize_subscribe>
 8010fe6:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 8010fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	dd5b      	ble.n	80110a6 <MQTTSubscribe+0x142>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 8010fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ff2:	461a      	mov	r2, r3
 8010ff4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010ff6:	68f8      	ldr	r0, [r7, #12]
 8010ff8:	f7ff fbbd 	bl	8010776 <sendPacket>
 8010ffc:	63f8      	str	r0, [r7, #60]	; 0x3c
 8010ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011000:	2b00      	cmp	r3, #0
 8011002:	d152      	bne.n	80110aa <MQTTSubscribe+0x146>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8011004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011008:	461a      	mov	r2, r3
 801100a:	2109      	movs	r1, #9
 801100c:	68f8      	ldr	r0, [r7, #12]
 801100e:	f7ff ff04 	bl	8010e1a <waitfor>
 8011012:	4603      	mov	r3, r0
 8011014:	2b09      	cmp	r3, #9
 8011016:	d140      	bne.n	801109a <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 8011018:	2300      	movs	r3, #0
 801101a:	61bb      	str	r3, [r7, #24]
 801101c:	f04f 33ff 	mov.w	r3, #4294967295
 8011020:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	695b      	ldr	r3, [r3, #20]
 8011026:	68fa      	ldr	r2, [r7, #12]
 8011028:	68d2      	ldr	r2, [r2, #12]
 801102a:	4614      	mov	r4, r2
 801102c:	f107 0114 	add.w	r1, r7, #20
 8011030:	f107 0218 	add.w	r2, r7, #24
 8011034:	f107 0012 	add.w	r0, r7, #18
 8011038:	9401      	str	r4, [sp, #4]
 801103a:	9300      	str	r3, [sp, #0]
 801103c:	460b      	mov	r3, r1
 801103e:	2101      	movs	r1, #1
 8011040:	f001 f86f 	bl	8012122 <MQTTDeserialize_suback>
 8011044:	4603      	mov	r3, r0
 8011046:	2b01      	cmp	r3, #1
 8011048:	d101      	bne.n	801104e <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 801104e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011050:	2b80      	cmp	r3, #128	; 0x80
 8011052:	d02b      	beq.n	80110ac <MQTTSubscribe+0x148>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8011054:	2300      	movs	r3, #0
 8011056:	63bb      	str	r3, [r7, #56]	; 0x38
 8011058:	e01b      	b.n	8011092 <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 801105a:	68fa      	ldr	r2, [r7, #12]
 801105c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105e:	3304      	adds	r3, #4
 8011060:	00db      	lsls	r3, r3, #3
 8011062:	4413      	add	r3, r2
 8011064:	685b      	ldr	r3, [r3, #4]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d110      	bne.n	801108c <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 801106a:	68fa      	ldr	r2, [r7, #12]
 801106c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106e:	3304      	adds	r3, #4
 8011070:	00db      	lsls	r3, r3, #3
 8011072:	4413      	add	r3, r2
 8011074:	68ba      	ldr	r2, [r7, #8]
 8011076:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 8011078:	68fa      	ldr	r2, [r7, #12]
 801107a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801107c:	3304      	adds	r3, #4
 801107e:	00db      	lsls	r3, r3, #3
 8011080:	4413      	add	r3, r2
 8011082:	683a      	ldr	r2, [r7, #0]
 8011084:	609a      	str	r2, [r3, #8]
                    rc = 0;
 8011086:	2300      	movs	r3, #0
 8011088:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 801108a:	e00f      	b.n	80110ac <MQTTSubscribe+0x148>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801108c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801108e:	3301      	adds	r3, #1
 8011090:	63bb      	str	r3, [r7, #56]	; 0x38
 8011092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011094:	2b04      	cmp	r3, #4
 8011096:	dde0      	ble.n	801105a <MQTTSubscribe+0xf6>
 8011098:	e008      	b.n	80110ac <MQTTSubscribe+0x148>
                }
            }
        }
    }
    else
        rc = FAILURE;
 801109a:	f04f 33ff 	mov.w	r3, #4294967295
 801109e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110a0:	e004      	b.n	80110ac <MQTTSubscribe+0x148>
		goto exit;
 80110a2:	bf00      	nop
 80110a4:	e002      	b.n	80110ac <MQTTSubscribe+0x148>
        goto exit;
 80110a6:	bf00      	nop
 80110a8:	e000      	b.n	80110ac <MQTTSubscribe+0x148>
        goto exit;             // there was a problem
 80110aa:	bf00      	nop

exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 80110ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	3740      	adds	r7, #64	; 0x40
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bdb0      	pop	{r4, r5, r7, pc}

080110b6 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 80110b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110b8:	b097      	sub	sp, #92	; 0x5c
 80110ba:	af08      	add	r7, sp, #32
 80110bc:	60f8      	str	r0, [r7, #12]
 80110be:	60b9      	str	r1, [r7, #8]
 80110c0:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 80110c2:	f04f 33ff 	mov.w	r3, #4294967295
 80110c6:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 80110c8:	2300      	movs	r3, #0
 80110ca:	61fb      	str	r3, [r7, #28]
 80110cc:	2300      	movs	r3, #0
 80110ce:	623b      	str	r3, [r7, #32]
 80110d0:	2300      	movs	r3, #0
 80110d2:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	61fb      	str	r3, [r7, #28]
    int len = 0;
 80110d8:	2300      	movs	r3, #0
 80110da:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	6a1b      	ldr	r3, [r3, #32]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	f000 809b 	beq.w	801121c <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 80110e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80110ea:	4618      	mov	r0, r3
 80110ec:	f000 f8d4 	bl	8011298 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	685a      	ldr	r2, [r3, #4]
 80110f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80110f8:	4611      	mov	r1, r2
 80110fa:	4618      	mov	r0, r3
 80110fc:	f000 f8ec 	bl	80112d8 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	781b      	ldrb	r3, [r3, #0]
 8011104:	2b01      	cmp	r3, #1
 8011106:	d003      	beq.n	8011110 <MQTTPublish+0x5a>
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	2b02      	cmp	r3, #2
 801110e:	d106      	bne.n	801111e <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8011110:	68f8      	ldr	r0, [r7, #12]
 8011112:	f7ff fb18 	bl	8010746 <getNextPacketId>
 8011116:	4603      	mov	r3, r0
 8011118:	b29a      	uxth	r2, r3
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	691b      	ldr	r3, [r3, #16]
 8011122:	603b      	str	r3, [r7, #0]
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	689b      	ldr	r3, [r3, #8]
 8011128:	469c      	mov	ip, r3
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	469e      	mov	lr, r3
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	785d      	ldrb	r5, [r3, #1]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	689b      	ldr	r3, [r3, #8]
 801113c:	687a      	ldr	r2, [r7, #4]
 801113e:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8011140:	9206      	str	r2, [sp, #24]
 8011142:	9305      	str	r3, [sp, #20]
 8011144:	ac02      	add	r4, sp, #8
 8011146:	f107 031c 	add.w	r3, r7, #28
 801114a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801114e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011152:	9601      	str	r6, [sp, #4]
 8011154:	9500      	str	r5, [sp, #0]
 8011156:	4673      	mov	r3, lr
 8011158:	2200      	movs	r2, #0
 801115a:	4661      	mov	r1, ip
 801115c:	6838      	ldr	r0, [r7, #0]
 801115e:	f000 fe74 	bl	8011e4a <MQTTSerialize_publish>
 8011162:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 8011164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011166:	2b00      	cmp	r3, #0
 8011168:	dd5a      	ble.n	8011220 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 801116a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801116e:	461a      	mov	r2, r3
 8011170:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011172:	68f8      	ldr	r0, [r7, #12]
 8011174:	f7ff faff 	bl	8010776 <sendPacket>
 8011178:	6378      	str	r0, [r7, #52]	; 0x34
 801117a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801117c:	2b00      	cmp	r3, #0
 801117e:	d151      	bne.n	8011224 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	781b      	ldrb	r3, [r3, #0]
 8011184:	2b01      	cmp	r3, #1
 8011186:	d122      	bne.n	80111ce <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 8011188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801118c:	461a      	mov	r2, r3
 801118e:	2104      	movs	r1, #4
 8011190:	68f8      	ldr	r0, [r7, #12]
 8011192:	f7ff fe42 	bl	8010e1a <waitfor>
 8011196:	4603      	mov	r3, r0
 8011198:	2b04      	cmp	r3, #4
 801119a:	d114      	bne.n	80111c6 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	695c      	ldr	r4, [r3, #20]
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	f107 021a 	add.w	r2, r7, #26
 80111a8:	f107 0119 	add.w	r1, r7, #25
 80111ac:	f107 0018 	add.w	r0, r7, #24
 80111b0:	9300      	str	r3, [sp, #0]
 80111b2:	4623      	mov	r3, r4
 80111b4:	f000 fbdd 	bl	8011972 <MQTTDeserialize_ack>
 80111b8:	4603      	mov	r3, r0
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d035      	beq.n	801122a <MQTTPublish+0x174>
                rc = FAILURE;
 80111be:	f04f 33ff 	mov.w	r3, #4294967295
 80111c2:	637b      	str	r3, [r7, #52]	; 0x34
 80111c4:	e031      	b.n	801122a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 80111c6:	f04f 33ff 	mov.w	r3, #4294967295
 80111ca:	637b      	str	r3, [r7, #52]	; 0x34
 80111cc:	e02d      	b.n	801122a <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	2b02      	cmp	r3, #2
 80111d4:	d128      	bne.n	8011228 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 80111d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80111da:	461a      	mov	r2, r3
 80111dc:	2107      	movs	r1, #7
 80111de:	68f8      	ldr	r0, [r7, #12]
 80111e0:	f7ff fe1b 	bl	8010e1a <waitfor>
 80111e4:	4603      	mov	r3, r0
 80111e6:	2b07      	cmp	r3, #7
 80111e8:	d114      	bne.n	8011214 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	695c      	ldr	r4, [r3, #20]
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	68db      	ldr	r3, [r3, #12]
 80111f2:	f107 0216 	add.w	r2, r7, #22
 80111f6:	f107 0115 	add.w	r1, r7, #21
 80111fa:	f107 0014 	add.w	r0, r7, #20
 80111fe:	9300      	str	r3, [sp, #0]
 8011200:	4623      	mov	r3, r4
 8011202:	f000 fbb6 	bl	8011972 <MQTTDeserialize_ack>
 8011206:	4603      	mov	r3, r0
 8011208:	2b01      	cmp	r3, #1
 801120a:	d00e      	beq.n	801122a <MQTTPublish+0x174>
                rc = FAILURE;
 801120c:	f04f 33ff 	mov.w	r3, #4294967295
 8011210:	637b      	str	r3, [r7, #52]	; 0x34
 8011212:	e00a      	b.n	801122a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8011214:	f04f 33ff 	mov.w	r3, #4294967295
 8011218:	637b      	str	r3, [r7, #52]	; 0x34
 801121a:	e006      	b.n	801122a <MQTTPublish+0x174>
		goto exit;
 801121c:	bf00      	nop
 801121e:	e004      	b.n	801122a <MQTTPublish+0x174>
        goto exit;
 8011220:	bf00      	nop
 8011222:	e002      	b.n	801122a <MQTTPublish+0x174>
        goto exit; // there was a problem
 8011224:	bf00      	nop
 8011226:	e000      	b.n	801122a <MQTTPublish+0x174>
    }

exit:
 8011228:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 801122a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801122c:	4618      	mov	r0, r3
 801122e:	373c      	adds	r7, #60	; 0x3c
 8011230:	46bd      	mov	sp, r7
 8011232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011234 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b086      	sub	sp, #24
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 801123c:	f04f 33ff 	mov.w	r3, #4294967295
 8011240:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 8011242:	2300      	movs	r3, #0
 8011244:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 8011246:	f107 0308 	add.w	r3, r7, #8
 801124a:	4618      	mov	r0, r3
 801124c:	f000 f824 	bl	8011298 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	685a      	ldr	r2, [r3, #4]
 8011254:	f107 0308 	add.w	r3, r7, #8
 8011258:	4611      	mov	r1, r2
 801125a:	4618      	mov	r0, r3
 801125c:	f000 f83c 	bl	80112d8 <TimerCountdownMS>

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	691a      	ldr	r2, [r3, #16]
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	689b      	ldr	r3, [r3, #8]
 8011268:	4619      	mov	r1, r3
 801126a:	4610      	mov	r0, r2
 801126c:	f000 faf1 	bl	8011852 <MQTTSerialize_disconnect>
 8011270:	6138      	str	r0, [r7, #16]
    if (len > 0)
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	2b00      	cmp	r3, #0
 8011276:	dd07      	ble.n	8011288 <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 8011278:	f107 0308 	add.w	r3, r7, #8
 801127c:	461a      	mov	r2, r3
 801127e:	6939      	ldr	r1, [r7, #16]
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f7ff fa78 	bl	8010776 <sendPacket>
 8011286:	6178      	str	r0, [r7, #20]

    c->isconnected = 0;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2200      	movs	r2, #0
 801128c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 801128e:	697b      	ldr	r3, [r7, #20]
}
 8011290:	4618      	mov	r0, r3
 8011292:	3718      	adds	r7, #24
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}

08011298 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 8011298:	b480      	push	{r7}
 801129a:	b083      	sub	sp, #12
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2200      	movs	r2, #0
 80112a4:	605a      	str	r2, [r3, #4]
}
 80112a6:	bf00      	nop
 80112a8:	370c      	adds	r7, #12
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bc80      	pop	{r7}
 80112ae:	4770      	bx	lr

080112b0 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 80112b0:	b480      	push	{r7}
 80112b2:	b085      	sub	sp, #20
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	685a      	ldr	r2, [r3, #4]
 80112bc:	4b05      	ldr	r3, [pc, #20]	; (80112d4 <TimerIsExpired+0x24>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	1ad3      	subs	r3, r2, r3
 80112c2:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	0fdb      	lsrs	r3, r3, #31
 80112c8:	b2db      	uxtb	r3, r3
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3714      	adds	r7, #20
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bc80      	pop	{r7}
 80112d2:	4770      	bx	lr
 80112d4:	20004808 	.word	0x20004808

080112d8 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 80112d8:	b480      	push	{r7}
 80112da:	b083      	sub	sp, #12
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 80112e2:	4b05      	ldr	r3, [pc, #20]	; (80112f8 <TimerCountdownMS+0x20>)
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	441a      	add	r2, r3
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	605a      	str	r2, [r3, #4]
}
 80112ee:	bf00      	nop
 80112f0:	370c      	adds	r7, #12
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bc80      	pop	{r7}
 80112f6:	4770      	bx	lr
 80112f8:	20004808 	.word	0x20004808

080112fc <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 80112fc:	b480      	push	{r7}
 80112fe:	b083      	sub	sp, #12
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801130c:	fb03 f202 	mul.w	r2, r3, r2
 8011310:	4b04      	ldr	r3, [pc, #16]	; (8011324 <TimerCountdown+0x28>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	441a      	add	r2, r3
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	605a      	str	r2, [r3, #4]
}
 801131a:	bf00      	nop
 801131c:	370c      	adds	r7, #12
 801131e:	46bd      	mov	sp, r7
 8011320:	bc80      	pop	{r7}
 8011322:	4770      	bx	lr
 8011324:	20004808 	.word	0x20004808

08011328 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 8011328:	b480      	push	{r7}
 801132a:	b085      	sub	sp, #20
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	685a      	ldr	r2, [r3, #4]
 8011334:	4b05      	ldr	r3, [pc, #20]	; (801134c <TimerLeftMS+0x24>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	1ad3      	subs	r3, r2, r3
 801133a:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8011342:	4618      	mov	r0, r3
 8011344:	3714      	adds	r7, #20
 8011346:	46bd      	mov	sp, r7
 8011348:	bc80      	pop	{r7}
 801134a:	4770      	bx	lr
 801134c:	20004808 	.word	0x20004808

08011350 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 8011350:	b480      	push	{r7}
 8011352:	b083      	sub	sp, #12
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	683a      	ldr	r2, [r7, #0]
 801135e:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	4a06      	ldr	r2, [pc, #24]	; (801137c <NewNetwork+0x2c>)
 8011364:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	4a05      	ldr	r2, [pc, #20]	; (8011380 <NewNetwork+0x30>)
 801136a:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	4a05      	ldr	r2, [pc, #20]	; (8011384 <NewNetwork+0x34>)
 8011370:	60da      	str	r2, [r3, #12]
}
 8011372:	bf00      	nop
 8011374:	370c      	adds	r7, #12
 8011376:	46bd      	mov	sp, r7
 8011378:	bc80      	pop	{r7}
 801137a:	4770      	bx	lr
 801137c:	08011389 	.word	0x08011389
 8011380:	080113e3 	.word	0x080113e3
 8011384:	0801142b 	.word	0x0801142b

08011388 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b084      	sub	sp, #16
 801138c:	af00      	add	r7, sp, #0
 801138e:	60f8      	str	r0, [r7, #12]
 8011390:	60b9      	str	r1, [r7, #8]
 8011392:	607a      	str	r2, [r7, #4]
 8011394:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	009b      	lsls	r3, r3, #2
 801139c:	3301      	adds	r3, #1
 801139e:	00db      	lsls	r3, r3, #3
 80113a0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80113a4:	4618      	mov	r0, r3
 80113a6:	f7fc fdbb 	bl	800df20 <WIZCHIP_READ>
 80113aa:	4603      	mov	r3, r0
 80113ac:	2b17      	cmp	r3, #23
 80113ae:	d113      	bne.n	80113d8 <w5x00_read+0x50>
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	b2db      	uxtb	r3, r3
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7fc ff57 	bl	800e26a <getSn_RX_RSR>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d00a      	beq.n	80113d8 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	687a      	ldr	r2, [r7, #4]
 80113ca:	b292      	uxth	r2, r2
 80113cc:	68b9      	ldr	r1, [r7, #8]
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7fd fc64 	bl	800ec9c <recv>
 80113d4:	4603      	mov	r3, r0
 80113d6:	e000      	b.n	80113da <w5x00_read+0x52>

	return SOCK_ERROR;
 80113d8:	2300      	movs	r3, #0
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3710      	adds	r7, #16
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}

080113e2 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 80113e2:	b580      	push	{r7, lr}
 80113e4:	b084      	sub	sp, #16
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	60f8      	str	r0, [r7, #12]
 80113ea:	60b9      	str	r1, [r7, #8]
 80113ec:	607a      	str	r2, [r7, #4]
 80113ee:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	009b      	lsls	r3, r3, #2
 80113f6:	3301      	adds	r3, #1
 80113f8:	00db      	lsls	r3, r3, #3
 80113fa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80113fe:	4618      	mov	r0, r3
 8011400:	f7fc fd8e 	bl	800df20 <WIZCHIP_READ>
 8011404:	4603      	mov	r3, r0
 8011406:	2b17      	cmp	r3, #23
 8011408:	d10a      	bne.n	8011420 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	b2db      	uxtb	r3, r3
 8011410:	687a      	ldr	r2, [r7, #4]
 8011412:	b292      	uxth	r2, r2
 8011414:	68b9      	ldr	r1, [r7, #8]
 8011416:	4618      	mov	r0, r3
 8011418:	f7fd fb46 	bl	800eaa8 <send>
 801141c:	4603      	mov	r3, r0
 801141e:	e000      	b.n	8011422 <w5x00_write+0x40>

	return SOCK_ERROR;
 8011420:	2300      	movs	r3, #0
}
 8011422:	4618      	mov	r0, r3
 8011424:	3710      	adds	r7, #16
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}

0801142a <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b082      	sub	sp, #8
 801142e:	af00      	add	r7, sp, #0
 8011430:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	b2db      	uxtb	r3, r3
 8011438:	4618      	mov	r0, r3
 801143a:	f7fd fabf 	bl	800e9bc <disconnect>
}
 801143e:	bf00      	nop
 8011440:	3708      	adds	r7, #8
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}

08011446 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 8011446:	b580      	push	{r7, lr}
 8011448:	b086      	sub	sp, #24
 801144a:	af00      	add	r7, sp, #0
 801144c:	60f8      	str	r0, [r7, #12]
 801144e:	60b9      	str	r1, [r7, #8]
 8011450:	4613      	mov	r3, r2
 8011452:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 8011454:	f243 0339 	movw	r3, #12345	; 0x3039
 8011458:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	b2d8      	uxtb	r0, r3
 8011460:	8afa      	ldrh	r2, [r7, #22]
 8011462:	2300      	movs	r3, #0
 8011464:	2101      	movs	r1, #1
 8011466:	f7fd f84b 	bl	800e500 <socket>
 801146a:	4603      	mov	r3, r0
 801146c:	461a      	mov	r2, r3
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	429a      	cmp	r2, r3
 8011474:	d001      	beq.n	801147a <ConnectNetwork+0x34>
		return SOCK_ERROR;
 8011476:	2300      	movs	r3, #0
 8011478:	e00d      	b.n	8011496 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	b2db      	uxtb	r3, r3
 8011480:	88fa      	ldrh	r2, [r7, #6]
 8011482:	68b9      	ldr	r1, [r7, #8]
 8011484:	4618      	mov	r0, r3
 8011486:	f7fd f9bd 	bl	800e804 <connect>
 801148a:	4603      	mov	r3, r0
 801148c:	2b01      	cmp	r3, #1
 801148e:	d001      	beq.n	8011494 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 8011490:	2300      	movs	r3, #0
 8011492:	e000      	b.n	8011496 <ConnectNetwork+0x50>

	return SOCK_OK;
 8011494:	2301      	movs	r3, #1
}
 8011496:	4618      	mov	r0, r3
 8011498:	3718      	adds	r7, #24
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}

0801149e <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 801149e:	b590      	push	{r4, r7, lr}
 80114a0:	b085      	sub	sp, #20
 80114a2:	af00      	add	r7, sp, #0
 80114a4:	6078      	str	r0, [r7, #4]
	int len = 0;
 80114a6:	2300      	movs	r3, #0
 80114a8:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	7a1b      	ldrb	r3, [r3, #8]
 80114ae:	2b03      	cmp	r3, #3
 80114b0:	d102      	bne.n	80114b8 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 80114b2:	230c      	movs	r3, #12
 80114b4:	60fb      	str	r3, [r7, #12]
 80114b6:	e005      	b.n	80114c4 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	7a1b      	ldrb	r3, [r3, #8]
 80114bc:	2b04      	cmp	r3, #4
 80114be:	d101      	bne.n	80114c4 <MQTTSerialize_connectLength+0x26>
		len = 10;
 80114c0:	230a      	movs	r3, #10
 80114c2:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	330c      	adds	r3, #12
 80114c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80114cc:	f000 fc4d 	bl	8011d6a <MQTTstrlen>
 80114d0:	4603      	mov	r3, r0
 80114d2:	3302      	adds	r3, #2
 80114d4:	68fa      	ldr	r2, [r7, #12]
 80114d6:	4413      	add	r3, r2
 80114d8:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	7edb      	ldrb	r3, [r3, #27]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d013      	beq.n	801150a <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	3324      	adds	r3, #36	; 0x24
 80114e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80114ea:	f000 fc3e 	bl	8011d6a <MQTTstrlen>
 80114ee:	4603      	mov	r3, r0
 80114f0:	1c9c      	adds	r4, r3, #2
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	3330      	adds	r3, #48	; 0x30
 80114f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80114fa:	f000 fc36 	bl	8011d6a <MQTTstrlen>
 80114fe:	4603      	mov	r3, r0
 8011500:	4423      	add	r3, r4
 8011502:	3302      	adds	r3, #2
 8011504:	68fa      	ldr	r2, [r7, #12]
 8011506:	4413      	add	r3, r2
 8011508:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801150e:	2b00      	cmp	r3, #0
 8011510:	d103      	bne.n	801151a <MQTTSerialize_connectLength+0x7c>
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011516:	2b00      	cmp	r3, #0
 8011518:	d00a      	beq.n	8011530 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	3340      	adds	r3, #64	; 0x40
 801151e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011522:	f000 fc22 	bl	8011d6a <MQTTstrlen>
 8011526:	4603      	mov	r3, r0
 8011528:	3302      	adds	r3, #2
 801152a:	68fa      	ldr	r2, [r7, #12]
 801152c:	4413      	add	r3, r2
 801152e:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011534:	2b00      	cmp	r3, #0
 8011536:	d103      	bne.n	8011540 <MQTTSerialize_connectLength+0xa2>
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801153c:	2b00      	cmp	r3, #0
 801153e:	d00a      	beq.n	8011556 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	334c      	adds	r3, #76	; 0x4c
 8011544:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011548:	f000 fc0f 	bl	8011d6a <MQTTstrlen>
 801154c:	4603      	mov	r3, r0
 801154e:	3302      	adds	r3, #2
 8011550:	68fa      	ldr	r2, [r7, #12]
 8011552:	4413      	add	r3, r2
 8011554:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8011556:	68fb      	ldr	r3, [r7, #12]
}
 8011558:	4618      	mov	r0, r3
 801155a:	3714      	adds	r7, #20
 801155c:	46bd      	mov	sp, r7
 801155e:	bd90      	pop	{r4, r7, pc}

08011560 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b08a      	sub	sp, #40	; 0x28
 8011564:	af00      	add	r7, sp, #0
 8011566:	60f8      	str	r0, [r7, #12]
 8011568:	60b9      	str	r1, [r7, #8]
 801156a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8011570:	2300      	movs	r3, #0
 8011572:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8011574:	2300      	movs	r3, #0
 8011576:	617b      	str	r3, [r7, #20]
	int len = 0;
 8011578:	2300      	movs	r3, #0
 801157a:	623b      	str	r3, [r7, #32]
	int rc = -1;
 801157c:	f04f 33ff 	mov.w	r3, #4294967295
 8011580:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f7ff ff8b 	bl	801149e <MQTTSerialize_connectLength>
 8011588:	6238      	str	r0, [r7, #32]
 801158a:	6a38      	ldr	r0, [r7, #32]
 801158c:	f000 faa6 	bl	8011adc <MQTTPacket_len>
 8011590:	4602      	mov	r2, r0
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	4293      	cmp	r3, r2
 8011596:	da03      	bge.n	80115a0 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8011598:	f06f 0301 	mvn.w	r3, #1
 801159c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801159e:	e0c2      	b.n	8011726 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 80115a0:	2300      	movs	r3, #0
 80115a2:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 80115a4:	7e3b      	ldrb	r3, [r7, #24]
 80115a6:	2201      	movs	r2, #1
 80115a8:	f362 1307 	bfi	r3, r2, #4, #4
 80115ac:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80115ae:	7e3a      	ldrb	r2, [r7, #24]
 80115b0:	f107 031c 	add.w	r3, r7, #28
 80115b4:	4611      	mov	r1, r2
 80115b6:	4618      	mov	r0, r3
 80115b8:	f000 fb1d 	bl	8011bf6 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	6a39      	ldr	r1, [r7, #32]
 80115c0:	4618      	mov	r0, r3
 80115c2:	f000 fa21 	bl	8011a08 <MQTTPacket_encode>
 80115c6:	4602      	mov	r2, r0
 80115c8:	69fb      	ldr	r3, [r7, #28]
 80115ca:	4413      	add	r3, r2
 80115cc:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	7a1b      	ldrb	r3, [r3, #8]
 80115d2:	2b04      	cmp	r3, #4
 80115d4:	d10c      	bne.n	80115f0 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 80115d6:	f107 031c 	add.w	r3, r7, #28
 80115da:	4955      	ldr	r1, [pc, #340]	; (8011730 <MQTTSerialize_connect+0x1d0>)
 80115dc:	4618      	mov	r0, r3
 80115de:	f000 fb46 	bl	8011c6e <writeCString>
		writeChar(&ptr, (char) 4);
 80115e2:	f107 031c 	add.w	r3, r7, #28
 80115e6:	2104      	movs	r1, #4
 80115e8:	4618      	mov	r0, r3
 80115ea:	f000 fb04 	bl	8011bf6 <writeChar>
 80115ee:	e00b      	b.n	8011608 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 80115f0:	f107 031c 	add.w	r3, r7, #28
 80115f4:	494f      	ldr	r1, [pc, #316]	; (8011734 <MQTTSerialize_connect+0x1d4>)
 80115f6:	4618      	mov	r0, r3
 80115f8:	f000 fb39 	bl	8011c6e <writeCString>
		writeChar(&ptr, (char) 3);
 80115fc:	f107 031c 	add.w	r3, r7, #28
 8011600:	2103      	movs	r1, #3
 8011602:	4618      	mov	r0, r3
 8011604:	f000 faf7 	bl	8011bf6 <writeChar>
	}

	flags.all = 0;
 8011608:	2300      	movs	r3, #0
 801160a:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	7e9b      	ldrb	r3, [r3, #26]
 8011610:	f003 0301 	and.w	r3, r3, #1
 8011614:	b2da      	uxtb	r2, r3
 8011616:	7d3b      	ldrb	r3, [r7, #20]
 8011618:	f362 0341 	bfi	r3, r2, #1, #1
 801161c:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	7edb      	ldrb	r3, [r3, #27]
 8011622:	2b00      	cmp	r3, #0
 8011624:	bf14      	ite	ne
 8011626:	2301      	movne	r3, #1
 8011628:	2300      	moveq	r3, #0
 801162a:	b2da      	uxtb	r2, r3
 801162c:	7d3b      	ldrb	r3, [r7, #20]
 801162e:	f362 0382 	bfi	r3, r2, #2, #1
 8011632:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8011634:	7d3b      	ldrb	r3, [r7, #20]
 8011636:	f003 0304 	and.w	r3, r3, #4
 801163a:	b2db      	uxtb	r3, r3
 801163c:	2b00      	cmp	r3, #0
 801163e:	d013      	beq.n	8011668 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011646:	f003 0303 	and.w	r3, r3, #3
 801164a:	b2da      	uxtb	r2, r3
 801164c:	7d3b      	ldrb	r3, [r7, #20]
 801164e:	f362 03c4 	bfi	r3, r2, #3, #2
 8011652:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801165a:	f003 0301 	and.w	r3, r3, #1
 801165e:	b2da      	uxtb	r2, r3
 8011660:	7d3b      	ldrb	r3, [r7, #20]
 8011662:	f362 1345 	bfi	r3, r2, #5, #1
 8011666:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801166c:	2b00      	cmp	r3, #0
 801166e:	d103      	bne.n	8011678 <MQTTSerialize_connect+0x118>
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011674:	2b00      	cmp	r3, #0
 8011676:	d003      	beq.n	8011680 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8011678:	7d3b      	ldrb	r3, [r7, #20]
 801167a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801167e:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011684:	2b00      	cmp	r3, #0
 8011686:	d103      	bne.n	8011690 <MQTTSerialize_connect+0x130>
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801168c:	2b00      	cmp	r3, #0
 801168e:	d003      	beq.n	8011698 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8011690:	7d3b      	ldrb	r3, [r7, #20]
 8011692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011696:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8011698:	7d3a      	ldrb	r2, [r7, #20]
 801169a:	f107 031c 	add.w	r3, r7, #28
 801169e:	4611      	mov	r1, r2
 80116a0:	4618      	mov	r0, r3
 80116a2:	f000 faa8 	bl	8011bf6 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	8b1b      	ldrh	r3, [r3, #24]
 80116aa:	461a      	mov	r2, r3
 80116ac:	f107 031c 	add.w	r3, r7, #28
 80116b0:	4611      	mov	r1, r2
 80116b2:	4618      	mov	r0, r3
 80116b4:	f000 fab3 	bl	8011c1e <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f107 001c 	add.w	r0, r7, #28
 80116be:	330c      	adds	r3, #12
 80116c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80116c2:	f000 faf3 	bl	8011cac <writeMQTTString>
	if (options->willFlag)
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	7edb      	ldrb	r3, [r3, #27]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d00d      	beq.n	80116ea <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f107 001c 	add.w	r0, r7, #28
 80116d4:	3324      	adds	r3, #36	; 0x24
 80116d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80116d8:	f000 fae8 	bl	8011cac <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f107 001c 	add.w	r0, r7, #28
 80116e2:	3330      	adds	r3, #48	; 0x30
 80116e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80116e6:	f000 fae1 	bl	8011cac <writeMQTTString>
	}
	if (flags.bits.username)
 80116ea:	7d3b      	ldrb	r3, [r7, #20]
 80116ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80116f0:	b2db      	uxtb	r3, r3
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d006      	beq.n	8011704 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f107 001c 	add.w	r0, r7, #28
 80116fc:	3340      	adds	r3, #64	; 0x40
 80116fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011700:	f000 fad4 	bl	8011cac <writeMQTTString>
	if (flags.bits.password)
 8011704:	7d3b      	ldrb	r3, [r7, #20]
 8011706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801170a:	b2db      	uxtb	r3, r3
 801170c:	2b00      	cmp	r3, #0
 801170e:	d006      	beq.n	801171e <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f107 001c 	add.w	r0, r7, #28
 8011716:	334c      	adds	r3, #76	; 0x4c
 8011718:	cb0e      	ldmia	r3, {r1, r2, r3}
 801171a:	f000 fac7 	bl	8011cac <writeMQTTString>

	rc = ptr - buf;
 801171e:	69fa      	ldr	r2, [r7, #28]
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	1ad3      	subs	r3, r2, r3
 8011724:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8011726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011728:	4618      	mov	r0, r3
 801172a:	3728      	adds	r7, #40	; 0x28
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}
 8011730:	08016140 	.word	0x08016140
 8011734:	08016148 	.word	0x08016148

08011738 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b08a      	sub	sp, #40	; 0x28
 801173c:	af00      	add	r7, sp, #0
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	607a      	str	r2, [r7, #4]
 8011744:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8011746:	2300      	movs	r3, #0
 8011748:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801174e:	2300      	movs	r3, #0
 8011750:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8011752:	2300      	movs	r3, #0
 8011754:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8011756:	2300      	movs	r3, #0
 8011758:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801175a:	f107 0318 	add.w	r3, r7, #24
 801175e:	4618      	mov	r0, r3
 8011760:	f000 fa36 	bl	8011bd0 <readChar>
 8011764:	4603      	mov	r3, r0
 8011766:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8011768:	7f3b      	ldrb	r3, [r7, #28]
 801176a:	f023 030f 	bic.w	r3, r3, #15
 801176e:	b2db      	uxtb	r3, r3
 8011770:	2b20      	cmp	r3, #32
 8011772:	d12e      	bne.n	80117d2 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8011774:	69bb      	ldr	r3, [r7, #24]
 8011776:	f107 0214 	add.w	r2, r7, #20
 801177a:	4611      	mov	r1, r2
 801177c:	4618      	mov	r0, r3
 801177e:	f000 f9f7 	bl	8011b70 <MQTTPacket_decodeBuf>
 8011782:	6278      	str	r0, [r7, #36]	; 0x24
 8011784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011786:	69bb      	ldr	r3, [r7, #24]
 8011788:	4413      	add	r3, r2
 801178a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801178c:	69bb      	ldr	r3, [r7, #24]
 801178e:	697a      	ldr	r2, [r7, #20]
 8011790:	4413      	add	r3, r2
 8011792:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8011794:	69bb      	ldr	r3, [r7, #24]
 8011796:	6a3a      	ldr	r2, [r7, #32]
 8011798:	1ad3      	subs	r3, r2, r3
 801179a:	2b01      	cmp	r3, #1
 801179c:	dd1b      	ble.n	80117d6 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 801179e:	f107 0318 	add.w	r3, r7, #24
 80117a2:	4618      	mov	r0, r3
 80117a4:	f000 fa14 	bl	8011bd0 <readChar>
 80117a8:	4603      	mov	r3, r0
 80117aa:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 80117ac:	7c3b      	ldrb	r3, [r7, #16]
 80117ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80117b2:	b2db      	uxtb	r3, r3
 80117b4:	461a      	mov	r2, r3
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 80117ba:	f107 0318 	add.w	r3, r7, #24
 80117be:	4618      	mov	r0, r3
 80117c0:	f000 fa06 	bl	8011bd0 <readChar>
 80117c4:	4603      	mov	r3, r0
 80117c6:	461a      	mov	r2, r3
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	701a      	strb	r2, [r3, #0]

	rc = 1;
 80117cc:	2301      	movs	r3, #1
 80117ce:	627b      	str	r3, [r7, #36]	; 0x24
 80117d0:	e002      	b.n	80117d8 <MQTTDeserialize_connack+0xa0>
		goto exit;
 80117d2:	bf00      	nop
 80117d4:	e000      	b.n	80117d8 <MQTTDeserialize_connack+0xa0>
		goto exit;
 80117d6:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80117d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80117da:	4618      	mov	r0, r3
 80117dc:	3728      	adds	r7, #40	; 0x28
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}

080117e2 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 80117e2:	b580      	push	{r7, lr}
 80117e4:	b088      	sub	sp, #32
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	60f8      	str	r0, [r7, #12]
 80117ea:	60b9      	str	r1, [r7, #8]
 80117ec:	4613      	mov	r3, r2
 80117ee:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 80117f0:	2300      	movs	r3, #0
 80117f2:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 80117f4:	f04f 33ff 	mov.w	r3, #4294967295
 80117f8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 80117fe:	68bb      	ldr	r3, [r7, #8]
 8011800:	2b01      	cmp	r3, #1
 8011802:	dc03      	bgt.n	801180c <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8011804:	f06f 0301 	mvn.w	r3, #1
 8011808:	61fb      	str	r3, [r7, #28]
		goto exit;
 801180a:	e01d      	b.n	8011848 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 801180c:	2300      	movs	r3, #0
 801180e:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8011810:	79fb      	ldrb	r3, [r7, #7]
 8011812:	f003 030f 	and.w	r3, r3, #15
 8011816:	b2da      	uxtb	r2, r3
 8011818:	7e3b      	ldrb	r3, [r7, #24]
 801181a:	f362 1307 	bfi	r3, r2, #4, #4
 801181e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8011820:	7e3a      	ldrb	r2, [r7, #24]
 8011822:	f107 0314 	add.w	r3, r7, #20
 8011826:	4611      	mov	r1, r2
 8011828:	4618      	mov	r0, r3
 801182a:	f000 f9e4 	bl	8011bf6 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	2100      	movs	r1, #0
 8011832:	4618      	mov	r0, r3
 8011834:	f000 f8e8 	bl	8011a08 <MQTTPacket_encode>
 8011838:	4602      	mov	r2, r0
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	4413      	add	r3, r2
 801183e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8011840:	697a      	ldr	r2, [r7, #20]
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	1ad3      	subs	r3, r2, r3
 8011846:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8011848:	69fb      	ldr	r3, [r7, #28]
}
 801184a:	4618      	mov	r0, r3
 801184c:	3720      	adds	r7, #32
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}

08011852 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 8011852:	b580      	push	{r7, lr}
 8011854:	b082      	sub	sp, #8
 8011856:	af00      	add	r7, sp, #0
 8011858:	6078      	str	r0, [r7, #4]
 801185a:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 801185c:	220e      	movs	r2, #14
 801185e:	6839      	ldr	r1, [r7, #0]
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f7ff ffbe 	bl	80117e2 <MQTTSerialize_zero>
 8011866:	4603      	mov	r3, r0
}
 8011868:	4618      	mov	r0, r3
 801186a:	3708      	adds	r7, #8
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}

08011870 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b082      	sub	sp, #8
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
 8011878:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 801187a:	220c      	movs	r2, #12
 801187c:	6839      	ldr	r1, [r7, #0]
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f7ff ffaf 	bl	80117e2 <MQTTSerialize_zero>
 8011884:	4603      	mov	r3, r0
}
 8011886:	4618      	mov	r0, r3
 8011888:	3708      	adds	r7, #8
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}

0801188e <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 801188e:	b580      	push	{r7, lr}
 8011890:	b08a      	sub	sp, #40	; 0x28
 8011892:	af00      	add	r7, sp, #0
 8011894:	60f8      	str	r0, [r7, #12]
 8011896:	60b9      	str	r1, [r7, #8]
 8011898:	607a      	str	r2, [r7, #4]
 801189a:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801189c:	2300      	movs	r3, #0
 801189e:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80118a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118a2:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80118a4:	2300      	movs	r3, #0
 80118a6:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80118a8:	2300      	movs	r3, #0
 80118aa:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 80118ac:	2300      	movs	r3, #0
 80118ae:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80118b0:	f107 0318 	add.w	r3, r7, #24
 80118b4:	4618      	mov	r0, r3
 80118b6:	f000 f98b 	bl	8011bd0 <readChar>
 80118ba:	4603      	mov	r3, r0
 80118bc:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 80118be:	7f3b      	ldrb	r3, [r7, #28]
 80118c0:	f023 030f 	bic.w	r3, r3, #15
 80118c4:	b2db      	uxtb	r3, r3
 80118c6:	2b30      	cmp	r3, #48	; 0x30
 80118c8:	d14b      	bne.n	8011962 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 80118ca:	7f3b      	ldrb	r3, [r7, #28]
 80118cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80118d0:	b2db      	uxtb	r3, r3
 80118d2:	461a      	mov	r2, r3
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 80118d8:	7f3b      	ldrb	r3, [r7, #28]
 80118da:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	461a      	mov	r2, r3
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 80118e6:	7f3b      	ldrb	r3, [r7, #28]
 80118e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80118ec:	b2db      	uxtb	r3, r3
 80118ee:	461a      	mov	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80118f4:	69bb      	ldr	r3, [r7, #24]
 80118f6:	f107 0214 	add.w	r2, r7, #20
 80118fa:	4611      	mov	r1, r2
 80118fc:	4618      	mov	r0, r3
 80118fe:	f000 f937 	bl	8011b70 <MQTTPacket_decodeBuf>
 8011902:	6278      	str	r0, [r7, #36]	; 0x24
 8011904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011906:	69bb      	ldr	r3, [r7, #24]
 8011908:	4413      	add	r3, r2
 801190a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801190c:	69bb      	ldr	r3, [r7, #24]
 801190e:	697a      	ldr	r2, [r7, #20]
 8011910:	4413      	add	r3, r2
 8011912:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8011914:	f107 0318 	add.w	r3, r7, #24
 8011918:	6a3a      	ldr	r2, [r7, #32]
 801191a:	4619      	mov	r1, r3
 801191c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801191e:	f000 f9f3 	bl	8011d08 <readMQTTLenString>
 8011922:	4603      	mov	r3, r0
 8011924:	2b00      	cmp	r3, #0
 8011926:	d01e      	beq.n	8011966 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8011928:	69bb      	ldr	r3, [r7, #24]
 801192a:	6a3a      	ldr	r2, [r7, #32]
 801192c:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801192e:	2b00      	cmp	r3, #0
 8011930:	db19      	blt.n	8011966 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	2b00      	cmp	r3, #0
 8011938:	dd08      	ble.n	801194c <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 801193a:	f107 0318 	add.w	r3, r7, #24
 801193e:	4618      	mov	r0, r3
 8011940:	f000 f92c 	bl	8011b9c <readInt>
 8011944:	4603      	mov	r3, r0
 8011946:	b29a      	uxth	r2, r3
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 801194c:	69bb      	ldr	r3, [r7, #24]
 801194e:	6a3a      	ldr	r2, [r7, #32]
 8011950:	1ad2      	subs	r2, r2, r3
 8011952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011954:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8011956:	69ba      	ldr	r2, [r7, #24]
 8011958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801195a:	601a      	str	r2, [r3, #0]
	rc = 1;
 801195c:	2301      	movs	r3, #1
 801195e:	627b      	str	r3, [r7, #36]	; 0x24
 8011960:	e002      	b.n	8011968 <MQTTDeserialize_publish+0xda>
		goto exit;
 8011962:	bf00      	nop
 8011964:	e000      	b.n	8011968 <MQTTDeserialize_publish+0xda>
		goto exit;
 8011966:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8011968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801196a:	4618      	mov	r0, r3
 801196c:	3728      	adds	r7, #40	; 0x28
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}

08011972 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8011972:	b580      	push	{r7, lr}
 8011974:	b08a      	sub	sp, #40	; 0x28
 8011976:	af00      	add	r7, sp, #0
 8011978:	60f8      	str	r0, [r7, #12]
 801197a:	60b9      	str	r1, [r7, #8]
 801197c:	607a      	str	r2, [r7, #4]
 801197e:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8011980:	2300      	movs	r3, #0
 8011982:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8011988:	2300      	movs	r3, #0
 801198a:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801198c:	2300      	movs	r3, #0
 801198e:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8011990:	f107 0318 	add.w	r3, r7, #24
 8011994:	4618      	mov	r0, r3
 8011996:	f000 f91b 	bl	8011bd0 <readChar>
 801199a:	4603      	mov	r3, r0
 801199c:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 801199e:	7f3b      	ldrb	r3, [r7, #28]
 80119a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80119a4:	b2db      	uxtb	r3, r3
 80119a6:	461a      	mov	r2, r3
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 80119ac:	7f3b      	ldrb	r3, [r7, #28]
 80119ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80119b2:	b2db      	uxtb	r3, r3
 80119b4:	461a      	mov	r2, r3
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80119ba:	69bb      	ldr	r3, [r7, #24]
 80119bc:	f107 0214 	add.w	r2, r7, #20
 80119c0:	4611      	mov	r1, r2
 80119c2:	4618      	mov	r0, r3
 80119c4:	f000 f8d4 	bl	8011b70 <MQTTPacket_decodeBuf>
 80119c8:	6278      	str	r0, [r7, #36]	; 0x24
 80119ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119cc:	69bb      	ldr	r3, [r7, #24]
 80119ce:	4413      	add	r3, r2
 80119d0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80119d2:	69bb      	ldr	r3, [r7, #24]
 80119d4:	697a      	ldr	r2, [r7, #20]
 80119d6:	4413      	add	r3, r2
 80119d8:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 80119da:	69bb      	ldr	r3, [r7, #24]
 80119dc:	6a3a      	ldr	r2, [r7, #32]
 80119de:	1ad3      	subs	r3, r2, r3
 80119e0:	2b01      	cmp	r3, #1
 80119e2:	dd0b      	ble.n	80119fc <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 80119e4:	f107 0318 	add.w	r3, r7, #24
 80119e8:	4618      	mov	r0, r3
 80119ea:	f000 f8d7 	bl	8011b9c <readInt>
 80119ee:	4603      	mov	r3, r0
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	801a      	strh	r2, [r3, #0]

	rc = 1;
 80119f6:	2301      	movs	r3, #1
 80119f8:	627b      	str	r3, [r7, #36]	; 0x24
 80119fa:	e000      	b.n	80119fe <MQTTDeserialize_ack+0x8c>
		goto exit;
 80119fc:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80119fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3728      	adds	r7, #40	; 0x28
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}

08011a08 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8011a08:	b480      	push	{r7}
 8011a0a:	b085      	sub	sp, #20
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8011a12:	2300      	movs	r3, #0
 8011a14:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	425a      	negs	r2, r3
 8011a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011a22:	bf58      	it	pl
 8011a24:	4253      	negpl	r3, r2
 8011a26:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	da00      	bge.n	8011a30 <MQTTPacket_encode+0x28>
 8011a2e:	337f      	adds	r3, #127	; 0x7f
 8011a30:	11db      	asrs	r3, r3, #7
 8011a32:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	dd03      	ble.n	8011a42 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8011a3a:	7afb      	ldrb	r3, [r7, #11]
 8011a3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a40:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	1c5a      	adds	r2, r3, #1
 8011a46:	60fa      	str	r2, [r7, #12]
 8011a48:	461a      	mov	r2, r3
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	4413      	add	r3, r2
 8011a4e:	7afa      	ldrb	r2, [r7, #11]
 8011a50:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	dcde      	bgt.n	8011a16 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8011a58:	68fb      	ldr	r3, [r7, #12]
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3714      	adds	r7, #20
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bc80      	pop	{r7}
 8011a62:	4770      	bx	lr

08011a64 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b086      	sub	sp, #24
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8011a6e:	2301      	movs	r3, #1
 8011a70:	617b      	str	r3, [r7, #20]
	int len = 0;
 8011a72:	2300      	movs	r3, #0
 8011a74:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	2200      	movs	r2, #0
 8011a7a:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8011a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8011a80:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	3301      	adds	r3, #1
 8011a86:	613b      	str	r3, [r7, #16]
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	2b04      	cmp	r3, #4
 8011a8c:	dd03      	ble.n	8011a96 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8011a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8011a92:	60fb      	str	r3, [r7, #12]
			goto exit;
 8011a94:	e01d      	b.n	8011ad2 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8011a96:	f107 020b 	add.w	r2, r7, #11
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2101      	movs	r1, #1
 8011a9e:	4610      	mov	r0, r2
 8011aa0:	4798      	blx	r3
 8011aa2:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	2b01      	cmp	r3, #1
 8011aa8:	d112      	bne.n	8011ad0 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	681a      	ldr	r2, [r3, #0]
 8011aae:	7afb      	ldrb	r3, [r7, #11]
 8011ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ab4:	6979      	ldr	r1, [r7, #20]
 8011ab6:	fb01 f303 	mul.w	r3, r1, r3
 8011aba:	441a      	add	r2, r3
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8011ac0:	697b      	ldr	r3, [r7, #20]
 8011ac2:	01db      	lsls	r3, r3, #7
 8011ac4:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8011ac6:	7afb      	ldrb	r3, [r7, #11]
 8011ac8:	b25b      	sxtb	r3, r3
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	dbd6      	blt.n	8011a7c <MQTTPacket_decode+0x18>
exit:
 8011ace:	e000      	b.n	8011ad2 <MQTTPacket_decode+0x6e>
			goto exit;
 8011ad0:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8011ad2:	693b      	ldr	r3, [r7, #16]
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3718      	adds	r7, #24
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8011adc:	b480      	push	{r7}
 8011ade:	b083      	sub	sp, #12
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2b7f      	cmp	r3, #127	; 0x7f
 8011aee:	dc03      	bgt.n	8011af8 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	3301      	adds	r3, #1
 8011af4:	607b      	str	r3, [r7, #4]
 8011af6:	e012      	b.n	8011b1e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011afe:	da03      	bge.n	8011b08 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	3302      	adds	r3, #2
 8011b04:	607b      	str	r3, [r7, #4]
 8011b06:	e00a      	b.n	8011b1e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	4a08      	ldr	r2, [pc, #32]	; (8011b2c <MQTTPacket_len+0x50>)
 8011b0c:	4293      	cmp	r3, r2
 8011b0e:	dc03      	bgt.n	8011b18 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	3303      	adds	r3, #3
 8011b14:	607b      	str	r3, [r7, #4]
 8011b16:	e002      	b.n	8011b1e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	3304      	adds	r3, #4
 8011b1c:	607b      	str	r3, [r7, #4]
	return rem_len;
 8011b1e:	687b      	ldr	r3, [r7, #4]
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	370c      	adds	r7, #12
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bc80      	pop	{r7}
 8011b28:	4770      	bx	lr
 8011b2a:	bf00      	nop
 8011b2c:	001ffffe 	.word	0x001ffffe

08011b30 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8011b30:	b480      	push	{r7}
 8011b32:	b085      	sub	sp, #20
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	60fb      	str	r3, [r7, #12]
 8011b3e:	e00a      	b.n	8011b56 <bufchar+0x26>
		*c = *bufptr++;
 8011b40:	4b0a      	ldr	r3, [pc, #40]	; (8011b6c <bufchar+0x3c>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	1c5a      	adds	r2, r3, #1
 8011b46:	4909      	ldr	r1, [pc, #36]	; (8011b6c <bufchar+0x3c>)
 8011b48:	600a      	str	r2, [r1, #0]
 8011b4a:	781a      	ldrb	r2, [r3, #0]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	3301      	adds	r3, #1
 8011b54:	60fb      	str	r3, [r7, #12]
 8011b56:	68fa      	ldr	r2, [r7, #12]
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	dbf0      	blt.n	8011b40 <bufchar+0x10>
	return count;
 8011b5e:	683b      	ldr	r3, [r7, #0]
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3714      	adds	r7, #20
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bc80      	pop	{r7}
 8011b68:	4770      	bx	lr
 8011b6a:	bf00      	nop
 8011b6c:	200010f0 	.word	0x200010f0

08011b70 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8011b7a:	4a06      	ldr	r2, [pc, #24]	; (8011b94 <MQTTPacket_decodeBuf+0x24>)
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8011b80:	6839      	ldr	r1, [r7, #0]
 8011b82:	4805      	ldr	r0, [pc, #20]	; (8011b98 <MQTTPacket_decodeBuf+0x28>)
 8011b84:	f7ff ff6e 	bl	8011a64 <MQTTPacket_decode>
 8011b88:	4603      	mov	r3, r0
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3708      	adds	r7, #8
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bd80      	pop	{r7, pc}
 8011b92:	bf00      	nop
 8011b94:	200010f0 	.word	0x200010f0
 8011b98:	08011b31 	.word	0x08011b31

08011b9c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8011b9c:	b480      	push	{r7}
 8011b9e:	b085      	sub	sp, #20
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	021b      	lsls	r3, r3, #8
 8011bb0:	68fa      	ldr	r2, [r7, #12]
 8011bb2:	3201      	adds	r2, #1
 8011bb4:	7812      	ldrb	r2, [r2, #0]
 8011bb6:	4413      	add	r3, r2
 8011bb8:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	1c9a      	adds	r2, r3, #2
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	601a      	str	r2, [r3, #0]
	return len;
 8011bc4:	68bb      	ldr	r3, [r7, #8]
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3714      	adds	r7, #20
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bc80      	pop	{r7}
 8011bce:	4770      	bx	lr

08011bd0 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b085      	sub	sp, #20
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	1c5a      	adds	r2, r3, #1
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	601a      	str	r2, [r3, #0]
	return c;
 8011bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3714      	adds	r7, #20
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bc80      	pop	{r7}
 8011bf4:	4770      	bx	lr

08011bf6 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8011bf6:	b480      	push	{r7}
 8011bf8:	b083      	sub	sp, #12
 8011bfa:	af00      	add	r7, sp, #0
 8011bfc:	6078      	str	r0, [r7, #4]
 8011bfe:	460b      	mov	r3, r1
 8011c00:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	78fa      	ldrb	r2, [r7, #3]
 8011c08:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	1c5a      	adds	r2, r3, #1
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	601a      	str	r2, [r3, #0]
}
 8011c14:	bf00      	nop
 8011c16:	370c      	adds	r7, #12
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bc80      	pop	{r7}
 8011c1c:	4770      	bx	lr

08011c1e <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8011c1e:	b480      	push	{r7}
 8011c20:	b083      	sub	sp, #12
 8011c22:	af00      	add	r7, sp, #0
 8011c24:	6078      	str	r0, [r7, #4]
 8011c26:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	da00      	bge.n	8011c30 <writeInt+0x12>
 8011c2e:	33ff      	adds	r3, #255	; 0xff
 8011c30:	121b      	asrs	r3, r3, #8
 8011c32:	461a      	mov	r2, r3
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	b2d2      	uxtb	r2, r2
 8011c3a:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	1c5a      	adds	r2, r3, #1
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	425a      	negs	r2, r3
 8011c4a:	b2db      	uxtb	r3, r3
 8011c4c:	b2d2      	uxtb	r2, r2
 8011c4e:	bf58      	it	pl
 8011c50:	4253      	negpl	r3, r2
 8011c52:	687a      	ldr	r2, [r7, #4]
 8011c54:	6812      	ldr	r2, [r2, #0]
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	1c5a      	adds	r2, r3, #1
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	601a      	str	r2, [r3, #0]
}
 8011c64:	bf00      	nop
 8011c66:	370c      	adds	r7, #12
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bc80      	pop	{r7}
 8011c6c:	4770      	bx	lr

08011c6e <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8011c6e:	b580      	push	{r7, lr}
 8011c70:	b084      	sub	sp, #16
 8011c72:	af00      	add	r7, sp, #0
 8011c74:	6078      	str	r0, [r7, #4]
 8011c76:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8011c78:	6838      	ldr	r0, [r7, #0]
 8011c7a:	f7ee fa73 	bl	8000164 <strlen>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8011c82:	68f9      	ldr	r1, [r7, #12]
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f7ff ffca 	bl	8011c1e <writeInt>
	memcpy(*pptr, string, len);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	68fa      	ldr	r2, [r7, #12]
 8011c90:	6839      	ldr	r1, [r7, #0]
 8011c92:	4618      	mov	r0, r3
 8011c94:	f001 fc1f 	bl	80134d6 <memcpy>
	*pptr += len;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681a      	ldr	r2, [r3, #0]
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	441a      	add	r2, r3
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	601a      	str	r2, [r3, #0]
}
 8011ca4:	bf00      	nop
 8011ca6:	3710      	adds	r7, #16
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}

08011cac <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b084      	sub	sp, #16
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	60f8      	str	r0, [r7, #12]
 8011cb4:	4638      	mov	r0, r7
 8011cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	dd12      	ble.n	8011ce6 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	4619      	mov	r1, r3
 8011cc4:	68f8      	ldr	r0, [r7, #12]
 8011cc6:	f7ff ffaa 	bl	8011c1e <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	68b9      	ldr	r1, [r7, #8]
 8011cd0:	687a      	ldr	r2, [r7, #4]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f001 fbff 	bl	80134d6 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	687a      	ldr	r2, [r7, #4]
 8011cde:	441a      	add	r2, r3
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8011ce4:	e00c      	b.n	8011d00 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d005      	beq.n	8011cf8 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	4619      	mov	r1, r3
 8011cf0:	68f8      	ldr	r0, [r7, #12]
 8011cf2:	f7ff ffbc 	bl	8011c6e <writeCString>
}
 8011cf6:	e003      	b.n	8011d00 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8011cf8:	2100      	movs	r1, #0
 8011cfa:	68f8      	ldr	r0, [r7, #12]
 8011cfc:	f7ff ff8f 	bl	8011c1e <writeInt>
}
 8011d00:	bf00      	nop
 8011d02:	3710      	adds	r7, #16
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}

08011d08 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b086      	sub	sp, #24
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	60f8      	str	r0, [r7, #12]
 8011d10:	60b9      	str	r1, [r7, #8]
 8011d12:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8011d14:	2300      	movs	r3, #0
 8011d16:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	687a      	ldr	r2, [r7, #4]
 8011d1e:	1ad3      	subs	r3, r2, r3
 8011d20:	2b01      	cmp	r3, #1
 8011d22:	dd1a      	ble.n	8011d5a <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8011d24:	68b8      	ldr	r0, [r7, #8]
 8011d26:	f7ff ff39 	bl	8011b9c <readInt>
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	68fa      	ldr	r2, [r7, #12]
 8011d36:	6852      	ldr	r2, [r2, #4]
 8011d38:	4413      	add	r3, r2
 8011d3a:	687a      	ldr	r2, [r7, #4]
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d30c      	bcc.n	8011d5a <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	681a      	ldr	r2, [r3, #0]
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	68fa      	ldr	r2, [r7, #12]
 8011d4e:	6852      	ldr	r2, [r2, #4]
 8011d50:	441a      	add	r2, r3
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	601a      	str	r2, [r3, #0]
			rc = 1;
 8011d56:	2301      	movs	r3, #1
 8011d58:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8011d60:	697b      	ldr	r3, [r7, #20]
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	3718      	adds	r7, #24
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}

08011d6a <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8011d6a:	b580      	push	{r7, lr}
 8011d6c:	b086      	sub	sp, #24
 8011d6e:	af00      	add	r7, sp, #0
 8011d70:	1d3b      	adds	r3, r7, #4
 8011d72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8011d76:	2300      	movs	r3, #0
 8011d78:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d006      	beq.n	8011d8e <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7ee f9ee 	bl	8000164 <strlen>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	617b      	str	r3, [r7, #20]
 8011d8c:	e001      	b.n	8011d92 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	617b      	str	r3, [r7, #20]
	return rc;
 8011d92:	697b      	ldr	r3, [r7, #20]
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	3718      	adds	r7, #24
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}

08011d9c <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b086      	sub	sp, #24
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
 8011da4:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8011da6:	2300      	movs	r3, #0
 8011da8:	617b      	str	r3, [r7, #20]
		blen = 0;
 8011daa:	2300      	movs	r3, #0
 8011dac:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d00a      	beq.n	8011dcc <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7ee f9cf 	bl	8000164 <strlen>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	617b      	str	r3, [r7, #20]
 8011dca:	e005      	b.n	8011dd8 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	689b      	ldr	r3, [r3, #8]
 8011dd0:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8011dd8:	6838      	ldr	r0, [r7, #0]
 8011dda:	f7ee f9c3 	bl	8000164 <strlen>
 8011dde:	4603      	mov	r3, r0
 8011de0:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8011de2:	697a      	ldr	r2, [r7, #20]
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d10a      	bne.n	8011e00 <MQTTPacket_equals+0x64>
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	461a      	mov	r2, r3
 8011dee:	6839      	ldr	r1, [r7, #0]
 8011df0:	6938      	ldr	r0, [r7, #16]
 8011df2:	f001 fa82 	bl	80132fa <strncmp>
 8011df6:	4603      	mov	r3, r0
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d101      	bne.n	8011e00 <MQTTPacket_equals+0x64>
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	e000      	b.n	8011e02 <MQTTPacket_equals+0x66>
 8011e00:	2300      	movs	r3, #0
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3718      	adds	r7, #24
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}

08011e0a <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8011e0a:	b580      	push	{r7, lr}
 8011e0c:	b086      	sub	sp, #24
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	60f8      	str	r0, [r7, #12]
 8011e12:	4638      	mov	r0, r7
 8011e14:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8011e1c:	463b      	mov	r3, r7
 8011e1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011e22:	f7ff ffa2 	bl	8011d6a <MQTTstrlen>
 8011e26:	4603      	mov	r3, r0
 8011e28:	1c9a      	adds	r2, r3, #2
 8011e2a:	6a3b      	ldr	r3, [r7, #32]
 8011e2c:	4413      	add	r3, r2
 8011e2e:	697a      	ldr	r2, [r7, #20]
 8011e30:	4413      	add	r3, r2
 8011e32:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	dd02      	ble.n	8011e40 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	3302      	adds	r3, #2
 8011e3e:	617b      	str	r3, [r7, #20]
	return len;
 8011e40:	697b      	ldr	r3, [r7, #20]
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3718      	adds	r7, #24
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}

08011e4a <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8011e4a:	b580      	push	{r7, lr}
 8011e4c:	b08a      	sub	sp, #40	; 0x28
 8011e4e:	af02      	add	r7, sp, #8
 8011e50:	60f8      	str	r0, [r7, #12]
 8011e52:	60b9      	str	r1, [r7, #8]
 8011e54:	603b      	str	r3, [r7, #0]
 8011e56:	4613      	mov	r3, r2
 8011e58:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8011e5e:	2300      	movs	r3, #0
 8011e60:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8011e62:	2300      	movs	r3, #0
 8011e64:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8011e66:	2300      	movs	r3, #0
 8011e68:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8011e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e6c:	9300      	str	r3, [sp, #0]
 8011e6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e74:	6838      	ldr	r0, [r7, #0]
 8011e76:	f7ff ffc8 	bl	8011e0a <MQTTSerialize_publishLength>
 8011e7a:	61b8      	str	r0, [r7, #24]
 8011e7c:	69b8      	ldr	r0, [r7, #24]
 8011e7e:	f7ff fe2d 	bl	8011adc <MQTTPacket_len>
 8011e82:	4602      	mov	r2, r0
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	4293      	cmp	r3, r2
 8011e88:	da03      	bge.n	8011e92 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8011e8a:	f06f 0301 	mvn.w	r3, #1
 8011e8e:	61fb      	str	r3, [r7, #28]
		goto exit;
 8011e90:	e04c      	b.n	8011f2c <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8011e92:	7c3b      	ldrb	r3, [r7, #16]
 8011e94:	2203      	movs	r2, #3
 8011e96:	f362 1307 	bfi	r3, r2, #4, #4
 8011e9a:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8011e9c:	79fb      	ldrb	r3, [r7, #7]
 8011e9e:	f003 0301 	and.w	r3, r3, #1
 8011ea2:	b2da      	uxtb	r2, r3
 8011ea4:	7c3b      	ldrb	r3, [r7, #16]
 8011ea6:	f362 03c3 	bfi	r3, r2, #3, #1
 8011eaa:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	f003 0303 	and.w	r3, r3, #3
 8011eb2:	b2da      	uxtb	r2, r3
 8011eb4:	7c3b      	ldrb	r3, [r7, #16]
 8011eb6:	f362 0342 	bfi	r3, r2, #1, #2
 8011eba:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8011ebc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011ec0:	f003 0301 	and.w	r3, r3, #1
 8011ec4:	b2da      	uxtb	r2, r3
 8011ec6:	7c3b      	ldrb	r3, [r7, #16]
 8011ec8:	f362 0300 	bfi	r3, r2, #0, #1
 8011ecc:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8011ece:	7c3a      	ldrb	r2, [r7, #16]
 8011ed0:	f107 0314 	add.w	r3, r7, #20
 8011ed4:	4611      	mov	r1, r2
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7ff fe8d 	bl	8011bf6 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	69b9      	ldr	r1, [r7, #24]
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7ff fd91 	bl	8011a08 <MQTTPacket_encode>
 8011ee6:	4602      	mov	r2, r0
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	4413      	add	r3, r2
 8011eec:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8011eee:	f107 0014 	add.w	r0, r7, #20
 8011ef2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ef8:	f7ff fed8 	bl	8011cac <writeMQTTString>

	if (qos > 0)
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	dd06      	ble.n	8011f10 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8011f02:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8011f04:	f107 0314 	add.w	r3, r7, #20
 8011f08:	4611      	mov	r1, r2
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7ff fe87 	bl	8011c1e <writeInt>

	memcpy(ptr, payload, payloadlen);
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f16:	4618      	mov	r0, r3
 8011f18:	f001 fadd 	bl	80134d6 <memcpy>
	ptr += payloadlen;
 8011f1c:	697a      	ldr	r2, [r7, #20]
 8011f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f20:	4413      	add	r3, r2
 8011f22:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8011f24:	697a      	ldr	r2, [r7, #20]
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	1ad3      	subs	r3, r2, r3
 8011f2a:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8011f2c:	69fb      	ldr	r3, [r7, #28]
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3720      	adds	r7, #32
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}

08011f36 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8011f36:	b580      	push	{r7, lr}
 8011f38:	b088      	sub	sp, #32
 8011f3a:	af00      	add	r7, sp, #0
 8011f3c:	60f8      	str	r0, [r7, #12]
 8011f3e:	60b9      	str	r1, [r7, #8]
 8011f40:	4611      	mov	r1, r2
 8011f42:	461a      	mov	r2, r3
 8011f44:	460b      	mov	r3, r1
 8011f46:	71fb      	strb	r3, [r7, #7]
 8011f48:	4613      	mov	r3, r2
 8011f4a:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8011f50:	2300      	movs	r3, #0
 8011f52:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	2b03      	cmp	r3, #3
 8011f5c:	dc03      	bgt.n	8011f66 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8011f5e:	f06f 0301 	mvn.w	r3, #1
 8011f62:	61fb      	str	r3, [r7, #28]
		goto exit;
 8011f64:	e037      	b.n	8011fd6 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8011f66:	79fb      	ldrb	r3, [r7, #7]
 8011f68:	f003 030f 	and.w	r3, r3, #15
 8011f6c:	b2da      	uxtb	r2, r3
 8011f6e:	7e3b      	ldrb	r3, [r7, #24]
 8011f70:	f362 1307 	bfi	r3, r2, #4, #4
 8011f74:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8011f76:	79bb      	ldrb	r3, [r7, #6]
 8011f78:	f003 0301 	and.w	r3, r3, #1
 8011f7c:	b2da      	uxtb	r2, r3
 8011f7e:	7e3b      	ldrb	r3, [r7, #24]
 8011f80:	f362 03c3 	bfi	r3, r2, #3, #1
 8011f84:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8011f86:	79fb      	ldrb	r3, [r7, #7]
 8011f88:	2b06      	cmp	r3, #6
 8011f8a:	bf0c      	ite	eq
 8011f8c:	2301      	moveq	r3, #1
 8011f8e:	2300      	movne	r3, #0
 8011f90:	b2db      	uxtb	r3, r3
 8011f92:	f003 0303 	and.w	r3, r3, #3
 8011f96:	b2da      	uxtb	r2, r3
 8011f98:	7e3b      	ldrb	r3, [r7, #24]
 8011f9a:	f362 0342 	bfi	r3, r2, #1, #2
 8011f9e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8011fa0:	7e3a      	ldrb	r2, [r7, #24]
 8011fa2:	f107 0314 	add.w	r3, r7, #20
 8011fa6:	4611      	mov	r1, r2
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7ff fe24 	bl	8011bf6 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	2102      	movs	r1, #2
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7ff fd28 	bl	8011a08 <MQTTPacket_encode>
 8011fb8:	4602      	mov	r2, r0
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	4413      	add	r3, r2
 8011fbe:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8011fc0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8011fc2:	f107 0314 	add.w	r3, r7, #20
 8011fc6:	4611      	mov	r1, r2
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7ff fe28 	bl	8011c1e <writeInt>
	rc = ptr - buf;
 8011fce:	697a      	ldr	r2, [r7, #20]
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	1ad3      	subs	r3, r2, r3
 8011fd4:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8011fd6:	69fb      	ldr	r3, [r7, #28]
}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	3720      	adds	r7, #32
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}

08011fe0 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b084      	sub	sp, #16
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8011fea:	2302      	movs	r3, #2
 8011fec:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8011fee:	2300      	movs	r3, #0
 8011ff0:	60fb      	str	r3, [r7, #12]
 8011ff2:	e013      	b.n	801201c <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8011ff4:	68fa      	ldr	r2, [r7, #12]
 8011ff6:	4613      	mov	r3, r2
 8011ff8:	005b      	lsls	r3, r3, #1
 8011ffa:	4413      	add	r3, r2
 8011ffc:	009b      	lsls	r3, r3, #2
 8011ffe:	461a      	mov	r2, r3
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	4413      	add	r3, r2
 8012004:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012008:	f7ff feaf 	bl	8011d6a <MQTTstrlen>
 801200c:	4603      	mov	r3, r0
 801200e:	3303      	adds	r3, #3
 8012010:	68ba      	ldr	r2, [r7, #8]
 8012012:	4413      	add	r3, r2
 8012014:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	3301      	adds	r3, #1
 801201a:	60fb      	str	r3, [r7, #12]
 801201c:	68fa      	ldr	r2, [r7, #12]
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	429a      	cmp	r2, r3
 8012022:	dbe7      	blt.n	8011ff4 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8012024:	68bb      	ldr	r3, [r7, #8]
}
 8012026:	4618      	mov	r0, r3
 8012028:	3710      	adds	r7, #16
 801202a:	46bd      	mov	sp, r7
 801202c:	bd80      	pop	{r7, pc}

0801202e <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], char requestedQoSs[])
{
 801202e:	b580      	push	{r7, lr}
 8012030:	b08a      	sub	sp, #40	; 0x28
 8012032:	af00      	add	r7, sp, #0
 8012034:	60f8      	str	r0, [r7, #12]
 8012036:	60b9      	str	r1, [r7, #8]
 8012038:	4611      	mov	r1, r2
 801203a:	461a      	mov	r2, r3
 801203c:	460b      	mov	r3, r1
 801203e:	71fb      	strb	r3, [r7, #7]
 8012040:	4613      	mov	r3, r2
 8012042:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8012048:	2300      	movs	r3, #0
 801204a:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 801204c:	2300      	movs	r3, #0
 801204e:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8012050:	2300      	movs	r3, #0
 8012052:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8012054:	2300      	movs	r3, #0
 8012056:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8012058:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801205a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801205c:	f7ff ffc0 	bl	8011fe0 <MQTTSerialize_subscribeLength>
 8012060:	61f8      	str	r0, [r7, #28]
 8012062:	69f8      	ldr	r0, [r7, #28]
 8012064:	f7ff fd3a 	bl	8011adc <MQTTPacket_len>
 8012068:	4602      	mov	r2, r0
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	4293      	cmp	r3, r2
 801206e:	da03      	bge.n	8012078 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8012070:	f06f 0301 	mvn.w	r3, #1
 8012074:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8012076:	e04f      	b.n	8012118 <MQTTSerialize_subscribe+0xea>
	}

	header.byte = 0;
 8012078:	2300      	movs	r3, #0
 801207a:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 801207c:	7d3b      	ldrb	r3, [r7, #20]
 801207e:	2208      	movs	r2, #8
 8012080:	f362 1307 	bfi	r3, r2, #4, #4
 8012084:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8012086:	79fb      	ldrb	r3, [r7, #7]
 8012088:	f003 0301 	and.w	r3, r3, #1
 801208c:	b2da      	uxtb	r2, r3
 801208e:	7d3b      	ldrb	r3, [r7, #20]
 8012090:	f362 03c3 	bfi	r3, r2, #3, #1
 8012094:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8012096:	7d3b      	ldrb	r3, [r7, #20]
 8012098:	2201      	movs	r2, #1
 801209a:	f362 0342 	bfi	r3, r2, #1, #2
 801209e:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 80120a0:	7d3a      	ldrb	r2, [r7, #20]
 80120a2:	f107 0318 	add.w	r3, r7, #24
 80120a6:	4611      	mov	r1, r2
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7ff fda4 	bl	8011bf6 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80120ae:	69bb      	ldr	r3, [r7, #24]
 80120b0:	69f9      	ldr	r1, [r7, #28]
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7ff fca8 	bl	8011a08 <MQTTPacket_encode>
 80120b8:	4602      	mov	r2, r0
 80120ba:	69bb      	ldr	r3, [r7, #24]
 80120bc:	4413      	add	r3, r2
 80120be:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 80120c0:	88ba      	ldrh	r2, [r7, #4]
 80120c2:	f107 0318 	add.w	r3, r7, #24
 80120c6:	4611      	mov	r1, r2
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7ff fda8 	bl	8011c1e <writeInt>

	for (i = 0; i < count; ++i)
 80120ce:	2300      	movs	r3, #0
 80120d0:	623b      	str	r3, [r7, #32]
 80120d2:	e019      	b.n	8012108 <MQTTSerialize_subscribe+0xda>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 80120d4:	6a3a      	ldr	r2, [r7, #32]
 80120d6:	4613      	mov	r3, r2
 80120d8:	005b      	lsls	r3, r3, #1
 80120da:	4413      	add	r3, r2
 80120dc:	009b      	lsls	r3, r3, #2
 80120de:	461a      	mov	r2, r3
 80120e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120e2:	4413      	add	r3, r2
 80120e4:	f107 0018 	add.w	r0, r7, #24
 80120e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120ea:	f7ff fddf 	bl	8011cac <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 80120ee:	6a3b      	ldr	r3, [r7, #32]
 80120f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120f2:	4413      	add	r3, r2
 80120f4:	781a      	ldrb	r2, [r3, #0]
 80120f6:	f107 0318 	add.w	r3, r7, #24
 80120fa:	4611      	mov	r1, r2
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7ff fd7a 	bl	8011bf6 <writeChar>
	for (i = 0; i < count; ++i)
 8012102:	6a3b      	ldr	r3, [r7, #32]
 8012104:	3301      	adds	r3, #1
 8012106:	623b      	str	r3, [r7, #32]
 8012108:	6a3a      	ldr	r2, [r7, #32]
 801210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801210c:	429a      	cmp	r2, r3
 801210e:	dbe1      	blt.n	80120d4 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8012110:	69ba      	ldr	r2, [r7, #24]
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	1ad3      	subs	r3, r2, r3
 8012116:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8012118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801211a:	4618      	mov	r0, r3
 801211c:	3728      	adds	r7, #40	; 0x28
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}

08012122 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 8012122:	b580      	push	{r7, lr}
 8012124:	b08a      	sub	sp, #40	; 0x28
 8012126:	af00      	add	r7, sp, #0
 8012128:	60f8      	str	r0, [r7, #12]
 801212a:	60b9      	str	r1, [r7, #8]
 801212c:	607a      	str	r2, [r7, #4]
 801212e:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8012130:	2300      	movs	r3, #0
 8012132:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8012134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012136:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8012138:	2300      	movs	r3, #0
 801213a:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801213c:	2300      	movs	r3, #0
 801213e:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8012140:	f107 0318 	add.w	r3, r7, #24
 8012144:	4618      	mov	r0, r3
 8012146:	f7ff fd43 	bl	8011bd0 <readChar>
 801214a:	4603      	mov	r3, r0
 801214c:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 801214e:	7f3b      	ldrb	r3, [r7, #28]
 8012150:	f023 030f 	bic.w	r3, r3, #15
 8012154:	b2db      	uxtb	r3, r3
 8012156:	2b90      	cmp	r3, #144	; 0x90
 8012158:	d142      	bne.n	80121e0 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801215a:	69bb      	ldr	r3, [r7, #24]
 801215c:	f107 0214 	add.w	r2, r7, #20
 8012160:	4611      	mov	r1, r2
 8012162:	4618      	mov	r0, r3
 8012164:	f7ff fd04 	bl	8011b70 <MQTTPacket_decodeBuf>
 8012168:	6278      	str	r0, [r7, #36]	; 0x24
 801216a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801216c:	69bb      	ldr	r3, [r7, #24]
 801216e:	4413      	add	r3, r2
 8012170:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8012172:	69bb      	ldr	r3, [r7, #24]
 8012174:	697a      	ldr	r2, [r7, #20]
 8012176:	4413      	add	r3, r2
 8012178:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801217a:	69bb      	ldr	r3, [r7, #24]
 801217c:	6a3a      	ldr	r2, [r7, #32]
 801217e:	1ad3      	subs	r3, r2, r3
 8012180:	2b01      	cmp	r3, #1
 8012182:	dd2f      	ble.n	80121e4 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 8012184:	f107 0318 	add.w	r3, r7, #24
 8012188:	4618      	mov	r0, r3
 801218a:	f7ff fd07 	bl	8011b9c <readInt>
 801218e:	4603      	mov	r3, r0
 8012190:	b29a      	uxth	r2, r3
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	801a      	strh	r2, [r3, #0]

	*count = 0;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2200      	movs	r2, #0
 801219a:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 801219c:	e019      	b.n	80121d2 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	68ba      	ldr	r2, [r7, #8]
 80121a4:	429a      	cmp	r2, r3
 80121a6:	da03      	bge.n	80121b0 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 80121a8:	f04f 33ff 	mov.w	r3, #4294967295
 80121ac:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 80121ae:	e01a      	b.n	80121e6 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 80121b0:	f107 0318 	add.w	r3, r7, #24
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7ff fd0b 	bl	8011bd0 <readChar>
 80121ba:	4603      	mov	r3, r0
 80121bc:	4618      	mov	r0, r3
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	1c59      	adds	r1, r3, #1
 80121c4:	687a      	ldr	r2, [r7, #4]
 80121c6:	6011      	str	r1, [r2, #0]
 80121c8:	009b      	lsls	r3, r3, #2
 80121ca:	683a      	ldr	r2, [r7, #0]
 80121cc:	4413      	add	r3, r2
 80121ce:	4602      	mov	r2, r0
 80121d0:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 80121d2:	69bb      	ldr	r3, [r7, #24]
 80121d4:	6a3a      	ldr	r2, [r7, #32]
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d8e1      	bhi.n	801219e <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 80121da:	2301      	movs	r3, #1
 80121dc:	627b      	str	r3, [r7, #36]	; 0x24
 80121de:	e002      	b.n	80121e6 <MQTTDeserialize_suback+0xc4>
		goto exit;
 80121e0:	bf00      	nop
 80121e2:	e000      	b.n	80121e6 <MQTTDeserialize_suback+0xc4>
		goto exit;
 80121e4:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80121e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	3728      	adds	r7, #40	; 0x28
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}

080121f0 <malloc>:
 80121f0:	4b02      	ldr	r3, [pc, #8]	; (80121fc <malloc+0xc>)
 80121f2:	4601      	mov	r1, r0
 80121f4:	6818      	ldr	r0, [r3, #0]
 80121f6:	f000 b82b 	b.w	8012250 <_malloc_r>
 80121fa:	bf00      	nop
 80121fc:	200003c0 	.word	0x200003c0

08012200 <free>:
 8012200:	4b02      	ldr	r3, [pc, #8]	; (801220c <free+0xc>)
 8012202:	4601      	mov	r1, r0
 8012204:	6818      	ldr	r0, [r3, #0]
 8012206:	f002 b803 	b.w	8014210 <_free_r>
 801220a:	bf00      	nop
 801220c:	200003c0 	.word	0x200003c0

08012210 <sbrk_aligned>:
 8012210:	b570      	push	{r4, r5, r6, lr}
 8012212:	4e0e      	ldr	r6, [pc, #56]	; (801224c <sbrk_aligned+0x3c>)
 8012214:	460c      	mov	r4, r1
 8012216:	6831      	ldr	r1, [r6, #0]
 8012218:	4605      	mov	r5, r0
 801221a:	b911      	cbnz	r1, 8012222 <sbrk_aligned+0x12>
 801221c:	f001 f8f6 	bl	801340c <_sbrk_r>
 8012220:	6030      	str	r0, [r6, #0]
 8012222:	4621      	mov	r1, r4
 8012224:	4628      	mov	r0, r5
 8012226:	f001 f8f1 	bl	801340c <_sbrk_r>
 801222a:	1c43      	adds	r3, r0, #1
 801222c:	d00a      	beq.n	8012244 <sbrk_aligned+0x34>
 801222e:	1cc4      	adds	r4, r0, #3
 8012230:	f024 0403 	bic.w	r4, r4, #3
 8012234:	42a0      	cmp	r0, r4
 8012236:	d007      	beq.n	8012248 <sbrk_aligned+0x38>
 8012238:	1a21      	subs	r1, r4, r0
 801223a:	4628      	mov	r0, r5
 801223c:	f001 f8e6 	bl	801340c <_sbrk_r>
 8012240:	3001      	adds	r0, #1
 8012242:	d101      	bne.n	8012248 <sbrk_aligned+0x38>
 8012244:	f04f 34ff 	mov.w	r4, #4294967295
 8012248:	4620      	mov	r0, r4
 801224a:	bd70      	pop	{r4, r5, r6, pc}
 801224c:	200010f8 	.word	0x200010f8

08012250 <_malloc_r>:
 8012250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012254:	1ccd      	adds	r5, r1, #3
 8012256:	f025 0503 	bic.w	r5, r5, #3
 801225a:	3508      	adds	r5, #8
 801225c:	2d0c      	cmp	r5, #12
 801225e:	bf38      	it	cc
 8012260:	250c      	movcc	r5, #12
 8012262:	2d00      	cmp	r5, #0
 8012264:	4607      	mov	r7, r0
 8012266:	db01      	blt.n	801226c <_malloc_r+0x1c>
 8012268:	42a9      	cmp	r1, r5
 801226a:	d905      	bls.n	8012278 <_malloc_r+0x28>
 801226c:	230c      	movs	r3, #12
 801226e:	2600      	movs	r6, #0
 8012270:	603b      	str	r3, [r7, #0]
 8012272:	4630      	mov	r0, r6
 8012274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012278:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801234c <_malloc_r+0xfc>
 801227c:	f000 f868 	bl	8012350 <__malloc_lock>
 8012280:	f8d8 3000 	ldr.w	r3, [r8]
 8012284:	461c      	mov	r4, r3
 8012286:	bb5c      	cbnz	r4, 80122e0 <_malloc_r+0x90>
 8012288:	4629      	mov	r1, r5
 801228a:	4638      	mov	r0, r7
 801228c:	f7ff ffc0 	bl	8012210 <sbrk_aligned>
 8012290:	1c43      	adds	r3, r0, #1
 8012292:	4604      	mov	r4, r0
 8012294:	d155      	bne.n	8012342 <_malloc_r+0xf2>
 8012296:	f8d8 4000 	ldr.w	r4, [r8]
 801229a:	4626      	mov	r6, r4
 801229c:	2e00      	cmp	r6, #0
 801229e:	d145      	bne.n	801232c <_malloc_r+0xdc>
 80122a0:	2c00      	cmp	r4, #0
 80122a2:	d048      	beq.n	8012336 <_malloc_r+0xe6>
 80122a4:	6823      	ldr	r3, [r4, #0]
 80122a6:	4631      	mov	r1, r6
 80122a8:	4638      	mov	r0, r7
 80122aa:	eb04 0903 	add.w	r9, r4, r3
 80122ae:	f001 f8ad 	bl	801340c <_sbrk_r>
 80122b2:	4581      	cmp	r9, r0
 80122b4:	d13f      	bne.n	8012336 <_malloc_r+0xe6>
 80122b6:	6821      	ldr	r1, [r4, #0]
 80122b8:	4638      	mov	r0, r7
 80122ba:	1a6d      	subs	r5, r5, r1
 80122bc:	4629      	mov	r1, r5
 80122be:	f7ff ffa7 	bl	8012210 <sbrk_aligned>
 80122c2:	3001      	adds	r0, #1
 80122c4:	d037      	beq.n	8012336 <_malloc_r+0xe6>
 80122c6:	6823      	ldr	r3, [r4, #0]
 80122c8:	442b      	add	r3, r5
 80122ca:	6023      	str	r3, [r4, #0]
 80122cc:	f8d8 3000 	ldr.w	r3, [r8]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d038      	beq.n	8012346 <_malloc_r+0xf6>
 80122d4:	685a      	ldr	r2, [r3, #4]
 80122d6:	42a2      	cmp	r2, r4
 80122d8:	d12b      	bne.n	8012332 <_malloc_r+0xe2>
 80122da:	2200      	movs	r2, #0
 80122dc:	605a      	str	r2, [r3, #4]
 80122de:	e00f      	b.n	8012300 <_malloc_r+0xb0>
 80122e0:	6822      	ldr	r2, [r4, #0]
 80122e2:	1b52      	subs	r2, r2, r5
 80122e4:	d41f      	bmi.n	8012326 <_malloc_r+0xd6>
 80122e6:	2a0b      	cmp	r2, #11
 80122e8:	d917      	bls.n	801231a <_malloc_r+0xca>
 80122ea:	1961      	adds	r1, r4, r5
 80122ec:	42a3      	cmp	r3, r4
 80122ee:	6025      	str	r5, [r4, #0]
 80122f0:	bf18      	it	ne
 80122f2:	6059      	strne	r1, [r3, #4]
 80122f4:	6863      	ldr	r3, [r4, #4]
 80122f6:	bf08      	it	eq
 80122f8:	f8c8 1000 	streq.w	r1, [r8]
 80122fc:	5162      	str	r2, [r4, r5]
 80122fe:	604b      	str	r3, [r1, #4]
 8012300:	4638      	mov	r0, r7
 8012302:	f104 060b 	add.w	r6, r4, #11
 8012306:	f000 f829 	bl	801235c <__malloc_unlock>
 801230a:	f026 0607 	bic.w	r6, r6, #7
 801230e:	1d23      	adds	r3, r4, #4
 8012310:	1af2      	subs	r2, r6, r3
 8012312:	d0ae      	beq.n	8012272 <_malloc_r+0x22>
 8012314:	1b9b      	subs	r3, r3, r6
 8012316:	50a3      	str	r3, [r4, r2]
 8012318:	e7ab      	b.n	8012272 <_malloc_r+0x22>
 801231a:	42a3      	cmp	r3, r4
 801231c:	6862      	ldr	r2, [r4, #4]
 801231e:	d1dd      	bne.n	80122dc <_malloc_r+0x8c>
 8012320:	f8c8 2000 	str.w	r2, [r8]
 8012324:	e7ec      	b.n	8012300 <_malloc_r+0xb0>
 8012326:	4623      	mov	r3, r4
 8012328:	6864      	ldr	r4, [r4, #4]
 801232a:	e7ac      	b.n	8012286 <_malloc_r+0x36>
 801232c:	4634      	mov	r4, r6
 801232e:	6876      	ldr	r6, [r6, #4]
 8012330:	e7b4      	b.n	801229c <_malloc_r+0x4c>
 8012332:	4613      	mov	r3, r2
 8012334:	e7cc      	b.n	80122d0 <_malloc_r+0x80>
 8012336:	230c      	movs	r3, #12
 8012338:	4638      	mov	r0, r7
 801233a:	603b      	str	r3, [r7, #0]
 801233c:	f000 f80e 	bl	801235c <__malloc_unlock>
 8012340:	e797      	b.n	8012272 <_malloc_r+0x22>
 8012342:	6025      	str	r5, [r4, #0]
 8012344:	e7dc      	b.n	8012300 <_malloc_r+0xb0>
 8012346:	605b      	str	r3, [r3, #4]
 8012348:	deff      	udf	#255	; 0xff
 801234a:	bf00      	nop
 801234c:	200010f4 	.word	0x200010f4

08012350 <__malloc_lock>:
 8012350:	4801      	ldr	r0, [pc, #4]	; (8012358 <__malloc_lock+0x8>)
 8012352:	f001 b8a8 	b.w	80134a6 <__retarget_lock_acquire_recursive>
 8012356:	bf00      	nop
 8012358:	2000123c 	.word	0x2000123c

0801235c <__malloc_unlock>:
 801235c:	4801      	ldr	r0, [pc, #4]	; (8012364 <__malloc_unlock+0x8>)
 801235e:	f001 b8a3 	b.w	80134a8 <__retarget_lock_release_recursive>
 8012362:	bf00      	nop
 8012364:	2000123c 	.word	0x2000123c

08012368 <realloc>:
 8012368:	4b02      	ldr	r3, [pc, #8]	; (8012374 <realloc+0xc>)
 801236a:	460a      	mov	r2, r1
 801236c:	4601      	mov	r1, r0
 801236e:	6818      	ldr	r0, [r3, #0]
 8012370:	f000 b802 	b.w	8012378 <_realloc_r>
 8012374:	200003c0 	.word	0x200003c0

08012378 <_realloc_r>:
 8012378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801237c:	4680      	mov	r8, r0
 801237e:	4614      	mov	r4, r2
 8012380:	460e      	mov	r6, r1
 8012382:	b921      	cbnz	r1, 801238e <_realloc_r+0x16>
 8012384:	4611      	mov	r1, r2
 8012386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801238a:	f7ff bf61 	b.w	8012250 <_malloc_r>
 801238e:	b92a      	cbnz	r2, 801239c <_realloc_r+0x24>
 8012390:	f001 ff3e 	bl	8014210 <_free_r>
 8012394:	4625      	mov	r5, r4
 8012396:	4628      	mov	r0, r5
 8012398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801239c:	f002 fb0a 	bl	80149b4 <_malloc_usable_size_r>
 80123a0:	4284      	cmp	r4, r0
 80123a2:	4607      	mov	r7, r0
 80123a4:	d802      	bhi.n	80123ac <_realloc_r+0x34>
 80123a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80123aa:	d812      	bhi.n	80123d2 <_realloc_r+0x5a>
 80123ac:	4621      	mov	r1, r4
 80123ae:	4640      	mov	r0, r8
 80123b0:	f7ff ff4e 	bl	8012250 <_malloc_r>
 80123b4:	4605      	mov	r5, r0
 80123b6:	2800      	cmp	r0, #0
 80123b8:	d0ed      	beq.n	8012396 <_realloc_r+0x1e>
 80123ba:	42bc      	cmp	r4, r7
 80123bc:	4622      	mov	r2, r4
 80123be:	4631      	mov	r1, r6
 80123c0:	bf28      	it	cs
 80123c2:	463a      	movcs	r2, r7
 80123c4:	f001 f887 	bl	80134d6 <memcpy>
 80123c8:	4631      	mov	r1, r6
 80123ca:	4640      	mov	r0, r8
 80123cc:	f001 ff20 	bl	8014210 <_free_r>
 80123d0:	e7e1      	b.n	8012396 <_realloc_r+0x1e>
 80123d2:	4635      	mov	r5, r6
 80123d4:	e7df      	b.n	8012396 <_realloc_r+0x1e>
	...

080123d8 <_strtol_l.constprop.0>:
 80123d8:	2b01      	cmp	r3, #1
 80123da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123de:	4686      	mov	lr, r0
 80123e0:	4690      	mov	r8, r2
 80123e2:	d001      	beq.n	80123e8 <_strtol_l.constprop.0+0x10>
 80123e4:	2b24      	cmp	r3, #36	; 0x24
 80123e6:	d906      	bls.n	80123f6 <_strtol_l.constprop.0+0x1e>
 80123e8:	f001 f832 	bl	8013450 <__errno>
 80123ec:	2316      	movs	r3, #22
 80123ee:	6003      	str	r3, [r0, #0]
 80123f0:	2000      	movs	r0, #0
 80123f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123f6:	460d      	mov	r5, r1
 80123f8:	4835      	ldr	r0, [pc, #212]	; (80124d0 <_strtol_l.constprop.0+0xf8>)
 80123fa:	462a      	mov	r2, r5
 80123fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012400:	5d06      	ldrb	r6, [r0, r4]
 8012402:	f016 0608 	ands.w	r6, r6, #8
 8012406:	d1f8      	bne.n	80123fa <_strtol_l.constprop.0+0x22>
 8012408:	2c2d      	cmp	r4, #45	; 0x2d
 801240a:	d12e      	bne.n	801246a <_strtol_l.constprop.0+0x92>
 801240c:	2601      	movs	r6, #1
 801240e:	782c      	ldrb	r4, [r5, #0]
 8012410:	1c95      	adds	r5, r2, #2
 8012412:	2b00      	cmp	r3, #0
 8012414:	d057      	beq.n	80124c6 <_strtol_l.constprop.0+0xee>
 8012416:	2b10      	cmp	r3, #16
 8012418:	d109      	bne.n	801242e <_strtol_l.constprop.0+0x56>
 801241a:	2c30      	cmp	r4, #48	; 0x30
 801241c:	d107      	bne.n	801242e <_strtol_l.constprop.0+0x56>
 801241e:	782a      	ldrb	r2, [r5, #0]
 8012420:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8012424:	2a58      	cmp	r2, #88	; 0x58
 8012426:	d149      	bne.n	80124bc <_strtol_l.constprop.0+0xe4>
 8012428:	2310      	movs	r3, #16
 801242a:	786c      	ldrb	r4, [r5, #1]
 801242c:	3502      	adds	r5, #2
 801242e:	2200      	movs	r2, #0
 8012430:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8012434:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012438:	fbbc f9f3 	udiv	r9, ip, r3
 801243c:	4610      	mov	r0, r2
 801243e:	fb03 ca19 	mls	sl, r3, r9, ip
 8012442:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012446:	2f09      	cmp	r7, #9
 8012448:	d814      	bhi.n	8012474 <_strtol_l.constprop.0+0x9c>
 801244a:	463c      	mov	r4, r7
 801244c:	42a3      	cmp	r3, r4
 801244e:	dd20      	ble.n	8012492 <_strtol_l.constprop.0+0xba>
 8012450:	1c57      	adds	r7, r2, #1
 8012452:	d007      	beq.n	8012464 <_strtol_l.constprop.0+0x8c>
 8012454:	4581      	cmp	r9, r0
 8012456:	d319      	bcc.n	801248c <_strtol_l.constprop.0+0xb4>
 8012458:	d101      	bne.n	801245e <_strtol_l.constprop.0+0x86>
 801245a:	45a2      	cmp	sl, r4
 801245c:	db16      	blt.n	801248c <_strtol_l.constprop.0+0xb4>
 801245e:	2201      	movs	r2, #1
 8012460:	fb00 4003 	mla	r0, r0, r3, r4
 8012464:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012468:	e7eb      	b.n	8012442 <_strtol_l.constprop.0+0x6a>
 801246a:	2c2b      	cmp	r4, #43	; 0x2b
 801246c:	bf04      	itt	eq
 801246e:	782c      	ldrbeq	r4, [r5, #0]
 8012470:	1c95      	addeq	r5, r2, #2
 8012472:	e7ce      	b.n	8012412 <_strtol_l.constprop.0+0x3a>
 8012474:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012478:	2f19      	cmp	r7, #25
 801247a:	d801      	bhi.n	8012480 <_strtol_l.constprop.0+0xa8>
 801247c:	3c37      	subs	r4, #55	; 0x37
 801247e:	e7e5      	b.n	801244c <_strtol_l.constprop.0+0x74>
 8012480:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012484:	2f19      	cmp	r7, #25
 8012486:	d804      	bhi.n	8012492 <_strtol_l.constprop.0+0xba>
 8012488:	3c57      	subs	r4, #87	; 0x57
 801248a:	e7df      	b.n	801244c <_strtol_l.constprop.0+0x74>
 801248c:	f04f 32ff 	mov.w	r2, #4294967295
 8012490:	e7e8      	b.n	8012464 <_strtol_l.constprop.0+0x8c>
 8012492:	1c53      	adds	r3, r2, #1
 8012494:	d108      	bne.n	80124a8 <_strtol_l.constprop.0+0xd0>
 8012496:	2322      	movs	r3, #34	; 0x22
 8012498:	4660      	mov	r0, ip
 801249a:	f8ce 3000 	str.w	r3, [lr]
 801249e:	f1b8 0f00 	cmp.w	r8, #0
 80124a2:	d0a6      	beq.n	80123f2 <_strtol_l.constprop.0+0x1a>
 80124a4:	1e69      	subs	r1, r5, #1
 80124a6:	e006      	b.n	80124b6 <_strtol_l.constprop.0+0xde>
 80124a8:	b106      	cbz	r6, 80124ac <_strtol_l.constprop.0+0xd4>
 80124aa:	4240      	negs	r0, r0
 80124ac:	f1b8 0f00 	cmp.w	r8, #0
 80124b0:	d09f      	beq.n	80123f2 <_strtol_l.constprop.0+0x1a>
 80124b2:	2a00      	cmp	r2, #0
 80124b4:	d1f6      	bne.n	80124a4 <_strtol_l.constprop.0+0xcc>
 80124b6:	f8c8 1000 	str.w	r1, [r8]
 80124ba:	e79a      	b.n	80123f2 <_strtol_l.constprop.0+0x1a>
 80124bc:	2430      	movs	r4, #48	; 0x30
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d1b5      	bne.n	801242e <_strtol_l.constprop.0+0x56>
 80124c2:	2308      	movs	r3, #8
 80124c4:	e7b3      	b.n	801242e <_strtol_l.constprop.0+0x56>
 80124c6:	2c30      	cmp	r4, #48	; 0x30
 80124c8:	d0a9      	beq.n	801241e <_strtol_l.constprop.0+0x46>
 80124ca:	230a      	movs	r3, #10
 80124cc:	e7af      	b.n	801242e <_strtol_l.constprop.0+0x56>
 80124ce:	bf00      	nop
 80124d0:	080161cf 	.word	0x080161cf

080124d4 <_strtol_r>:
 80124d4:	f7ff bf80 	b.w	80123d8 <_strtol_l.constprop.0>

080124d8 <_strtoul_l.constprop.0>:
 80124d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124dc:	4686      	mov	lr, r0
 80124de:	460d      	mov	r5, r1
 80124e0:	4f35      	ldr	r7, [pc, #212]	; (80125b8 <_strtoul_l.constprop.0+0xe0>)
 80124e2:	4628      	mov	r0, r5
 80124e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80124e8:	5d3e      	ldrb	r6, [r7, r4]
 80124ea:	f016 0608 	ands.w	r6, r6, #8
 80124ee:	d1f8      	bne.n	80124e2 <_strtoul_l.constprop.0+0xa>
 80124f0:	2c2d      	cmp	r4, #45	; 0x2d
 80124f2:	d130      	bne.n	8012556 <_strtoul_l.constprop.0+0x7e>
 80124f4:	2601      	movs	r6, #1
 80124f6:	782c      	ldrb	r4, [r5, #0]
 80124f8:	1c85      	adds	r5, r0, #2
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d057      	beq.n	80125ae <_strtoul_l.constprop.0+0xd6>
 80124fe:	2b10      	cmp	r3, #16
 8012500:	d109      	bne.n	8012516 <_strtoul_l.constprop.0+0x3e>
 8012502:	2c30      	cmp	r4, #48	; 0x30
 8012504:	d107      	bne.n	8012516 <_strtoul_l.constprop.0+0x3e>
 8012506:	7828      	ldrb	r0, [r5, #0]
 8012508:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801250c:	2858      	cmp	r0, #88	; 0x58
 801250e:	d149      	bne.n	80125a4 <_strtoul_l.constprop.0+0xcc>
 8012510:	2310      	movs	r3, #16
 8012512:	786c      	ldrb	r4, [r5, #1]
 8012514:	3502      	adds	r5, #2
 8012516:	f04f 38ff 	mov.w	r8, #4294967295
 801251a:	fbb8 f8f3 	udiv	r8, r8, r3
 801251e:	2700      	movs	r7, #0
 8012520:	fb03 f908 	mul.w	r9, r3, r8
 8012524:	4638      	mov	r0, r7
 8012526:	ea6f 0909 	mvn.w	r9, r9
 801252a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801252e:	f1bc 0f09 	cmp.w	ip, #9
 8012532:	d815      	bhi.n	8012560 <_strtoul_l.constprop.0+0x88>
 8012534:	4664      	mov	r4, ip
 8012536:	42a3      	cmp	r3, r4
 8012538:	dd23      	ble.n	8012582 <_strtoul_l.constprop.0+0xaa>
 801253a:	f1b7 3fff 	cmp.w	r7, #4294967295
 801253e:	d007      	beq.n	8012550 <_strtoul_l.constprop.0+0x78>
 8012540:	4580      	cmp	r8, r0
 8012542:	d31b      	bcc.n	801257c <_strtoul_l.constprop.0+0xa4>
 8012544:	d101      	bne.n	801254a <_strtoul_l.constprop.0+0x72>
 8012546:	45a1      	cmp	r9, r4
 8012548:	db18      	blt.n	801257c <_strtoul_l.constprop.0+0xa4>
 801254a:	2701      	movs	r7, #1
 801254c:	fb00 4003 	mla	r0, r0, r3, r4
 8012550:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012554:	e7e9      	b.n	801252a <_strtoul_l.constprop.0+0x52>
 8012556:	2c2b      	cmp	r4, #43	; 0x2b
 8012558:	bf04      	itt	eq
 801255a:	782c      	ldrbeq	r4, [r5, #0]
 801255c:	1c85      	addeq	r5, r0, #2
 801255e:	e7cc      	b.n	80124fa <_strtoul_l.constprop.0+0x22>
 8012560:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012564:	f1bc 0f19 	cmp.w	ip, #25
 8012568:	d801      	bhi.n	801256e <_strtoul_l.constprop.0+0x96>
 801256a:	3c37      	subs	r4, #55	; 0x37
 801256c:	e7e3      	b.n	8012536 <_strtoul_l.constprop.0+0x5e>
 801256e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012572:	f1bc 0f19 	cmp.w	ip, #25
 8012576:	d804      	bhi.n	8012582 <_strtoul_l.constprop.0+0xaa>
 8012578:	3c57      	subs	r4, #87	; 0x57
 801257a:	e7dc      	b.n	8012536 <_strtoul_l.constprop.0+0x5e>
 801257c:	f04f 37ff 	mov.w	r7, #4294967295
 8012580:	e7e6      	b.n	8012550 <_strtoul_l.constprop.0+0x78>
 8012582:	1c7b      	adds	r3, r7, #1
 8012584:	d106      	bne.n	8012594 <_strtoul_l.constprop.0+0xbc>
 8012586:	2322      	movs	r3, #34	; 0x22
 8012588:	4638      	mov	r0, r7
 801258a:	f8ce 3000 	str.w	r3, [lr]
 801258e:	b932      	cbnz	r2, 801259e <_strtoul_l.constprop.0+0xc6>
 8012590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012594:	b106      	cbz	r6, 8012598 <_strtoul_l.constprop.0+0xc0>
 8012596:	4240      	negs	r0, r0
 8012598:	2a00      	cmp	r2, #0
 801259a:	d0f9      	beq.n	8012590 <_strtoul_l.constprop.0+0xb8>
 801259c:	b107      	cbz	r7, 80125a0 <_strtoul_l.constprop.0+0xc8>
 801259e:	1e69      	subs	r1, r5, #1
 80125a0:	6011      	str	r1, [r2, #0]
 80125a2:	e7f5      	b.n	8012590 <_strtoul_l.constprop.0+0xb8>
 80125a4:	2430      	movs	r4, #48	; 0x30
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d1b5      	bne.n	8012516 <_strtoul_l.constprop.0+0x3e>
 80125aa:	2308      	movs	r3, #8
 80125ac:	e7b3      	b.n	8012516 <_strtoul_l.constprop.0+0x3e>
 80125ae:	2c30      	cmp	r4, #48	; 0x30
 80125b0:	d0a9      	beq.n	8012506 <_strtoul_l.constprop.0+0x2e>
 80125b2:	230a      	movs	r3, #10
 80125b4:	e7af      	b.n	8012516 <_strtoul_l.constprop.0+0x3e>
 80125b6:	bf00      	nop
 80125b8:	080161cf 	.word	0x080161cf

080125bc <_strtoul_r>:
 80125bc:	f7ff bf8c 	b.w	80124d8 <_strtoul_l.constprop.0>

080125c0 <strtoul>:
 80125c0:	4613      	mov	r3, r2
 80125c2:	460a      	mov	r2, r1
 80125c4:	4601      	mov	r1, r0
 80125c6:	4802      	ldr	r0, [pc, #8]	; (80125d0 <strtoul+0x10>)
 80125c8:	6800      	ldr	r0, [r0, #0]
 80125ca:	f7ff bf85 	b.w	80124d8 <_strtoul_l.constprop.0>
 80125ce:	bf00      	nop
 80125d0:	200003c0 	.word	0x200003c0

080125d4 <__cvt>:
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125da:	461f      	mov	r7, r3
 80125dc:	bfbb      	ittet	lt
 80125de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80125e2:	461f      	movlt	r7, r3
 80125e4:	2300      	movge	r3, #0
 80125e6:	232d      	movlt	r3, #45	; 0x2d
 80125e8:	b088      	sub	sp, #32
 80125ea:	4614      	mov	r4, r2
 80125ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80125ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80125f0:	7013      	strb	r3, [r2, #0]
 80125f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80125f8:	f023 0820 	bic.w	r8, r3, #32
 80125fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012600:	d005      	beq.n	801260e <__cvt+0x3a>
 8012602:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012606:	d100      	bne.n	801260a <__cvt+0x36>
 8012608:	3501      	adds	r5, #1
 801260a:	2302      	movs	r3, #2
 801260c:	e000      	b.n	8012610 <__cvt+0x3c>
 801260e:	2303      	movs	r3, #3
 8012610:	aa07      	add	r2, sp, #28
 8012612:	9204      	str	r2, [sp, #16]
 8012614:	aa06      	add	r2, sp, #24
 8012616:	e9cd a202 	strd	sl, r2, [sp, #8]
 801261a:	e9cd 3500 	strd	r3, r5, [sp]
 801261e:	4622      	mov	r2, r4
 8012620:	463b      	mov	r3, r7
 8012622:	f001 f811 	bl	8013648 <_dtoa_r>
 8012626:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801262a:	4606      	mov	r6, r0
 801262c:	d102      	bne.n	8012634 <__cvt+0x60>
 801262e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012630:	07db      	lsls	r3, r3, #31
 8012632:	d522      	bpl.n	801267a <__cvt+0xa6>
 8012634:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012638:	eb06 0905 	add.w	r9, r6, r5
 801263c:	d110      	bne.n	8012660 <__cvt+0x8c>
 801263e:	7833      	ldrb	r3, [r6, #0]
 8012640:	2b30      	cmp	r3, #48	; 0x30
 8012642:	d10a      	bne.n	801265a <__cvt+0x86>
 8012644:	2200      	movs	r2, #0
 8012646:	2300      	movs	r3, #0
 8012648:	4620      	mov	r0, r4
 801264a:	4639      	mov	r1, r7
 801264c:	f7ee f9b6 	bl	80009bc <__aeabi_dcmpeq>
 8012650:	b918      	cbnz	r0, 801265a <__cvt+0x86>
 8012652:	f1c5 0501 	rsb	r5, r5, #1
 8012656:	f8ca 5000 	str.w	r5, [sl]
 801265a:	f8da 3000 	ldr.w	r3, [sl]
 801265e:	4499      	add	r9, r3
 8012660:	2200      	movs	r2, #0
 8012662:	2300      	movs	r3, #0
 8012664:	4620      	mov	r0, r4
 8012666:	4639      	mov	r1, r7
 8012668:	f7ee f9a8 	bl	80009bc <__aeabi_dcmpeq>
 801266c:	b108      	cbz	r0, 8012672 <__cvt+0x9e>
 801266e:	f8cd 901c 	str.w	r9, [sp, #28]
 8012672:	2230      	movs	r2, #48	; 0x30
 8012674:	9b07      	ldr	r3, [sp, #28]
 8012676:	454b      	cmp	r3, r9
 8012678:	d307      	bcc.n	801268a <__cvt+0xb6>
 801267a:	4630      	mov	r0, r6
 801267c:	9b07      	ldr	r3, [sp, #28]
 801267e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012680:	1b9b      	subs	r3, r3, r6
 8012682:	6013      	str	r3, [r2, #0]
 8012684:	b008      	add	sp, #32
 8012686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801268a:	1c59      	adds	r1, r3, #1
 801268c:	9107      	str	r1, [sp, #28]
 801268e:	701a      	strb	r2, [r3, #0]
 8012690:	e7f0      	b.n	8012674 <__cvt+0xa0>

08012692 <__exponent>:
 8012692:	4603      	mov	r3, r0
 8012694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012696:	2900      	cmp	r1, #0
 8012698:	f803 2b02 	strb.w	r2, [r3], #2
 801269c:	bfb6      	itet	lt
 801269e:	222d      	movlt	r2, #45	; 0x2d
 80126a0:	222b      	movge	r2, #43	; 0x2b
 80126a2:	4249      	neglt	r1, r1
 80126a4:	2909      	cmp	r1, #9
 80126a6:	7042      	strb	r2, [r0, #1]
 80126a8:	dd2a      	ble.n	8012700 <__exponent+0x6e>
 80126aa:	f10d 0207 	add.w	r2, sp, #7
 80126ae:	4617      	mov	r7, r2
 80126b0:	260a      	movs	r6, #10
 80126b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80126b6:	4694      	mov	ip, r2
 80126b8:	fb06 1415 	mls	r4, r6, r5, r1
 80126bc:	3430      	adds	r4, #48	; 0x30
 80126be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80126c2:	460c      	mov	r4, r1
 80126c4:	2c63      	cmp	r4, #99	; 0x63
 80126c6:	4629      	mov	r1, r5
 80126c8:	f102 32ff 	add.w	r2, r2, #4294967295
 80126cc:	dcf1      	bgt.n	80126b2 <__exponent+0x20>
 80126ce:	3130      	adds	r1, #48	; 0x30
 80126d0:	f1ac 0402 	sub.w	r4, ip, #2
 80126d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80126d8:	4622      	mov	r2, r4
 80126da:	1c41      	adds	r1, r0, #1
 80126dc:	42ba      	cmp	r2, r7
 80126de:	d30a      	bcc.n	80126f6 <__exponent+0x64>
 80126e0:	f10d 0209 	add.w	r2, sp, #9
 80126e4:	eba2 020c 	sub.w	r2, r2, ip
 80126e8:	42bc      	cmp	r4, r7
 80126ea:	bf88      	it	hi
 80126ec:	2200      	movhi	r2, #0
 80126ee:	4413      	add	r3, r2
 80126f0:	1a18      	subs	r0, r3, r0
 80126f2:	b003      	add	sp, #12
 80126f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80126fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80126fe:	e7ed      	b.n	80126dc <__exponent+0x4a>
 8012700:	2330      	movs	r3, #48	; 0x30
 8012702:	3130      	adds	r1, #48	; 0x30
 8012704:	7083      	strb	r3, [r0, #2]
 8012706:	70c1      	strb	r1, [r0, #3]
 8012708:	1d03      	adds	r3, r0, #4
 801270a:	e7f1      	b.n	80126f0 <__exponent+0x5e>

0801270c <_printf_float>:
 801270c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012710:	b091      	sub	sp, #68	; 0x44
 8012712:	460c      	mov	r4, r1
 8012714:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8012718:	4616      	mov	r6, r2
 801271a:	461f      	mov	r7, r3
 801271c:	4605      	mov	r5, r0
 801271e:	f000 fe3d 	bl	801339c <_localeconv_r>
 8012722:	6803      	ldr	r3, [r0, #0]
 8012724:	4618      	mov	r0, r3
 8012726:	9309      	str	r3, [sp, #36]	; 0x24
 8012728:	f7ed fd1c 	bl	8000164 <strlen>
 801272c:	2300      	movs	r3, #0
 801272e:	930e      	str	r3, [sp, #56]	; 0x38
 8012730:	f8d8 3000 	ldr.w	r3, [r8]
 8012734:	900a      	str	r0, [sp, #40]	; 0x28
 8012736:	3307      	adds	r3, #7
 8012738:	f023 0307 	bic.w	r3, r3, #7
 801273c:	f103 0208 	add.w	r2, r3, #8
 8012740:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012744:	f8d4 b000 	ldr.w	fp, [r4]
 8012748:	f8c8 2000 	str.w	r2, [r8]
 801274c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8012750:	4652      	mov	r2, sl
 8012752:	4643      	mov	r3, r8
 8012754:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012758:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 801275c:	930b      	str	r3, [sp, #44]	; 0x2c
 801275e:	f04f 32ff 	mov.w	r2, #4294967295
 8012762:	4650      	mov	r0, sl
 8012764:	4b9c      	ldr	r3, [pc, #624]	; (80129d8 <_printf_float+0x2cc>)
 8012766:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012768:	f7ee f95a 	bl	8000a20 <__aeabi_dcmpun>
 801276c:	bb70      	cbnz	r0, 80127cc <_printf_float+0xc0>
 801276e:	f04f 32ff 	mov.w	r2, #4294967295
 8012772:	4650      	mov	r0, sl
 8012774:	4b98      	ldr	r3, [pc, #608]	; (80129d8 <_printf_float+0x2cc>)
 8012776:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012778:	f7ee f934 	bl	80009e4 <__aeabi_dcmple>
 801277c:	bb30      	cbnz	r0, 80127cc <_printf_float+0xc0>
 801277e:	2200      	movs	r2, #0
 8012780:	2300      	movs	r3, #0
 8012782:	4650      	mov	r0, sl
 8012784:	4641      	mov	r1, r8
 8012786:	f7ee f923 	bl	80009d0 <__aeabi_dcmplt>
 801278a:	b110      	cbz	r0, 8012792 <_printf_float+0x86>
 801278c:	232d      	movs	r3, #45	; 0x2d
 801278e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012792:	4a92      	ldr	r2, [pc, #584]	; (80129dc <_printf_float+0x2d0>)
 8012794:	4b92      	ldr	r3, [pc, #584]	; (80129e0 <_printf_float+0x2d4>)
 8012796:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801279a:	bf94      	ite	ls
 801279c:	4690      	movls	r8, r2
 801279e:	4698      	movhi	r8, r3
 80127a0:	2303      	movs	r3, #3
 80127a2:	f04f 0a00 	mov.w	sl, #0
 80127a6:	6123      	str	r3, [r4, #16]
 80127a8:	f02b 0304 	bic.w	r3, fp, #4
 80127ac:	6023      	str	r3, [r4, #0]
 80127ae:	4633      	mov	r3, r6
 80127b0:	4621      	mov	r1, r4
 80127b2:	4628      	mov	r0, r5
 80127b4:	9700      	str	r7, [sp, #0]
 80127b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80127b8:	f000 f9d6 	bl	8012b68 <_printf_common>
 80127bc:	3001      	adds	r0, #1
 80127be:	f040 8090 	bne.w	80128e2 <_printf_float+0x1d6>
 80127c2:	f04f 30ff 	mov.w	r0, #4294967295
 80127c6:	b011      	add	sp, #68	; 0x44
 80127c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127cc:	4652      	mov	r2, sl
 80127ce:	4643      	mov	r3, r8
 80127d0:	4650      	mov	r0, sl
 80127d2:	4641      	mov	r1, r8
 80127d4:	f7ee f924 	bl	8000a20 <__aeabi_dcmpun>
 80127d8:	b148      	cbz	r0, 80127ee <_printf_float+0xe2>
 80127da:	f1b8 0f00 	cmp.w	r8, #0
 80127de:	bfb8      	it	lt
 80127e0:	232d      	movlt	r3, #45	; 0x2d
 80127e2:	4a80      	ldr	r2, [pc, #512]	; (80129e4 <_printf_float+0x2d8>)
 80127e4:	bfb8      	it	lt
 80127e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80127ea:	4b7f      	ldr	r3, [pc, #508]	; (80129e8 <_printf_float+0x2dc>)
 80127ec:	e7d3      	b.n	8012796 <_printf_float+0x8a>
 80127ee:	6863      	ldr	r3, [r4, #4]
 80127f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80127f4:	1c5a      	adds	r2, r3, #1
 80127f6:	d142      	bne.n	801287e <_printf_float+0x172>
 80127f8:	2306      	movs	r3, #6
 80127fa:	6063      	str	r3, [r4, #4]
 80127fc:	2200      	movs	r2, #0
 80127fe:	9206      	str	r2, [sp, #24]
 8012800:	aa0e      	add	r2, sp, #56	; 0x38
 8012802:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8012806:	aa0d      	add	r2, sp, #52	; 0x34
 8012808:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 801280c:	9203      	str	r2, [sp, #12]
 801280e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8012812:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012816:	6023      	str	r3, [r4, #0]
 8012818:	6863      	ldr	r3, [r4, #4]
 801281a:	4652      	mov	r2, sl
 801281c:	9300      	str	r3, [sp, #0]
 801281e:	4628      	mov	r0, r5
 8012820:	4643      	mov	r3, r8
 8012822:	910b      	str	r1, [sp, #44]	; 0x2c
 8012824:	f7ff fed6 	bl	80125d4 <__cvt>
 8012828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801282a:	4680      	mov	r8, r0
 801282c:	2947      	cmp	r1, #71	; 0x47
 801282e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012830:	d108      	bne.n	8012844 <_printf_float+0x138>
 8012832:	1cc8      	adds	r0, r1, #3
 8012834:	db02      	blt.n	801283c <_printf_float+0x130>
 8012836:	6863      	ldr	r3, [r4, #4]
 8012838:	4299      	cmp	r1, r3
 801283a:	dd40      	ble.n	80128be <_printf_float+0x1b2>
 801283c:	f1a9 0902 	sub.w	r9, r9, #2
 8012840:	fa5f f989 	uxtb.w	r9, r9
 8012844:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012848:	d81f      	bhi.n	801288a <_printf_float+0x17e>
 801284a:	464a      	mov	r2, r9
 801284c:	3901      	subs	r1, #1
 801284e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012852:	910d      	str	r1, [sp, #52]	; 0x34
 8012854:	f7ff ff1d 	bl	8012692 <__exponent>
 8012858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801285a:	4682      	mov	sl, r0
 801285c:	1813      	adds	r3, r2, r0
 801285e:	2a01      	cmp	r2, #1
 8012860:	6123      	str	r3, [r4, #16]
 8012862:	dc02      	bgt.n	801286a <_printf_float+0x15e>
 8012864:	6822      	ldr	r2, [r4, #0]
 8012866:	07d2      	lsls	r2, r2, #31
 8012868:	d501      	bpl.n	801286e <_printf_float+0x162>
 801286a:	3301      	adds	r3, #1
 801286c:	6123      	str	r3, [r4, #16]
 801286e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8012872:	2b00      	cmp	r3, #0
 8012874:	d09b      	beq.n	80127ae <_printf_float+0xa2>
 8012876:	232d      	movs	r3, #45	; 0x2d
 8012878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801287c:	e797      	b.n	80127ae <_printf_float+0xa2>
 801287e:	2947      	cmp	r1, #71	; 0x47
 8012880:	d1bc      	bne.n	80127fc <_printf_float+0xf0>
 8012882:	2b00      	cmp	r3, #0
 8012884:	d1ba      	bne.n	80127fc <_printf_float+0xf0>
 8012886:	2301      	movs	r3, #1
 8012888:	e7b7      	b.n	80127fa <_printf_float+0xee>
 801288a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801288e:	d118      	bne.n	80128c2 <_printf_float+0x1b6>
 8012890:	2900      	cmp	r1, #0
 8012892:	6863      	ldr	r3, [r4, #4]
 8012894:	dd0b      	ble.n	80128ae <_printf_float+0x1a2>
 8012896:	6121      	str	r1, [r4, #16]
 8012898:	b913      	cbnz	r3, 80128a0 <_printf_float+0x194>
 801289a:	6822      	ldr	r2, [r4, #0]
 801289c:	07d0      	lsls	r0, r2, #31
 801289e:	d502      	bpl.n	80128a6 <_printf_float+0x19a>
 80128a0:	3301      	adds	r3, #1
 80128a2:	440b      	add	r3, r1
 80128a4:	6123      	str	r3, [r4, #16]
 80128a6:	f04f 0a00 	mov.w	sl, #0
 80128aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80128ac:	e7df      	b.n	801286e <_printf_float+0x162>
 80128ae:	b913      	cbnz	r3, 80128b6 <_printf_float+0x1aa>
 80128b0:	6822      	ldr	r2, [r4, #0]
 80128b2:	07d2      	lsls	r2, r2, #31
 80128b4:	d501      	bpl.n	80128ba <_printf_float+0x1ae>
 80128b6:	3302      	adds	r3, #2
 80128b8:	e7f4      	b.n	80128a4 <_printf_float+0x198>
 80128ba:	2301      	movs	r3, #1
 80128bc:	e7f2      	b.n	80128a4 <_printf_float+0x198>
 80128be:	f04f 0967 	mov.w	r9, #103	; 0x67
 80128c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128c4:	4299      	cmp	r1, r3
 80128c6:	db05      	blt.n	80128d4 <_printf_float+0x1c8>
 80128c8:	6823      	ldr	r3, [r4, #0]
 80128ca:	6121      	str	r1, [r4, #16]
 80128cc:	07d8      	lsls	r0, r3, #31
 80128ce:	d5ea      	bpl.n	80128a6 <_printf_float+0x19a>
 80128d0:	1c4b      	adds	r3, r1, #1
 80128d2:	e7e7      	b.n	80128a4 <_printf_float+0x198>
 80128d4:	2900      	cmp	r1, #0
 80128d6:	bfcc      	ite	gt
 80128d8:	2201      	movgt	r2, #1
 80128da:	f1c1 0202 	rsble	r2, r1, #2
 80128de:	4413      	add	r3, r2
 80128e0:	e7e0      	b.n	80128a4 <_printf_float+0x198>
 80128e2:	6823      	ldr	r3, [r4, #0]
 80128e4:	055a      	lsls	r2, r3, #21
 80128e6:	d407      	bmi.n	80128f8 <_printf_float+0x1ec>
 80128e8:	6923      	ldr	r3, [r4, #16]
 80128ea:	4642      	mov	r2, r8
 80128ec:	4631      	mov	r1, r6
 80128ee:	4628      	mov	r0, r5
 80128f0:	47b8      	blx	r7
 80128f2:	3001      	adds	r0, #1
 80128f4:	d12b      	bne.n	801294e <_printf_float+0x242>
 80128f6:	e764      	b.n	80127c2 <_printf_float+0xb6>
 80128f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80128fc:	f240 80dd 	bls.w	8012aba <_printf_float+0x3ae>
 8012900:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012904:	2200      	movs	r2, #0
 8012906:	2300      	movs	r3, #0
 8012908:	f7ee f858 	bl	80009bc <__aeabi_dcmpeq>
 801290c:	2800      	cmp	r0, #0
 801290e:	d033      	beq.n	8012978 <_printf_float+0x26c>
 8012910:	2301      	movs	r3, #1
 8012912:	4631      	mov	r1, r6
 8012914:	4628      	mov	r0, r5
 8012916:	4a35      	ldr	r2, [pc, #212]	; (80129ec <_printf_float+0x2e0>)
 8012918:	47b8      	blx	r7
 801291a:	3001      	adds	r0, #1
 801291c:	f43f af51 	beq.w	80127c2 <_printf_float+0xb6>
 8012920:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012924:	429a      	cmp	r2, r3
 8012926:	db02      	blt.n	801292e <_printf_float+0x222>
 8012928:	6823      	ldr	r3, [r4, #0]
 801292a:	07d8      	lsls	r0, r3, #31
 801292c:	d50f      	bpl.n	801294e <_printf_float+0x242>
 801292e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012932:	4631      	mov	r1, r6
 8012934:	4628      	mov	r0, r5
 8012936:	47b8      	blx	r7
 8012938:	3001      	adds	r0, #1
 801293a:	f43f af42 	beq.w	80127c2 <_printf_float+0xb6>
 801293e:	f04f 0800 	mov.w	r8, #0
 8012942:	f104 091a 	add.w	r9, r4, #26
 8012946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012948:	3b01      	subs	r3, #1
 801294a:	4543      	cmp	r3, r8
 801294c:	dc09      	bgt.n	8012962 <_printf_float+0x256>
 801294e:	6823      	ldr	r3, [r4, #0]
 8012950:	079b      	lsls	r3, r3, #30
 8012952:	f100 8104 	bmi.w	8012b5e <_printf_float+0x452>
 8012956:	68e0      	ldr	r0, [r4, #12]
 8012958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801295a:	4298      	cmp	r0, r3
 801295c:	bfb8      	it	lt
 801295e:	4618      	movlt	r0, r3
 8012960:	e731      	b.n	80127c6 <_printf_float+0xba>
 8012962:	2301      	movs	r3, #1
 8012964:	464a      	mov	r2, r9
 8012966:	4631      	mov	r1, r6
 8012968:	4628      	mov	r0, r5
 801296a:	47b8      	blx	r7
 801296c:	3001      	adds	r0, #1
 801296e:	f43f af28 	beq.w	80127c2 <_printf_float+0xb6>
 8012972:	f108 0801 	add.w	r8, r8, #1
 8012976:	e7e6      	b.n	8012946 <_printf_float+0x23a>
 8012978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801297a:	2b00      	cmp	r3, #0
 801297c:	dc38      	bgt.n	80129f0 <_printf_float+0x2e4>
 801297e:	2301      	movs	r3, #1
 8012980:	4631      	mov	r1, r6
 8012982:	4628      	mov	r0, r5
 8012984:	4a19      	ldr	r2, [pc, #100]	; (80129ec <_printf_float+0x2e0>)
 8012986:	47b8      	blx	r7
 8012988:	3001      	adds	r0, #1
 801298a:	f43f af1a 	beq.w	80127c2 <_printf_float+0xb6>
 801298e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8012992:	4313      	orrs	r3, r2
 8012994:	d102      	bne.n	801299c <_printf_float+0x290>
 8012996:	6823      	ldr	r3, [r4, #0]
 8012998:	07d9      	lsls	r1, r3, #31
 801299a:	d5d8      	bpl.n	801294e <_printf_float+0x242>
 801299c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80129a0:	4631      	mov	r1, r6
 80129a2:	4628      	mov	r0, r5
 80129a4:	47b8      	blx	r7
 80129a6:	3001      	adds	r0, #1
 80129a8:	f43f af0b 	beq.w	80127c2 <_printf_float+0xb6>
 80129ac:	f04f 0900 	mov.w	r9, #0
 80129b0:	f104 0a1a 	add.w	sl, r4, #26
 80129b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129b6:	425b      	negs	r3, r3
 80129b8:	454b      	cmp	r3, r9
 80129ba:	dc01      	bgt.n	80129c0 <_printf_float+0x2b4>
 80129bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129be:	e794      	b.n	80128ea <_printf_float+0x1de>
 80129c0:	2301      	movs	r3, #1
 80129c2:	4652      	mov	r2, sl
 80129c4:	4631      	mov	r1, r6
 80129c6:	4628      	mov	r0, r5
 80129c8:	47b8      	blx	r7
 80129ca:	3001      	adds	r0, #1
 80129cc:	f43f aef9 	beq.w	80127c2 <_printf_float+0xb6>
 80129d0:	f109 0901 	add.w	r9, r9, #1
 80129d4:	e7ee      	b.n	80129b4 <_printf_float+0x2a8>
 80129d6:	bf00      	nop
 80129d8:	7fefffff 	.word	0x7fefffff
 80129dc:	080162cf 	.word	0x080162cf
 80129e0:	080162d3 	.word	0x080162d3
 80129e4:	080162d7 	.word	0x080162d7
 80129e8:	080162db 	.word	0x080162db
 80129ec:	08016553 	.word	0x08016553
 80129f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80129f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80129f4:	429a      	cmp	r2, r3
 80129f6:	bfa8      	it	ge
 80129f8:	461a      	movge	r2, r3
 80129fa:	2a00      	cmp	r2, #0
 80129fc:	4691      	mov	r9, r2
 80129fe:	dc37      	bgt.n	8012a70 <_printf_float+0x364>
 8012a00:	f04f 0b00 	mov.w	fp, #0
 8012a04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a08:	f104 021a 	add.w	r2, r4, #26
 8012a0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012a10:	ebaa 0309 	sub.w	r3, sl, r9
 8012a14:	455b      	cmp	r3, fp
 8012a16:	dc33      	bgt.n	8012a80 <_printf_float+0x374>
 8012a18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012a1c:	429a      	cmp	r2, r3
 8012a1e:	db3b      	blt.n	8012a98 <_printf_float+0x38c>
 8012a20:	6823      	ldr	r3, [r4, #0]
 8012a22:	07da      	lsls	r2, r3, #31
 8012a24:	d438      	bmi.n	8012a98 <_printf_float+0x38c>
 8012a26:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8012a2a:	eba2 0903 	sub.w	r9, r2, r3
 8012a2e:	eba2 020a 	sub.w	r2, r2, sl
 8012a32:	4591      	cmp	r9, r2
 8012a34:	bfa8      	it	ge
 8012a36:	4691      	movge	r9, r2
 8012a38:	f1b9 0f00 	cmp.w	r9, #0
 8012a3c:	dc34      	bgt.n	8012aa8 <_printf_float+0x39c>
 8012a3e:	f04f 0800 	mov.w	r8, #0
 8012a42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a46:	f104 0a1a 	add.w	sl, r4, #26
 8012a4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012a4e:	1a9b      	subs	r3, r3, r2
 8012a50:	eba3 0309 	sub.w	r3, r3, r9
 8012a54:	4543      	cmp	r3, r8
 8012a56:	f77f af7a 	ble.w	801294e <_printf_float+0x242>
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	4652      	mov	r2, sl
 8012a5e:	4631      	mov	r1, r6
 8012a60:	4628      	mov	r0, r5
 8012a62:	47b8      	blx	r7
 8012a64:	3001      	adds	r0, #1
 8012a66:	f43f aeac 	beq.w	80127c2 <_printf_float+0xb6>
 8012a6a:	f108 0801 	add.w	r8, r8, #1
 8012a6e:	e7ec      	b.n	8012a4a <_printf_float+0x33e>
 8012a70:	4613      	mov	r3, r2
 8012a72:	4631      	mov	r1, r6
 8012a74:	4642      	mov	r2, r8
 8012a76:	4628      	mov	r0, r5
 8012a78:	47b8      	blx	r7
 8012a7a:	3001      	adds	r0, #1
 8012a7c:	d1c0      	bne.n	8012a00 <_printf_float+0x2f4>
 8012a7e:	e6a0      	b.n	80127c2 <_printf_float+0xb6>
 8012a80:	2301      	movs	r3, #1
 8012a82:	4631      	mov	r1, r6
 8012a84:	4628      	mov	r0, r5
 8012a86:	920b      	str	r2, [sp, #44]	; 0x2c
 8012a88:	47b8      	blx	r7
 8012a8a:	3001      	adds	r0, #1
 8012a8c:	f43f ae99 	beq.w	80127c2 <_printf_float+0xb6>
 8012a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012a92:	f10b 0b01 	add.w	fp, fp, #1
 8012a96:	e7b9      	b.n	8012a0c <_printf_float+0x300>
 8012a98:	4631      	mov	r1, r6
 8012a9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a9e:	4628      	mov	r0, r5
 8012aa0:	47b8      	blx	r7
 8012aa2:	3001      	adds	r0, #1
 8012aa4:	d1bf      	bne.n	8012a26 <_printf_float+0x31a>
 8012aa6:	e68c      	b.n	80127c2 <_printf_float+0xb6>
 8012aa8:	464b      	mov	r3, r9
 8012aaa:	4631      	mov	r1, r6
 8012aac:	4628      	mov	r0, r5
 8012aae:	eb08 020a 	add.w	r2, r8, sl
 8012ab2:	47b8      	blx	r7
 8012ab4:	3001      	adds	r0, #1
 8012ab6:	d1c2      	bne.n	8012a3e <_printf_float+0x332>
 8012ab8:	e683      	b.n	80127c2 <_printf_float+0xb6>
 8012aba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012abc:	2a01      	cmp	r2, #1
 8012abe:	dc01      	bgt.n	8012ac4 <_printf_float+0x3b8>
 8012ac0:	07db      	lsls	r3, r3, #31
 8012ac2:	d539      	bpl.n	8012b38 <_printf_float+0x42c>
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	4642      	mov	r2, r8
 8012ac8:	4631      	mov	r1, r6
 8012aca:	4628      	mov	r0, r5
 8012acc:	47b8      	blx	r7
 8012ace:	3001      	adds	r0, #1
 8012ad0:	f43f ae77 	beq.w	80127c2 <_printf_float+0xb6>
 8012ad4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012ad8:	4631      	mov	r1, r6
 8012ada:	4628      	mov	r0, r5
 8012adc:	47b8      	blx	r7
 8012ade:	3001      	adds	r0, #1
 8012ae0:	f43f ae6f 	beq.w	80127c2 <_printf_float+0xb6>
 8012ae4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012ae8:	2200      	movs	r2, #0
 8012aea:	2300      	movs	r3, #0
 8012aec:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8012af0:	f7ed ff64 	bl	80009bc <__aeabi_dcmpeq>
 8012af4:	b9d8      	cbnz	r0, 8012b2e <_printf_float+0x422>
 8012af6:	f109 33ff 	add.w	r3, r9, #4294967295
 8012afa:	f108 0201 	add.w	r2, r8, #1
 8012afe:	4631      	mov	r1, r6
 8012b00:	4628      	mov	r0, r5
 8012b02:	47b8      	blx	r7
 8012b04:	3001      	adds	r0, #1
 8012b06:	d10e      	bne.n	8012b26 <_printf_float+0x41a>
 8012b08:	e65b      	b.n	80127c2 <_printf_float+0xb6>
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	464a      	mov	r2, r9
 8012b0e:	4631      	mov	r1, r6
 8012b10:	4628      	mov	r0, r5
 8012b12:	47b8      	blx	r7
 8012b14:	3001      	adds	r0, #1
 8012b16:	f43f ae54 	beq.w	80127c2 <_printf_float+0xb6>
 8012b1a:	f108 0801 	add.w	r8, r8, #1
 8012b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b20:	3b01      	subs	r3, #1
 8012b22:	4543      	cmp	r3, r8
 8012b24:	dcf1      	bgt.n	8012b0a <_printf_float+0x3fe>
 8012b26:	4653      	mov	r3, sl
 8012b28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012b2c:	e6de      	b.n	80128ec <_printf_float+0x1e0>
 8012b2e:	f04f 0800 	mov.w	r8, #0
 8012b32:	f104 091a 	add.w	r9, r4, #26
 8012b36:	e7f2      	b.n	8012b1e <_printf_float+0x412>
 8012b38:	2301      	movs	r3, #1
 8012b3a:	4642      	mov	r2, r8
 8012b3c:	e7df      	b.n	8012afe <_printf_float+0x3f2>
 8012b3e:	2301      	movs	r3, #1
 8012b40:	464a      	mov	r2, r9
 8012b42:	4631      	mov	r1, r6
 8012b44:	4628      	mov	r0, r5
 8012b46:	47b8      	blx	r7
 8012b48:	3001      	adds	r0, #1
 8012b4a:	f43f ae3a 	beq.w	80127c2 <_printf_float+0xb6>
 8012b4e:	f108 0801 	add.w	r8, r8, #1
 8012b52:	68e3      	ldr	r3, [r4, #12]
 8012b54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012b56:	1a5b      	subs	r3, r3, r1
 8012b58:	4543      	cmp	r3, r8
 8012b5a:	dcf0      	bgt.n	8012b3e <_printf_float+0x432>
 8012b5c:	e6fb      	b.n	8012956 <_printf_float+0x24a>
 8012b5e:	f04f 0800 	mov.w	r8, #0
 8012b62:	f104 0919 	add.w	r9, r4, #25
 8012b66:	e7f4      	b.n	8012b52 <_printf_float+0x446>

08012b68 <_printf_common>:
 8012b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b6c:	4616      	mov	r6, r2
 8012b6e:	4699      	mov	r9, r3
 8012b70:	688a      	ldr	r2, [r1, #8]
 8012b72:	690b      	ldr	r3, [r1, #16]
 8012b74:	4607      	mov	r7, r0
 8012b76:	4293      	cmp	r3, r2
 8012b78:	bfb8      	it	lt
 8012b7a:	4613      	movlt	r3, r2
 8012b7c:	6033      	str	r3, [r6, #0]
 8012b7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012b82:	460c      	mov	r4, r1
 8012b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012b88:	b10a      	cbz	r2, 8012b8e <_printf_common+0x26>
 8012b8a:	3301      	adds	r3, #1
 8012b8c:	6033      	str	r3, [r6, #0]
 8012b8e:	6823      	ldr	r3, [r4, #0]
 8012b90:	0699      	lsls	r1, r3, #26
 8012b92:	bf42      	ittt	mi
 8012b94:	6833      	ldrmi	r3, [r6, #0]
 8012b96:	3302      	addmi	r3, #2
 8012b98:	6033      	strmi	r3, [r6, #0]
 8012b9a:	6825      	ldr	r5, [r4, #0]
 8012b9c:	f015 0506 	ands.w	r5, r5, #6
 8012ba0:	d106      	bne.n	8012bb0 <_printf_common+0x48>
 8012ba2:	f104 0a19 	add.w	sl, r4, #25
 8012ba6:	68e3      	ldr	r3, [r4, #12]
 8012ba8:	6832      	ldr	r2, [r6, #0]
 8012baa:	1a9b      	subs	r3, r3, r2
 8012bac:	42ab      	cmp	r3, r5
 8012bae:	dc2b      	bgt.n	8012c08 <_printf_common+0xa0>
 8012bb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012bb4:	1e13      	subs	r3, r2, #0
 8012bb6:	6822      	ldr	r2, [r4, #0]
 8012bb8:	bf18      	it	ne
 8012bba:	2301      	movne	r3, #1
 8012bbc:	0692      	lsls	r2, r2, #26
 8012bbe:	d430      	bmi.n	8012c22 <_printf_common+0xba>
 8012bc0:	4649      	mov	r1, r9
 8012bc2:	4638      	mov	r0, r7
 8012bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012bc8:	47c0      	blx	r8
 8012bca:	3001      	adds	r0, #1
 8012bcc:	d023      	beq.n	8012c16 <_printf_common+0xae>
 8012bce:	6823      	ldr	r3, [r4, #0]
 8012bd0:	6922      	ldr	r2, [r4, #16]
 8012bd2:	f003 0306 	and.w	r3, r3, #6
 8012bd6:	2b04      	cmp	r3, #4
 8012bd8:	bf14      	ite	ne
 8012bda:	2500      	movne	r5, #0
 8012bdc:	6833      	ldreq	r3, [r6, #0]
 8012bde:	f04f 0600 	mov.w	r6, #0
 8012be2:	bf08      	it	eq
 8012be4:	68e5      	ldreq	r5, [r4, #12]
 8012be6:	f104 041a 	add.w	r4, r4, #26
 8012bea:	bf08      	it	eq
 8012bec:	1aed      	subeq	r5, r5, r3
 8012bee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8012bf2:	bf08      	it	eq
 8012bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012bf8:	4293      	cmp	r3, r2
 8012bfa:	bfc4      	itt	gt
 8012bfc:	1a9b      	subgt	r3, r3, r2
 8012bfe:	18ed      	addgt	r5, r5, r3
 8012c00:	42b5      	cmp	r5, r6
 8012c02:	d11a      	bne.n	8012c3a <_printf_common+0xd2>
 8012c04:	2000      	movs	r0, #0
 8012c06:	e008      	b.n	8012c1a <_printf_common+0xb2>
 8012c08:	2301      	movs	r3, #1
 8012c0a:	4652      	mov	r2, sl
 8012c0c:	4649      	mov	r1, r9
 8012c0e:	4638      	mov	r0, r7
 8012c10:	47c0      	blx	r8
 8012c12:	3001      	adds	r0, #1
 8012c14:	d103      	bne.n	8012c1e <_printf_common+0xb6>
 8012c16:	f04f 30ff 	mov.w	r0, #4294967295
 8012c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c1e:	3501      	adds	r5, #1
 8012c20:	e7c1      	b.n	8012ba6 <_printf_common+0x3e>
 8012c22:	2030      	movs	r0, #48	; 0x30
 8012c24:	18e1      	adds	r1, r4, r3
 8012c26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012c2a:	1c5a      	adds	r2, r3, #1
 8012c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012c30:	4422      	add	r2, r4
 8012c32:	3302      	adds	r3, #2
 8012c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012c38:	e7c2      	b.n	8012bc0 <_printf_common+0x58>
 8012c3a:	2301      	movs	r3, #1
 8012c3c:	4622      	mov	r2, r4
 8012c3e:	4649      	mov	r1, r9
 8012c40:	4638      	mov	r0, r7
 8012c42:	47c0      	blx	r8
 8012c44:	3001      	adds	r0, #1
 8012c46:	d0e6      	beq.n	8012c16 <_printf_common+0xae>
 8012c48:	3601      	adds	r6, #1
 8012c4a:	e7d9      	b.n	8012c00 <_printf_common+0x98>

08012c4c <_printf_i>:
 8012c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c50:	7e0f      	ldrb	r7, [r1, #24]
 8012c52:	4691      	mov	r9, r2
 8012c54:	2f78      	cmp	r7, #120	; 0x78
 8012c56:	4680      	mov	r8, r0
 8012c58:	460c      	mov	r4, r1
 8012c5a:	469a      	mov	sl, r3
 8012c5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012c5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012c62:	d807      	bhi.n	8012c74 <_printf_i+0x28>
 8012c64:	2f62      	cmp	r7, #98	; 0x62
 8012c66:	d80a      	bhi.n	8012c7e <_printf_i+0x32>
 8012c68:	2f00      	cmp	r7, #0
 8012c6a:	f000 80d5 	beq.w	8012e18 <_printf_i+0x1cc>
 8012c6e:	2f58      	cmp	r7, #88	; 0x58
 8012c70:	f000 80c1 	beq.w	8012df6 <_printf_i+0x1aa>
 8012c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012c7c:	e03a      	b.n	8012cf4 <_printf_i+0xa8>
 8012c7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012c82:	2b15      	cmp	r3, #21
 8012c84:	d8f6      	bhi.n	8012c74 <_printf_i+0x28>
 8012c86:	a101      	add	r1, pc, #4	; (adr r1, 8012c8c <_printf_i+0x40>)
 8012c88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012c8c:	08012ce5 	.word	0x08012ce5
 8012c90:	08012cf9 	.word	0x08012cf9
 8012c94:	08012c75 	.word	0x08012c75
 8012c98:	08012c75 	.word	0x08012c75
 8012c9c:	08012c75 	.word	0x08012c75
 8012ca0:	08012c75 	.word	0x08012c75
 8012ca4:	08012cf9 	.word	0x08012cf9
 8012ca8:	08012c75 	.word	0x08012c75
 8012cac:	08012c75 	.word	0x08012c75
 8012cb0:	08012c75 	.word	0x08012c75
 8012cb4:	08012c75 	.word	0x08012c75
 8012cb8:	08012dff 	.word	0x08012dff
 8012cbc:	08012d25 	.word	0x08012d25
 8012cc0:	08012db9 	.word	0x08012db9
 8012cc4:	08012c75 	.word	0x08012c75
 8012cc8:	08012c75 	.word	0x08012c75
 8012ccc:	08012e21 	.word	0x08012e21
 8012cd0:	08012c75 	.word	0x08012c75
 8012cd4:	08012d25 	.word	0x08012d25
 8012cd8:	08012c75 	.word	0x08012c75
 8012cdc:	08012c75 	.word	0x08012c75
 8012ce0:	08012dc1 	.word	0x08012dc1
 8012ce4:	682b      	ldr	r3, [r5, #0]
 8012ce6:	1d1a      	adds	r2, r3, #4
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	602a      	str	r2, [r5, #0]
 8012cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012cf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012cf4:	2301      	movs	r3, #1
 8012cf6:	e0a0      	b.n	8012e3a <_printf_i+0x1ee>
 8012cf8:	6820      	ldr	r0, [r4, #0]
 8012cfa:	682b      	ldr	r3, [r5, #0]
 8012cfc:	0607      	lsls	r7, r0, #24
 8012cfe:	f103 0104 	add.w	r1, r3, #4
 8012d02:	6029      	str	r1, [r5, #0]
 8012d04:	d501      	bpl.n	8012d0a <_printf_i+0xbe>
 8012d06:	681e      	ldr	r6, [r3, #0]
 8012d08:	e003      	b.n	8012d12 <_printf_i+0xc6>
 8012d0a:	0646      	lsls	r6, r0, #25
 8012d0c:	d5fb      	bpl.n	8012d06 <_printf_i+0xba>
 8012d0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012d12:	2e00      	cmp	r6, #0
 8012d14:	da03      	bge.n	8012d1e <_printf_i+0xd2>
 8012d16:	232d      	movs	r3, #45	; 0x2d
 8012d18:	4276      	negs	r6, r6
 8012d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d1e:	230a      	movs	r3, #10
 8012d20:	4859      	ldr	r0, [pc, #356]	; (8012e88 <_printf_i+0x23c>)
 8012d22:	e012      	b.n	8012d4a <_printf_i+0xfe>
 8012d24:	682b      	ldr	r3, [r5, #0]
 8012d26:	6820      	ldr	r0, [r4, #0]
 8012d28:	1d19      	adds	r1, r3, #4
 8012d2a:	6029      	str	r1, [r5, #0]
 8012d2c:	0605      	lsls	r5, r0, #24
 8012d2e:	d501      	bpl.n	8012d34 <_printf_i+0xe8>
 8012d30:	681e      	ldr	r6, [r3, #0]
 8012d32:	e002      	b.n	8012d3a <_printf_i+0xee>
 8012d34:	0641      	lsls	r1, r0, #25
 8012d36:	d5fb      	bpl.n	8012d30 <_printf_i+0xe4>
 8012d38:	881e      	ldrh	r6, [r3, #0]
 8012d3a:	2f6f      	cmp	r7, #111	; 0x6f
 8012d3c:	bf0c      	ite	eq
 8012d3e:	2308      	moveq	r3, #8
 8012d40:	230a      	movne	r3, #10
 8012d42:	4851      	ldr	r0, [pc, #324]	; (8012e88 <_printf_i+0x23c>)
 8012d44:	2100      	movs	r1, #0
 8012d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012d4a:	6865      	ldr	r5, [r4, #4]
 8012d4c:	2d00      	cmp	r5, #0
 8012d4e:	bfa8      	it	ge
 8012d50:	6821      	ldrge	r1, [r4, #0]
 8012d52:	60a5      	str	r5, [r4, #8]
 8012d54:	bfa4      	itt	ge
 8012d56:	f021 0104 	bicge.w	r1, r1, #4
 8012d5a:	6021      	strge	r1, [r4, #0]
 8012d5c:	b90e      	cbnz	r6, 8012d62 <_printf_i+0x116>
 8012d5e:	2d00      	cmp	r5, #0
 8012d60:	d04b      	beq.n	8012dfa <_printf_i+0x1ae>
 8012d62:	4615      	mov	r5, r2
 8012d64:	fbb6 f1f3 	udiv	r1, r6, r3
 8012d68:	fb03 6711 	mls	r7, r3, r1, r6
 8012d6c:	5dc7      	ldrb	r7, [r0, r7]
 8012d6e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012d72:	4637      	mov	r7, r6
 8012d74:	42bb      	cmp	r3, r7
 8012d76:	460e      	mov	r6, r1
 8012d78:	d9f4      	bls.n	8012d64 <_printf_i+0x118>
 8012d7a:	2b08      	cmp	r3, #8
 8012d7c:	d10b      	bne.n	8012d96 <_printf_i+0x14a>
 8012d7e:	6823      	ldr	r3, [r4, #0]
 8012d80:	07de      	lsls	r6, r3, #31
 8012d82:	d508      	bpl.n	8012d96 <_printf_i+0x14a>
 8012d84:	6923      	ldr	r3, [r4, #16]
 8012d86:	6861      	ldr	r1, [r4, #4]
 8012d88:	4299      	cmp	r1, r3
 8012d8a:	bfde      	ittt	le
 8012d8c:	2330      	movle	r3, #48	; 0x30
 8012d8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012d92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012d96:	1b52      	subs	r2, r2, r5
 8012d98:	6122      	str	r2, [r4, #16]
 8012d9a:	464b      	mov	r3, r9
 8012d9c:	4621      	mov	r1, r4
 8012d9e:	4640      	mov	r0, r8
 8012da0:	f8cd a000 	str.w	sl, [sp]
 8012da4:	aa03      	add	r2, sp, #12
 8012da6:	f7ff fedf 	bl	8012b68 <_printf_common>
 8012daa:	3001      	adds	r0, #1
 8012dac:	d14a      	bne.n	8012e44 <_printf_i+0x1f8>
 8012dae:	f04f 30ff 	mov.w	r0, #4294967295
 8012db2:	b004      	add	sp, #16
 8012db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012db8:	6823      	ldr	r3, [r4, #0]
 8012dba:	f043 0320 	orr.w	r3, r3, #32
 8012dbe:	6023      	str	r3, [r4, #0]
 8012dc0:	2778      	movs	r7, #120	; 0x78
 8012dc2:	4832      	ldr	r0, [pc, #200]	; (8012e8c <_printf_i+0x240>)
 8012dc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012dc8:	6823      	ldr	r3, [r4, #0]
 8012dca:	6829      	ldr	r1, [r5, #0]
 8012dcc:	061f      	lsls	r7, r3, #24
 8012dce:	f851 6b04 	ldr.w	r6, [r1], #4
 8012dd2:	d402      	bmi.n	8012dda <_printf_i+0x18e>
 8012dd4:	065f      	lsls	r7, r3, #25
 8012dd6:	bf48      	it	mi
 8012dd8:	b2b6      	uxthmi	r6, r6
 8012dda:	07df      	lsls	r7, r3, #31
 8012ddc:	bf48      	it	mi
 8012dde:	f043 0320 	orrmi.w	r3, r3, #32
 8012de2:	6029      	str	r1, [r5, #0]
 8012de4:	bf48      	it	mi
 8012de6:	6023      	strmi	r3, [r4, #0]
 8012de8:	b91e      	cbnz	r6, 8012df2 <_printf_i+0x1a6>
 8012dea:	6823      	ldr	r3, [r4, #0]
 8012dec:	f023 0320 	bic.w	r3, r3, #32
 8012df0:	6023      	str	r3, [r4, #0]
 8012df2:	2310      	movs	r3, #16
 8012df4:	e7a6      	b.n	8012d44 <_printf_i+0xf8>
 8012df6:	4824      	ldr	r0, [pc, #144]	; (8012e88 <_printf_i+0x23c>)
 8012df8:	e7e4      	b.n	8012dc4 <_printf_i+0x178>
 8012dfa:	4615      	mov	r5, r2
 8012dfc:	e7bd      	b.n	8012d7a <_printf_i+0x12e>
 8012dfe:	682b      	ldr	r3, [r5, #0]
 8012e00:	6826      	ldr	r6, [r4, #0]
 8012e02:	1d18      	adds	r0, r3, #4
 8012e04:	6961      	ldr	r1, [r4, #20]
 8012e06:	6028      	str	r0, [r5, #0]
 8012e08:	0635      	lsls	r5, r6, #24
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	d501      	bpl.n	8012e12 <_printf_i+0x1c6>
 8012e0e:	6019      	str	r1, [r3, #0]
 8012e10:	e002      	b.n	8012e18 <_printf_i+0x1cc>
 8012e12:	0670      	lsls	r0, r6, #25
 8012e14:	d5fb      	bpl.n	8012e0e <_printf_i+0x1c2>
 8012e16:	8019      	strh	r1, [r3, #0]
 8012e18:	2300      	movs	r3, #0
 8012e1a:	4615      	mov	r5, r2
 8012e1c:	6123      	str	r3, [r4, #16]
 8012e1e:	e7bc      	b.n	8012d9a <_printf_i+0x14e>
 8012e20:	682b      	ldr	r3, [r5, #0]
 8012e22:	2100      	movs	r1, #0
 8012e24:	1d1a      	adds	r2, r3, #4
 8012e26:	602a      	str	r2, [r5, #0]
 8012e28:	681d      	ldr	r5, [r3, #0]
 8012e2a:	6862      	ldr	r2, [r4, #4]
 8012e2c:	4628      	mov	r0, r5
 8012e2e:	f000 fb44 	bl	80134ba <memchr>
 8012e32:	b108      	cbz	r0, 8012e38 <_printf_i+0x1ec>
 8012e34:	1b40      	subs	r0, r0, r5
 8012e36:	6060      	str	r0, [r4, #4]
 8012e38:	6863      	ldr	r3, [r4, #4]
 8012e3a:	6123      	str	r3, [r4, #16]
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e42:	e7aa      	b.n	8012d9a <_printf_i+0x14e>
 8012e44:	462a      	mov	r2, r5
 8012e46:	4649      	mov	r1, r9
 8012e48:	4640      	mov	r0, r8
 8012e4a:	6923      	ldr	r3, [r4, #16]
 8012e4c:	47d0      	blx	sl
 8012e4e:	3001      	adds	r0, #1
 8012e50:	d0ad      	beq.n	8012dae <_printf_i+0x162>
 8012e52:	6823      	ldr	r3, [r4, #0]
 8012e54:	079b      	lsls	r3, r3, #30
 8012e56:	d413      	bmi.n	8012e80 <_printf_i+0x234>
 8012e58:	68e0      	ldr	r0, [r4, #12]
 8012e5a:	9b03      	ldr	r3, [sp, #12]
 8012e5c:	4298      	cmp	r0, r3
 8012e5e:	bfb8      	it	lt
 8012e60:	4618      	movlt	r0, r3
 8012e62:	e7a6      	b.n	8012db2 <_printf_i+0x166>
 8012e64:	2301      	movs	r3, #1
 8012e66:	4632      	mov	r2, r6
 8012e68:	4649      	mov	r1, r9
 8012e6a:	4640      	mov	r0, r8
 8012e6c:	47d0      	blx	sl
 8012e6e:	3001      	adds	r0, #1
 8012e70:	d09d      	beq.n	8012dae <_printf_i+0x162>
 8012e72:	3501      	adds	r5, #1
 8012e74:	68e3      	ldr	r3, [r4, #12]
 8012e76:	9903      	ldr	r1, [sp, #12]
 8012e78:	1a5b      	subs	r3, r3, r1
 8012e7a:	42ab      	cmp	r3, r5
 8012e7c:	dcf2      	bgt.n	8012e64 <_printf_i+0x218>
 8012e7e:	e7eb      	b.n	8012e58 <_printf_i+0x20c>
 8012e80:	2500      	movs	r5, #0
 8012e82:	f104 0619 	add.w	r6, r4, #25
 8012e86:	e7f5      	b.n	8012e74 <_printf_i+0x228>
 8012e88:	080162df 	.word	0x080162df
 8012e8c:	080162f0 	.word	0x080162f0

08012e90 <std>:
 8012e90:	2300      	movs	r3, #0
 8012e92:	b510      	push	{r4, lr}
 8012e94:	4604      	mov	r4, r0
 8012e96:	e9c0 3300 	strd	r3, r3, [r0]
 8012e9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e9e:	6083      	str	r3, [r0, #8]
 8012ea0:	8181      	strh	r1, [r0, #12]
 8012ea2:	6643      	str	r3, [r0, #100]	; 0x64
 8012ea4:	81c2      	strh	r2, [r0, #14]
 8012ea6:	6183      	str	r3, [r0, #24]
 8012ea8:	4619      	mov	r1, r3
 8012eaa:	2208      	movs	r2, #8
 8012eac:	305c      	adds	r0, #92	; 0x5c
 8012eae:	f000 fa0f 	bl	80132d0 <memset>
 8012eb2:	4b0d      	ldr	r3, [pc, #52]	; (8012ee8 <std+0x58>)
 8012eb4:	6224      	str	r4, [r4, #32]
 8012eb6:	6263      	str	r3, [r4, #36]	; 0x24
 8012eb8:	4b0c      	ldr	r3, [pc, #48]	; (8012eec <std+0x5c>)
 8012eba:	62a3      	str	r3, [r4, #40]	; 0x28
 8012ebc:	4b0c      	ldr	r3, [pc, #48]	; (8012ef0 <std+0x60>)
 8012ebe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012ec0:	4b0c      	ldr	r3, [pc, #48]	; (8012ef4 <std+0x64>)
 8012ec2:	6323      	str	r3, [r4, #48]	; 0x30
 8012ec4:	4b0c      	ldr	r3, [pc, #48]	; (8012ef8 <std+0x68>)
 8012ec6:	429c      	cmp	r4, r3
 8012ec8:	d006      	beq.n	8012ed8 <std+0x48>
 8012eca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012ece:	4294      	cmp	r4, r2
 8012ed0:	d002      	beq.n	8012ed8 <std+0x48>
 8012ed2:	33d0      	adds	r3, #208	; 0xd0
 8012ed4:	429c      	cmp	r4, r3
 8012ed6:	d105      	bne.n	8012ee4 <std+0x54>
 8012ed8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ee0:	f000 bae0 	b.w	80134a4 <__retarget_lock_init_recursive>
 8012ee4:	bd10      	pop	{r4, pc}
 8012ee6:	bf00      	nop
 8012ee8:	080130a9 	.word	0x080130a9
 8012eec:	080130cf 	.word	0x080130cf
 8012ef0:	08013107 	.word	0x08013107
 8012ef4:	0801312b 	.word	0x0801312b
 8012ef8:	200010fc 	.word	0x200010fc

08012efc <stdio_exit_handler>:
 8012efc:	4a02      	ldr	r2, [pc, #8]	; (8012f08 <stdio_exit_handler+0xc>)
 8012efe:	4903      	ldr	r1, [pc, #12]	; (8012f0c <stdio_exit_handler+0x10>)
 8012f00:	4803      	ldr	r0, [pc, #12]	; (8012f10 <stdio_exit_handler+0x14>)
 8012f02:	f000 b869 	b.w	8012fd8 <_fwalk_sglue>
 8012f06:	bf00      	nop
 8012f08:	200001fc 	.word	0x200001fc
 8012f0c:	08015655 	.word	0x08015655
 8012f10:	20000374 	.word	0x20000374

08012f14 <cleanup_stdio>:
 8012f14:	6841      	ldr	r1, [r0, #4]
 8012f16:	4b0c      	ldr	r3, [pc, #48]	; (8012f48 <cleanup_stdio+0x34>)
 8012f18:	b510      	push	{r4, lr}
 8012f1a:	4299      	cmp	r1, r3
 8012f1c:	4604      	mov	r4, r0
 8012f1e:	d001      	beq.n	8012f24 <cleanup_stdio+0x10>
 8012f20:	f002 fb98 	bl	8015654 <_fflush_r>
 8012f24:	68a1      	ldr	r1, [r4, #8]
 8012f26:	4b09      	ldr	r3, [pc, #36]	; (8012f4c <cleanup_stdio+0x38>)
 8012f28:	4299      	cmp	r1, r3
 8012f2a:	d002      	beq.n	8012f32 <cleanup_stdio+0x1e>
 8012f2c:	4620      	mov	r0, r4
 8012f2e:	f002 fb91 	bl	8015654 <_fflush_r>
 8012f32:	68e1      	ldr	r1, [r4, #12]
 8012f34:	4b06      	ldr	r3, [pc, #24]	; (8012f50 <cleanup_stdio+0x3c>)
 8012f36:	4299      	cmp	r1, r3
 8012f38:	d004      	beq.n	8012f44 <cleanup_stdio+0x30>
 8012f3a:	4620      	mov	r0, r4
 8012f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f40:	f002 bb88 	b.w	8015654 <_fflush_r>
 8012f44:	bd10      	pop	{r4, pc}
 8012f46:	bf00      	nop
 8012f48:	200010fc 	.word	0x200010fc
 8012f4c:	20001164 	.word	0x20001164
 8012f50:	200011cc 	.word	0x200011cc

08012f54 <global_stdio_init.part.0>:
 8012f54:	b510      	push	{r4, lr}
 8012f56:	4b0b      	ldr	r3, [pc, #44]	; (8012f84 <global_stdio_init.part.0+0x30>)
 8012f58:	4c0b      	ldr	r4, [pc, #44]	; (8012f88 <global_stdio_init.part.0+0x34>)
 8012f5a:	4a0c      	ldr	r2, [pc, #48]	; (8012f8c <global_stdio_init.part.0+0x38>)
 8012f5c:	4620      	mov	r0, r4
 8012f5e:	601a      	str	r2, [r3, #0]
 8012f60:	2104      	movs	r1, #4
 8012f62:	2200      	movs	r2, #0
 8012f64:	f7ff ff94 	bl	8012e90 <std>
 8012f68:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012f6c:	2201      	movs	r2, #1
 8012f6e:	2109      	movs	r1, #9
 8012f70:	f7ff ff8e 	bl	8012e90 <std>
 8012f74:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012f78:	2202      	movs	r2, #2
 8012f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f7e:	2112      	movs	r1, #18
 8012f80:	f7ff bf86 	b.w	8012e90 <std>
 8012f84:	20001234 	.word	0x20001234
 8012f88:	200010fc 	.word	0x200010fc
 8012f8c:	08012efd 	.word	0x08012efd

08012f90 <__sfp_lock_acquire>:
 8012f90:	4801      	ldr	r0, [pc, #4]	; (8012f98 <__sfp_lock_acquire+0x8>)
 8012f92:	f000 ba88 	b.w	80134a6 <__retarget_lock_acquire_recursive>
 8012f96:	bf00      	nop
 8012f98:	2000123d 	.word	0x2000123d

08012f9c <__sfp_lock_release>:
 8012f9c:	4801      	ldr	r0, [pc, #4]	; (8012fa4 <__sfp_lock_release+0x8>)
 8012f9e:	f000 ba83 	b.w	80134a8 <__retarget_lock_release_recursive>
 8012fa2:	bf00      	nop
 8012fa4:	2000123d 	.word	0x2000123d

08012fa8 <__sinit>:
 8012fa8:	b510      	push	{r4, lr}
 8012faa:	4604      	mov	r4, r0
 8012fac:	f7ff fff0 	bl	8012f90 <__sfp_lock_acquire>
 8012fb0:	6a23      	ldr	r3, [r4, #32]
 8012fb2:	b11b      	cbz	r3, 8012fbc <__sinit+0x14>
 8012fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fb8:	f7ff bff0 	b.w	8012f9c <__sfp_lock_release>
 8012fbc:	4b04      	ldr	r3, [pc, #16]	; (8012fd0 <__sinit+0x28>)
 8012fbe:	6223      	str	r3, [r4, #32]
 8012fc0:	4b04      	ldr	r3, [pc, #16]	; (8012fd4 <__sinit+0x2c>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d1f5      	bne.n	8012fb4 <__sinit+0xc>
 8012fc8:	f7ff ffc4 	bl	8012f54 <global_stdio_init.part.0>
 8012fcc:	e7f2      	b.n	8012fb4 <__sinit+0xc>
 8012fce:	bf00      	nop
 8012fd0:	08012f15 	.word	0x08012f15
 8012fd4:	20001234 	.word	0x20001234

08012fd8 <_fwalk_sglue>:
 8012fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fdc:	4607      	mov	r7, r0
 8012fde:	4688      	mov	r8, r1
 8012fe0:	4614      	mov	r4, r2
 8012fe2:	2600      	movs	r6, #0
 8012fe4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012fe8:	f1b9 0901 	subs.w	r9, r9, #1
 8012fec:	d505      	bpl.n	8012ffa <_fwalk_sglue+0x22>
 8012fee:	6824      	ldr	r4, [r4, #0]
 8012ff0:	2c00      	cmp	r4, #0
 8012ff2:	d1f7      	bne.n	8012fe4 <_fwalk_sglue+0xc>
 8012ff4:	4630      	mov	r0, r6
 8012ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ffa:	89ab      	ldrh	r3, [r5, #12]
 8012ffc:	2b01      	cmp	r3, #1
 8012ffe:	d907      	bls.n	8013010 <_fwalk_sglue+0x38>
 8013000:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013004:	3301      	adds	r3, #1
 8013006:	d003      	beq.n	8013010 <_fwalk_sglue+0x38>
 8013008:	4629      	mov	r1, r5
 801300a:	4638      	mov	r0, r7
 801300c:	47c0      	blx	r8
 801300e:	4306      	orrs	r6, r0
 8013010:	3568      	adds	r5, #104	; 0x68
 8013012:	e7e9      	b.n	8012fe8 <_fwalk_sglue+0x10>

08013014 <siprintf>:
 8013014:	b40e      	push	{r1, r2, r3}
 8013016:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801301a:	b500      	push	{lr}
 801301c:	b09c      	sub	sp, #112	; 0x70
 801301e:	ab1d      	add	r3, sp, #116	; 0x74
 8013020:	9002      	str	r0, [sp, #8]
 8013022:	9006      	str	r0, [sp, #24]
 8013024:	9107      	str	r1, [sp, #28]
 8013026:	9104      	str	r1, [sp, #16]
 8013028:	4808      	ldr	r0, [pc, #32]	; (801304c <siprintf+0x38>)
 801302a:	4909      	ldr	r1, [pc, #36]	; (8013050 <siprintf+0x3c>)
 801302c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013030:	9105      	str	r1, [sp, #20]
 8013032:	6800      	ldr	r0, [r0, #0]
 8013034:	a902      	add	r1, sp, #8
 8013036:	9301      	str	r3, [sp, #4]
 8013038:	f001 fd2c 	bl	8014a94 <_svfiprintf_r>
 801303c:	2200      	movs	r2, #0
 801303e:	9b02      	ldr	r3, [sp, #8]
 8013040:	701a      	strb	r2, [r3, #0]
 8013042:	b01c      	add	sp, #112	; 0x70
 8013044:	f85d eb04 	ldr.w	lr, [sp], #4
 8013048:	b003      	add	sp, #12
 801304a:	4770      	bx	lr
 801304c:	200003c0 	.word	0x200003c0
 8013050:	ffff0208 	.word	0xffff0208

08013054 <siscanf>:
 8013054:	b40e      	push	{r1, r2, r3}
 8013056:	f44f 7201 	mov.w	r2, #516	; 0x204
 801305a:	b530      	push	{r4, r5, lr}
 801305c:	b09c      	sub	sp, #112	; 0x70
 801305e:	ac1f      	add	r4, sp, #124	; 0x7c
 8013060:	f854 5b04 	ldr.w	r5, [r4], #4
 8013064:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013068:	9002      	str	r0, [sp, #8]
 801306a:	9006      	str	r0, [sp, #24]
 801306c:	f7ed f87a 	bl	8000164 <strlen>
 8013070:	4b0b      	ldr	r3, [pc, #44]	; (80130a0 <siscanf+0x4c>)
 8013072:	9003      	str	r0, [sp, #12]
 8013074:	930b      	str	r3, [sp, #44]	; 0x2c
 8013076:	2300      	movs	r3, #0
 8013078:	930f      	str	r3, [sp, #60]	; 0x3c
 801307a:	9314      	str	r3, [sp, #80]	; 0x50
 801307c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013080:	9007      	str	r0, [sp, #28]
 8013082:	4808      	ldr	r0, [pc, #32]	; (80130a4 <siscanf+0x50>)
 8013084:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013088:	462a      	mov	r2, r5
 801308a:	4623      	mov	r3, r4
 801308c:	a902      	add	r1, sp, #8
 801308e:	6800      	ldr	r0, [r0, #0]
 8013090:	9401      	str	r4, [sp, #4]
 8013092:	f001 fe57 	bl	8014d44 <__ssvfiscanf_r>
 8013096:	b01c      	add	sp, #112	; 0x70
 8013098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801309c:	b003      	add	sp, #12
 801309e:	4770      	bx	lr
 80130a0:	080130cb 	.word	0x080130cb
 80130a4:	200003c0 	.word	0x200003c0

080130a8 <__sread>:
 80130a8:	b510      	push	{r4, lr}
 80130aa:	460c      	mov	r4, r1
 80130ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130b0:	f000 f99a 	bl	80133e8 <_read_r>
 80130b4:	2800      	cmp	r0, #0
 80130b6:	bfab      	itete	ge
 80130b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80130ba:	89a3      	ldrhlt	r3, [r4, #12]
 80130bc:	181b      	addge	r3, r3, r0
 80130be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80130c2:	bfac      	ite	ge
 80130c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80130c6:	81a3      	strhlt	r3, [r4, #12]
 80130c8:	bd10      	pop	{r4, pc}

080130ca <__seofread>:
 80130ca:	2000      	movs	r0, #0
 80130cc:	4770      	bx	lr

080130ce <__swrite>:
 80130ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130d2:	461f      	mov	r7, r3
 80130d4:	898b      	ldrh	r3, [r1, #12]
 80130d6:	4605      	mov	r5, r0
 80130d8:	05db      	lsls	r3, r3, #23
 80130da:	460c      	mov	r4, r1
 80130dc:	4616      	mov	r6, r2
 80130de:	d505      	bpl.n	80130ec <__swrite+0x1e>
 80130e0:	2302      	movs	r3, #2
 80130e2:	2200      	movs	r2, #0
 80130e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130e8:	f000 f96c 	bl	80133c4 <_lseek_r>
 80130ec:	89a3      	ldrh	r3, [r4, #12]
 80130ee:	4632      	mov	r2, r6
 80130f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80130f4:	81a3      	strh	r3, [r4, #12]
 80130f6:	4628      	mov	r0, r5
 80130f8:	463b      	mov	r3, r7
 80130fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013102:	f000 b993 	b.w	801342c <_write_r>

08013106 <__sseek>:
 8013106:	b510      	push	{r4, lr}
 8013108:	460c      	mov	r4, r1
 801310a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801310e:	f000 f959 	bl	80133c4 <_lseek_r>
 8013112:	1c43      	adds	r3, r0, #1
 8013114:	89a3      	ldrh	r3, [r4, #12]
 8013116:	bf15      	itete	ne
 8013118:	6560      	strne	r0, [r4, #84]	; 0x54
 801311a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801311e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013122:	81a3      	strheq	r3, [r4, #12]
 8013124:	bf18      	it	ne
 8013126:	81a3      	strhne	r3, [r4, #12]
 8013128:	bd10      	pop	{r4, pc}

0801312a <__sclose>:
 801312a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801312e:	f000 b939 	b.w	80133a4 <_close_r>

08013132 <_vsniprintf_r>:
 8013132:	b530      	push	{r4, r5, lr}
 8013134:	4614      	mov	r4, r2
 8013136:	2c00      	cmp	r4, #0
 8013138:	4605      	mov	r5, r0
 801313a:	461a      	mov	r2, r3
 801313c:	b09b      	sub	sp, #108	; 0x6c
 801313e:	da05      	bge.n	801314c <_vsniprintf_r+0x1a>
 8013140:	238b      	movs	r3, #139	; 0x8b
 8013142:	6003      	str	r3, [r0, #0]
 8013144:	f04f 30ff 	mov.w	r0, #4294967295
 8013148:	b01b      	add	sp, #108	; 0x6c
 801314a:	bd30      	pop	{r4, r5, pc}
 801314c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013150:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013154:	bf0c      	ite	eq
 8013156:	4623      	moveq	r3, r4
 8013158:	f104 33ff 	addne.w	r3, r4, #4294967295
 801315c:	9302      	str	r3, [sp, #8]
 801315e:	9305      	str	r3, [sp, #20]
 8013160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013164:	9100      	str	r1, [sp, #0]
 8013166:	9104      	str	r1, [sp, #16]
 8013168:	f8ad 300e 	strh.w	r3, [sp, #14]
 801316c:	4669      	mov	r1, sp
 801316e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013170:	f001 fc90 	bl	8014a94 <_svfiprintf_r>
 8013174:	1c43      	adds	r3, r0, #1
 8013176:	bfbc      	itt	lt
 8013178:	238b      	movlt	r3, #139	; 0x8b
 801317a:	602b      	strlt	r3, [r5, #0]
 801317c:	2c00      	cmp	r4, #0
 801317e:	d0e3      	beq.n	8013148 <_vsniprintf_r+0x16>
 8013180:	2200      	movs	r2, #0
 8013182:	9b00      	ldr	r3, [sp, #0]
 8013184:	701a      	strb	r2, [r3, #0]
 8013186:	e7df      	b.n	8013148 <_vsniprintf_r+0x16>

08013188 <vsniprintf>:
 8013188:	b507      	push	{r0, r1, r2, lr}
 801318a:	9300      	str	r3, [sp, #0]
 801318c:	4613      	mov	r3, r2
 801318e:	460a      	mov	r2, r1
 8013190:	4601      	mov	r1, r0
 8013192:	4803      	ldr	r0, [pc, #12]	; (80131a0 <vsniprintf+0x18>)
 8013194:	6800      	ldr	r0, [r0, #0]
 8013196:	f7ff ffcc 	bl	8013132 <_vsniprintf_r>
 801319a:	b003      	add	sp, #12
 801319c:	f85d fb04 	ldr.w	pc, [sp], #4
 80131a0:	200003c0 	.word	0x200003c0

080131a4 <__swbuf_r>:
 80131a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131a6:	460e      	mov	r6, r1
 80131a8:	4614      	mov	r4, r2
 80131aa:	4605      	mov	r5, r0
 80131ac:	b118      	cbz	r0, 80131b6 <__swbuf_r+0x12>
 80131ae:	6a03      	ldr	r3, [r0, #32]
 80131b0:	b90b      	cbnz	r3, 80131b6 <__swbuf_r+0x12>
 80131b2:	f7ff fef9 	bl	8012fa8 <__sinit>
 80131b6:	69a3      	ldr	r3, [r4, #24]
 80131b8:	60a3      	str	r3, [r4, #8]
 80131ba:	89a3      	ldrh	r3, [r4, #12]
 80131bc:	071a      	lsls	r2, r3, #28
 80131be:	d525      	bpl.n	801320c <__swbuf_r+0x68>
 80131c0:	6923      	ldr	r3, [r4, #16]
 80131c2:	b31b      	cbz	r3, 801320c <__swbuf_r+0x68>
 80131c4:	6823      	ldr	r3, [r4, #0]
 80131c6:	6922      	ldr	r2, [r4, #16]
 80131c8:	b2f6      	uxtb	r6, r6
 80131ca:	1a98      	subs	r0, r3, r2
 80131cc:	6963      	ldr	r3, [r4, #20]
 80131ce:	4637      	mov	r7, r6
 80131d0:	4283      	cmp	r3, r0
 80131d2:	dc04      	bgt.n	80131de <__swbuf_r+0x3a>
 80131d4:	4621      	mov	r1, r4
 80131d6:	4628      	mov	r0, r5
 80131d8:	f002 fa3c 	bl	8015654 <_fflush_r>
 80131dc:	b9e0      	cbnz	r0, 8013218 <__swbuf_r+0x74>
 80131de:	68a3      	ldr	r3, [r4, #8]
 80131e0:	3b01      	subs	r3, #1
 80131e2:	60a3      	str	r3, [r4, #8]
 80131e4:	6823      	ldr	r3, [r4, #0]
 80131e6:	1c5a      	adds	r2, r3, #1
 80131e8:	6022      	str	r2, [r4, #0]
 80131ea:	701e      	strb	r6, [r3, #0]
 80131ec:	6962      	ldr	r2, [r4, #20]
 80131ee:	1c43      	adds	r3, r0, #1
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d004      	beq.n	80131fe <__swbuf_r+0x5a>
 80131f4:	89a3      	ldrh	r3, [r4, #12]
 80131f6:	07db      	lsls	r3, r3, #31
 80131f8:	d506      	bpl.n	8013208 <__swbuf_r+0x64>
 80131fa:	2e0a      	cmp	r6, #10
 80131fc:	d104      	bne.n	8013208 <__swbuf_r+0x64>
 80131fe:	4621      	mov	r1, r4
 8013200:	4628      	mov	r0, r5
 8013202:	f002 fa27 	bl	8015654 <_fflush_r>
 8013206:	b938      	cbnz	r0, 8013218 <__swbuf_r+0x74>
 8013208:	4638      	mov	r0, r7
 801320a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801320c:	4621      	mov	r1, r4
 801320e:	4628      	mov	r0, r5
 8013210:	f000 f806 	bl	8013220 <__swsetup_r>
 8013214:	2800      	cmp	r0, #0
 8013216:	d0d5      	beq.n	80131c4 <__swbuf_r+0x20>
 8013218:	f04f 37ff 	mov.w	r7, #4294967295
 801321c:	e7f4      	b.n	8013208 <__swbuf_r+0x64>
	...

08013220 <__swsetup_r>:
 8013220:	b538      	push	{r3, r4, r5, lr}
 8013222:	4b2a      	ldr	r3, [pc, #168]	; (80132cc <__swsetup_r+0xac>)
 8013224:	4605      	mov	r5, r0
 8013226:	6818      	ldr	r0, [r3, #0]
 8013228:	460c      	mov	r4, r1
 801322a:	b118      	cbz	r0, 8013234 <__swsetup_r+0x14>
 801322c:	6a03      	ldr	r3, [r0, #32]
 801322e:	b90b      	cbnz	r3, 8013234 <__swsetup_r+0x14>
 8013230:	f7ff feba 	bl	8012fa8 <__sinit>
 8013234:	89a3      	ldrh	r3, [r4, #12]
 8013236:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801323a:	0718      	lsls	r0, r3, #28
 801323c:	d422      	bmi.n	8013284 <__swsetup_r+0x64>
 801323e:	06d9      	lsls	r1, r3, #27
 8013240:	d407      	bmi.n	8013252 <__swsetup_r+0x32>
 8013242:	2309      	movs	r3, #9
 8013244:	602b      	str	r3, [r5, #0]
 8013246:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801324a:	f04f 30ff 	mov.w	r0, #4294967295
 801324e:	81a3      	strh	r3, [r4, #12]
 8013250:	e034      	b.n	80132bc <__swsetup_r+0x9c>
 8013252:	0758      	lsls	r0, r3, #29
 8013254:	d512      	bpl.n	801327c <__swsetup_r+0x5c>
 8013256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013258:	b141      	cbz	r1, 801326c <__swsetup_r+0x4c>
 801325a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801325e:	4299      	cmp	r1, r3
 8013260:	d002      	beq.n	8013268 <__swsetup_r+0x48>
 8013262:	4628      	mov	r0, r5
 8013264:	f000 ffd4 	bl	8014210 <_free_r>
 8013268:	2300      	movs	r3, #0
 801326a:	6363      	str	r3, [r4, #52]	; 0x34
 801326c:	89a3      	ldrh	r3, [r4, #12]
 801326e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013272:	81a3      	strh	r3, [r4, #12]
 8013274:	2300      	movs	r3, #0
 8013276:	6063      	str	r3, [r4, #4]
 8013278:	6923      	ldr	r3, [r4, #16]
 801327a:	6023      	str	r3, [r4, #0]
 801327c:	89a3      	ldrh	r3, [r4, #12]
 801327e:	f043 0308 	orr.w	r3, r3, #8
 8013282:	81a3      	strh	r3, [r4, #12]
 8013284:	6923      	ldr	r3, [r4, #16]
 8013286:	b94b      	cbnz	r3, 801329c <__swsetup_r+0x7c>
 8013288:	89a3      	ldrh	r3, [r4, #12]
 801328a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801328e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013292:	d003      	beq.n	801329c <__swsetup_r+0x7c>
 8013294:	4621      	mov	r1, r4
 8013296:	4628      	mov	r0, r5
 8013298:	f002 fa3b 	bl	8015712 <__smakebuf_r>
 801329c:	89a0      	ldrh	r0, [r4, #12]
 801329e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80132a2:	f010 0301 	ands.w	r3, r0, #1
 80132a6:	d00a      	beq.n	80132be <__swsetup_r+0x9e>
 80132a8:	2300      	movs	r3, #0
 80132aa:	60a3      	str	r3, [r4, #8]
 80132ac:	6963      	ldr	r3, [r4, #20]
 80132ae:	425b      	negs	r3, r3
 80132b0:	61a3      	str	r3, [r4, #24]
 80132b2:	6923      	ldr	r3, [r4, #16]
 80132b4:	b943      	cbnz	r3, 80132c8 <__swsetup_r+0xa8>
 80132b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80132ba:	d1c4      	bne.n	8013246 <__swsetup_r+0x26>
 80132bc:	bd38      	pop	{r3, r4, r5, pc}
 80132be:	0781      	lsls	r1, r0, #30
 80132c0:	bf58      	it	pl
 80132c2:	6963      	ldrpl	r3, [r4, #20]
 80132c4:	60a3      	str	r3, [r4, #8]
 80132c6:	e7f4      	b.n	80132b2 <__swsetup_r+0x92>
 80132c8:	2000      	movs	r0, #0
 80132ca:	e7f7      	b.n	80132bc <__swsetup_r+0x9c>
 80132cc:	200003c0 	.word	0x200003c0

080132d0 <memset>:
 80132d0:	4603      	mov	r3, r0
 80132d2:	4402      	add	r2, r0
 80132d4:	4293      	cmp	r3, r2
 80132d6:	d100      	bne.n	80132da <memset+0xa>
 80132d8:	4770      	bx	lr
 80132da:	f803 1b01 	strb.w	r1, [r3], #1
 80132de:	e7f9      	b.n	80132d4 <memset+0x4>

080132e0 <strchr>:
 80132e0:	4603      	mov	r3, r0
 80132e2:	b2c9      	uxtb	r1, r1
 80132e4:	4618      	mov	r0, r3
 80132e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132ea:	b112      	cbz	r2, 80132f2 <strchr+0x12>
 80132ec:	428a      	cmp	r2, r1
 80132ee:	d1f9      	bne.n	80132e4 <strchr+0x4>
 80132f0:	4770      	bx	lr
 80132f2:	2900      	cmp	r1, #0
 80132f4:	bf18      	it	ne
 80132f6:	2000      	movne	r0, #0
 80132f8:	4770      	bx	lr

080132fa <strncmp>:
 80132fa:	b510      	push	{r4, lr}
 80132fc:	b16a      	cbz	r2, 801331a <strncmp+0x20>
 80132fe:	3901      	subs	r1, #1
 8013300:	1884      	adds	r4, r0, r2
 8013302:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013306:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801330a:	429a      	cmp	r2, r3
 801330c:	d103      	bne.n	8013316 <strncmp+0x1c>
 801330e:	42a0      	cmp	r0, r4
 8013310:	d001      	beq.n	8013316 <strncmp+0x1c>
 8013312:	2a00      	cmp	r2, #0
 8013314:	d1f5      	bne.n	8013302 <strncmp+0x8>
 8013316:	1ad0      	subs	r0, r2, r3
 8013318:	bd10      	pop	{r4, pc}
 801331a:	4610      	mov	r0, r2
 801331c:	e7fc      	b.n	8013318 <strncmp+0x1e>

0801331e <strncpy>:
 801331e:	4603      	mov	r3, r0
 8013320:	b510      	push	{r4, lr}
 8013322:	3901      	subs	r1, #1
 8013324:	b132      	cbz	r2, 8013334 <strncpy+0x16>
 8013326:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801332a:	3a01      	subs	r2, #1
 801332c:	f803 4b01 	strb.w	r4, [r3], #1
 8013330:	2c00      	cmp	r4, #0
 8013332:	d1f7      	bne.n	8013324 <strncpy+0x6>
 8013334:	2100      	movs	r1, #0
 8013336:	441a      	add	r2, r3
 8013338:	4293      	cmp	r3, r2
 801333a:	d100      	bne.n	801333e <strncpy+0x20>
 801333c:	bd10      	pop	{r4, pc}
 801333e:	f803 1b01 	strb.w	r1, [r3], #1
 8013342:	e7f9      	b.n	8013338 <strncpy+0x1a>

08013344 <__strtok_r>:
 8013344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013346:	b908      	cbnz	r0, 801334c <__strtok_r+0x8>
 8013348:	6810      	ldr	r0, [r2, #0]
 801334a:	b188      	cbz	r0, 8013370 <__strtok_r+0x2c>
 801334c:	4604      	mov	r4, r0
 801334e:	460f      	mov	r7, r1
 8013350:	4620      	mov	r0, r4
 8013352:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013356:	f817 6b01 	ldrb.w	r6, [r7], #1
 801335a:	b91e      	cbnz	r6, 8013364 <__strtok_r+0x20>
 801335c:	b965      	cbnz	r5, 8013378 <__strtok_r+0x34>
 801335e:	4628      	mov	r0, r5
 8013360:	6015      	str	r5, [r2, #0]
 8013362:	e005      	b.n	8013370 <__strtok_r+0x2c>
 8013364:	42b5      	cmp	r5, r6
 8013366:	d1f6      	bne.n	8013356 <__strtok_r+0x12>
 8013368:	2b00      	cmp	r3, #0
 801336a:	d1f0      	bne.n	801334e <__strtok_r+0xa>
 801336c:	6014      	str	r4, [r2, #0]
 801336e:	7003      	strb	r3, [r0, #0]
 8013370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013372:	461c      	mov	r4, r3
 8013374:	e00c      	b.n	8013390 <__strtok_r+0x4c>
 8013376:	b915      	cbnz	r5, 801337e <__strtok_r+0x3a>
 8013378:	460e      	mov	r6, r1
 801337a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801337e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013382:	42ab      	cmp	r3, r5
 8013384:	d1f7      	bne.n	8013376 <__strtok_r+0x32>
 8013386:	2b00      	cmp	r3, #0
 8013388:	d0f3      	beq.n	8013372 <__strtok_r+0x2e>
 801338a:	2300      	movs	r3, #0
 801338c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013390:	6014      	str	r4, [r2, #0]
 8013392:	e7ed      	b.n	8013370 <__strtok_r+0x2c>

08013394 <strtok_r>:
 8013394:	2301      	movs	r3, #1
 8013396:	f7ff bfd5 	b.w	8013344 <__strtok_r>
	...

0801339c <_localeconv_r>:
 801339c:	4800      	ldr	r0, [pc, #0]	; (80133a0 <_localeconv_r+0x4>)
 801339e:	4770      	bx	lr
 80133a0:	200002f8 	.word	0x200002f8

080133a4 <_close_r>:
 80133a4:	b538      	push	{r3, r4, r5, lr}
 80133a6:	2300      	movs	r3, #0
 80133a8:	4d05      	ldr	r5, [pc, #20]	; (80133c0 <_close_r+0x1c>)
 80133aa:	4604      	mov	r4, r0
 80133ac:	4608      	mov	r0, r1
 80133ae:	602b      	str	r3, [r5, #0]
 80133b0:	f7f0 fe1a 	bl	8003fe8 <_close>
 80133b4:	1c43      	adds	r3, r0, #1
 80133b6:	d102      	bne.n	80133be <_close_r+0x1a>
 80133b8:	682b      	ldr	r3, [r5, #0]
 80133ba:	b103      	cbz	r3, 80133be <_close_r+0x1a>
 80133bc:	6023      	str	r3, [r4, #0]
 80133be:	bd38      	pop	{r3, r4, r5, pc}
 80133c0:	20001238 	.word	0x20001238

080133c4 <_lseek_r>:
 80133c4:	b538      	push	{r3, r4, r5, lr}
 80133c6:	4604      	mov	r4, r0
 80133c8:	4608      	mov	r0, r1
 80133ca:	4611      	mov	r1, r2
 80133cc:	2200      	movs	r2, #0
 80133ce:	4d05      	ldr	r5, [pc, #20]	; (80133e4 <_lseek_r+0x20>)
 80133d0:	602a      	str	r2, [r5, #0]
 80133d2:	461a      	mov	r2, r3
 80133d4:	f7f0 fe2c 	bl	8004030 <_lseek>
 80133d8:	1c43      	adds	r3, r0, #1
 80133da:	d102      	bne.n	80133e2 <_lseek_r+0x1e>
 80133dc:	682b      	ldr	r3, [r5, #0]
 80133de:	b103      	cbz	r3, 80133e2 <_lseek_r+0x1e>
 80133e0:	6023      	str	r3, [r4, #0]
 80133e2:	bd38      	pop	{r3, r4, r5, pc}
 80133e4:	20001238 	.word	0x20001238

080133e8 <_read_r>:
 80133e8:	b538      	push	{r3, r4, r5, lr}
 80133ea:	4604      	mov	r4, r0
 80133ec:	4608      	mov	r0, r1
 80133ee:	4611      	mov	r1, r2
 80133f0:	2200      	movs	r2, #0
 80133f2:	4d05      	ldr	r5, [pc, #20]	; (8013408 <_read_r+0x20>)
 80133f4:	602a      	str	r2, [r5, #0]
 80133f6:	461a      	mov	r2, r3
 80133f8:	f7f0 fdbd 	bl	8003f76 <_read>
 80133fc:	1c43      	adds	r3, r0, #1
 80133fe:	d102      	bne.n	8013406 <_read_r+0x1e>
 8013400:	682b      	ldr	r3, [r5, #0]
 8013402:	b103      	cbz	r3, 8013406 <_read_r+0x1e>
 8013404:	6023      	str	r3, [r4, #0]
 8013406:	bd38      	pop	{r3, r4, r5, pc}
 8013408:	20001238 	.word	0x20001238

0801340c <_sbrk_r>:
 801340c:	b538      	push	{r3, r4, r5, lr}
 801340e:	2300      	movs	r3, #0
 8013410:	4d05      	ldr	r5, [pc, #20]	; (8013428 <_sbrk_r+0x1c>)
 8013412:	4604      	mov	r4, r0
 8013414:	4608      	mov	r0, r1
 8013416:	602b      	str	r3, [r5, #0]
 8013418:	f7f0 fe16 	bl	8004048 <_sbrk>
 801341c:	1c43      	adds	r3, r0, #1
 801341e:	d102      	bne.n	8013426 <_sbrk_r+0x1a>
 8013420:	682b      	ldr	r3, [r5, #0]
 8013422:	b103      	cbz	r3, 8013426 <_sbrk_r+0x1a>
 8013424:	6023      	str	r3, [r4, #0]
 8013426:	bd38      	pop	{r3, r4, r5, pc}
 8013428:	20001238 	.word	0x20001238

0801342c <_write_r>:
 801342c:	b538      	push	{r3, r4, r5, lr}
 801342e:	4604      	mov	r4, r0
 8013430:	4608      	mov	r0, r1
 8013432:	4611      	mov	r1, r2
 8013434:	2200      	movs	r2, #0
 8013436:	4d05      	ldr	r5, [pc, #20]	; (801344c <_write_r+0x20>)
 8013438:	602a      	str	r2, [r5, #0]
 801343a:	461a      	mov	r2, r3
 801343c:	f7f0 fdb8 	bl	8003fb0 <_write>
 8013440:	1c43      	adds	r3, r0, #1
 8013442:	d102      	bne.n	801344a <_write_r+0x1e>
 8013444:	682b      	ldr	r3, [r5, #0]
 8013446:	b103      	cbz	r3, 801344a <_write_r+0x1e>
 8013448:	6023      	str	r3, [r4, #0]
 801344a:	bd38      	pop	{r3, r4, r5, pc}
 801344c:	20001238 	.word	0x20001238

08013450 <__errno>:
 8013450:	4b01      	ldr	r3, [pc, #4]	; (8013458 <__errno+0x8>)
 8013452:	6818      	ldr	r0, [r3, #0]
 8013454:	4770      	bx	lr
 8013456:	bf00      	nop
 8013458:	200003c0 	.word	0x200003c0

0801345c <__libc_init_array>:
 801345c:	b570      	push	{r4, r5, r6, lr}
 801345e:	2600      	movs	r6, #0
 8013460:	4d0c      	ldr	r5, [pc, #48]	; (8013494 <__libc_init_array+0x38>)
 8013462:	4c0d      	ldr	r4, [pc, #52]	; (8013498 <__libc_init_array+0x3c>)
 8013464:	1b64      	subs	r4, r4, r5
 8013466:	10a4      	asrs	r4, r4, #2
 8013468:	42a6      	cmp	r6, r4
 801346a:	d109      	bne.n	8013480 <__libc_init_array+0x24>
 801346c:	f002 fa9a 	bl	80159a4 <_init>
 8013470:	2600      	movs	r6, #0
 8013472:	4d0a      	ldr	r5, [pc, #40]	; (801349c <__libc_init_array+0x40>)
 8013474:	4c0a      	ldr	r4, [pc, #40]	; (80134a0 <__libc_init_array+0x44>)
 8013476:	1b64      	subs	r4, r4, r5
 8013478:	10a4      	asrs	r4, r4, #2
 801347a:	42a6      	cmp	r6, r4
 801347c:	d105      	bne.n	801348a <__libc_init_array+0x2e>
 801347e:	bd70      	pop	{r4, r5, r6, pc}
 8013480:	f855 3b04 	ldr.w	r3, [r5], #4
 8013484:	4798      	blx	r3
 8013486:	3601      	adds	r6, #1
 8013488:	e7ee      	b.n	8013468 <__libc_init_array+0xc>
 801348a:	f855 3b04 	ldr.w	r3, [r5], #4
 801348e:	4798      	blx	r3
 8013490:	3601      	adds	r6, #1
 8013492:	e7f2      	b.n	801347a <__libc_init_array+0x1e>
 8013494:	08016558 	.word	0x08016558
 8013498:	08016558 	.word	0x08016558
 801349c:	08016558 	.word	0x08016558
 80134a0:	0801655c 	.word	0x0801655c

080134a4 <__retarget_lock_init_recursive>:
 80134a4:	4770      	bx	lr

080134a6 <__retarget_lock_acquire_recursive>:
 80134a6:	4770      	bx	lr

080134a8 <__retarget_lock_release_recursive>:
 80134a8:	4770      	bx	lr

080134aa <strcpy>:
 80134aa:	4603      	mov	r3, r0
 80134ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134b0:	f803 2b01 	strb.w	r2, [r3], #1
 80134b4:	2a00      	cmp	r2, #0
 80134b6:	d1f9      	bne.n	80134ac <strcpy+0x2>
 80134b8:	4770      	bx	lr

080134ba <memchr>:
 80134ba:	4603      	mov	r3, r0
 80134bc:	b510      	push	{r4, lr}
 80134be:	b2c9      	uxtb	r1, r1
 80134c0:	4402      	add	r2, r0
 80134c2:	4293      	cmp	r3, r2
 80134c4:	4618      	mov	r0, r3
 80134c6:	d101      	bne.n	80134cc <memchr+0x12>
 80134c8:	2000      	movs	r0, #0
 80134ca:	e003      	b.n	80134d4 <memchr+0x1a>
 80134cc:	7804      	ldrb	r4, [r0, #0]
 80134ce:	3301      	adds	r3, #1
 80134d0:	428c      	cmp	r4, r1
 80134d2:	d1f6      	bne.n	80134c2 <memchr+0x8>
 80134d4:	bd10      	pop	{r4, pc}

080134d6 <memcpy>:
 80134d6:	440a      	add	r2, r1
 80134d8:	4291      	cmp	r1, r2
 80134da:	f100 33ff 	add.w	r3, r0, #4294967295
 80134de:	d100      	bne.n	80134e2 <memcpy+0xc>
 80134e0:	4770      	bx	lr
 80134e2:	b510      	push	{r4, lr}
 80134e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134e8:	4291      	cmp	r1, r2
 80134ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134ee:	d1f9      	bne.n	80134e4 <memcpy+0xe>
 80134f0:	bd10      	pop	{r4, pc}
	...

080134f4 <__assert_func>:
 80134f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80134f6:	4614      	mov	r4, r2
 80134f8:	461a      	mov	r2, r3
 80134fa:	4b09      	ldr	r3, [pc, #36]	; (8013520 <__assert_func+0x2c>)
 80134fc:	4605      	mov	r5, r0
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	68d8      	ldr	r0, [r3, #12]
 8013502:	b14c      	cbz	r4, 8013518 <__assert_func+0x24>
 8013504:	4b07      	ldr	r3, [pc, #28]	; (8013524 <__assert_func+0x30>)
 8013506:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801350a:	9100      	str	r1, [sp, #0]
 801350c:	462b      	mov	r3, r5
 801350e:	4906      	ldr	r1, [pc, #24]	; (8013528 <__assert_func+0x34>)
 8013510:	f002 f8c8 	bl	80156a4 <fiprintf>
 8013514:	f002 f9e6 	bl	80158e4 <abort>
 8013518:	4b04      	ldr	r3, [pc, #16]	; (801352c <__assert_func+0x38>)
 801351a:	461c      	mov	r4, r3
 801351c:	e7f3      	b.n	8013506 <__assert_func+0x12>
 801351e:	bf00      	nop
 8013520:	200003c0 	.word	0x200003c0
 8013524:	0801630b 	.word	0x0801630b
 8013528:	08016318 	.word	0x08016318
 801352c:	08016346 	.word	0x08016346

08013530 <quorem>:
 8013530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013534:	6903      	ldr	r3, [r0, #16]
 8013536:	690c      	ldr	r4, [r1, #16]
 8013538:	4607      	mov	r7, r0
 801353a:	42a3      	cmp	r3, r4
 801353c:	db7f      	blt.n	801363e <quorem+0x10e>
 801353e:	3c01      	subs	r4, #1
 8013540:	f100 0514 	add.w	r5, r0, #20
 8013544:	f101 0814 	add.w	r8, r1, #20
 8013548:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801354c:	9301      	str	r3, [sp, #4]
 801354e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013552:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013556:	3301      	adds	r3, #1
 8013558:	429a      	cmp	r2, r3
 801355a:	fbb2 f6f3 	udiv	r6, r2, r3
 801355e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013562:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013566:	d331      	bcc.n	80135cc <quorem+0x9c>
 8013568:	f04f 0e00 	mov.w	lr, #0
 801356c:	4640      	mov	r0, r8
 801356e:	46ac      	mov	ip, r5
 8013570:	46f2      	mov	sl, lr
 8013572:	f850 2b04 	ldr.w	r2, [r0], #4
 8013576:	b293      	uxth	r3, r2
 8013578:	fb06 e303 	mla	r3, r6, r3, lr
 801357c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013580:	0c1a      	lsrs	r2, r3, #16
 8013582:	b29b      	uxth	r3, r3
 8013584:	fb06 220e 	mla	r2, r6, lr, r2
 8013588:	ebaa 0303 	sub.w	r3, sl, r3
 801358c:	f8dc a000 	ldr.w	sl, [ip]
 8013590:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013594:	fa1f fa8a 	uxth.w	sl, sl
 8013598:	4453      	add	r3, sl
 801359a:	f8dc a000 	ldr.w	sl, [ip]
 801359e:	b292      	uxth	r2, r2
 80135a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80135a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80135a8:	b29b      	uxth	r3, r3
 80135aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80135ae:	4581      	cmp	r9, r0
 80135b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80135b4:	f84c 3b04 	str.w	r3, [ip], #4
 80135b8:	d2db      	bcs.n	8013572 <quorem+0x42>
 80135ba:	f855 300b 	ldr.w	r3, [r5, fp]
 80135be:	b92b      	cbnz	r3, 80135cc <quorem+0x9c>
 80135c0:	9b01      	ldr	r3, [sp, #4]
 80135c2:	3b04      	subs	r3, #4
 80135c4:	429d      	cmp	r5, r3
 80135c6:	461a      	mov	r2, r3
 80135c8:	d32d      	bcc.n	8013626 <quorem+0xf6>
 80135ca:	613c      	str	r4, [r7, #16]
 80135cc:	4638      	mov	r0, r7
 80135ce:	f001 f8f3 	bl	80147b8 <__mcmp>
 80135d2:	2800      	cmp	r0, #0
 80135d4:	db23      	blt.n	801361e <quorem+0xee>
 80135d6:	4629      	mov	r1, r5
 80135d8:	2000      	movs	r0, #0
 80135da:	3601      	adds	r6, #1
 80135dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80135e0:	f8d1 c000 	ldr.w	ip, [r1]
 80135e4:	b293      	uxth	r3, r2
 80135e6:	1ac3      	subs	r3, r0, r3
 80135e8:	0c12      	lsrs	r2, r2, #16
 80135ea:	fa1f f08c 	uxth.w	r0, ip
 80135ee:	4403      	add	r3, r0
 80135f0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80135f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80135f8:	b29b      	uxth	r3, r3
 80135fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80135fe:	45c1      	cmp	r9, r8
 8013600:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013604:	f841 3b04 	str.w	r3, [r1], #4
 8013608:	d2e8      	bcs.n	80135dc <quorem+0xac>
 801360a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801360e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013612:	b922      	cbnz	r2, 801361e <quorem+0xee>
 8013614:	3b04      	subs	r3, #4
 8013616:	429d      	cmp	r5, r3
 8013618:	461a      	mov	r2, r3
 801361a:	d30a      	bcc.n	8013632 <quorem+0x102>
 801361c:	613c      	str	r4, [r7, #16]
 801361e:	4630      	mov	r0, r6
 8013620:	b003      	add	sp, #12
 8013622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013626:	6812      	ldr	r2, [r2, #0]
 8013628:	3b04      	subs	r3, #4
 801362a:	2a00      	cmp	r2, #0
 801362c:	d1cd      	bne.n	80135ca <quorem+0x9a>
 801362e:	3c01      	subs	r4, #1
 8013630:	e7c8      	b.n	80135c4 <quorem+0x94>
 8013632:	6812      	ldr	r2, [r2, #0]
 8013634:	3b04      	subs	r3, #4
 8013636:	2a00      	cmp	r2, #0
 8013638:	d1f0      	bne.n	801361c <quorem+0xec>
 801363a:	3c01      	subs	r4, #1
 801363c:	e7eb      	b.n	8013616 <quorem+0xe6>
 801363e:	2000      	movs	r0, #0
 8013640:	e7ee      	b.n	8013620 <quorem+0xf0>
 8013642:	0000      	movs	r0, r0
 8013644:	0000      	movs	r0, r0
	...

08013648 <_dtoa_r>:
 8013648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801364c:	4616      	mov	r6, r2
 801364e:	461f      	mov	r7, r3
 8013650:	69c4      	ldr	r4, [r0, #28]
 8013652:	b099      	sub	sp, #100	; 0x64
 8013654:	4605      	mov	r5, r0
 8013656:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801365a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 801365e:	b974      	cbnz	r4, 801367e <_dtoa_r+0x36>
 8013660:	2010      	movs	r0, #16
 8013662:	f7fe fdc5 	bl	80121f0 <malloc>
 8013666:	4602      	mov	r2, r0
 8013668:	61e8      	str	r0, [r5, #28]
 801366a:	b920      	cbnz	r0, 8013676 <_dtoa_r+0x2e>
 801366c:	21ef      	movs	r1, #239	; 0xef
 801366e:	4bac      	ldr	r3, [pc, #688]	; (8013920 <_dtoa_r+0x2d8>)
 8013670:	48ac      	ldr	r0, [pc, #688]	; (8013924 <_dtoa_r+0x2dc>)
 8013672:	f7ff ff3f 	bl	80134f4 <__assert_func>
 8013676:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801367a:	6004      	str	r4, [r0, #0]
 801367c:	60c4      	str	r4, [r0, #12]
 801367e:	69eb      	ldr	r3, [r5, #28]
 8013680:	6819      	ldr	r1, [r3, #0]
 8013682:	b151      	cbz	r1, 801369a <_dtoa_r+0x52>
 8013684:	685a      	ldr	r2, [r3, #4]
 8013686:	2301      	movs	r3, #1
 8013688:	4093      	lsls	r3, r2
 801368a:	604a      	str	r2, [r1, #4]
 801368c:	608b      	str	r3, [r1, #8]
 801368e:	4628      	mov	r0, r5
 8013690:	f000 fe58 	bl	8014344 <_Bfree>
 8013694:	2200      	movs	r2, #0
 8013696:	69eb      	ldr	r3, [r5, #28]
 8013698:	601a      	str	r2, [r3, #0]
 801369a:	1e3b      	subs	r3, r7, #0
 801369c:	bfaf      	iteee	ge
 801369e:	2300      	movge	r3, #0
 80136a0:	2201      	movlt	r2, #1
 80136a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80136a6:	9305      	strlt	r3, [sp, #20]
 80136a8:	bfa8      	it	ge
 80136aa:	f8c8 3000 	strge.w	r3, [r8]
 80136ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80136b2:	4b9d      	ldr	r3, [pc, #628]	; (8013928 <_dtoa_r+0x2e0>)
 80136b4:	bfb8      	it	lt
 80136b6:	f8c8 2000 	strlt.w	r2, [r8]
 80136ba:	ea33 0309 	bics.w	r3, r3, r9
 80136be:	d119      	bne.n	80136f4 <_dtoa_r+0xac>
 80136c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80136c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80136c6:	6013      	str	r3, [r2, #0]
 80136c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80136cc:	4333      	orrs	r3, r6
 80136ce:	f000 8589 	beq.w	80141e4 <_dtoa_r+0xb9c>
 80136d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80136d4:	b953      	cbnz	r3, 80136ec <_dtoa_r+0xa4>
 80136d6:	4b95      	ldr	r3, [pc, #596]	; (801392c <_dtoa_r+0x2e4>)
 80136d8:	e023      	b.n	8013722 <_dtoa_r+0xda>
 80136da:	4b95      	ldr	r3, [pc, #596]	; (8013930 <_dtoa_r+0x2e8>)
 80136dc:	9303      	str	r3, [sp, #12]
 80136de:	3308      	adds	r3, #8
 80136e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80136e2:	6013      	str	r3, [r2, #0]
 80136e4:	9803      	ldr	r0, [sp, #12]
 80136e6:	b019      	add	sp, #100	; 0x64
 80136e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ec:	4b8f      	ldr	r3, [pc, #572]	; (801392c <_dtoa_r+0x2e4>)
 80136ee:	9303      	str	r3, [sp, #12]
 80136f0:	3303      	adds	r3, #3
 80136f2:	e7f5      	b.n	80136e0 <_dtoa_r+0x98>
 80136f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80136f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80136fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013700:	2200      	movs	r2, #0
 8013702:	2300      	movs	r3, #0
 8013704:	f7ed f95a 	bl	80009bc <__aeabi_dcmpeq>
 8013708:	4680      	mov	r8, r0
 801370a:	b160      	cbz	r0, 8013726 <_dtoa_r+0xde>
 801370c:	2301      	movs	r3, #1
 801370e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013710:	6013      	str	r3, [r2, #0]
 8013712:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013714:	2b00      	cmp	r3, #0
 8013716:	f000 8562 	beq.w	80141de <_dtoa_r+0xb96>
 801371a:	4b86      	ldr	r3, [pc, #536]	; (8013934 <_dtoa_r+0x2ec>)
 801371c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801371e:	6013      	str	r3, [r2, #0]
 8013720:	3b01      	subs	r3, #1
 8013722:	9303      	str	r3, [sp, #12]
 8013724:	e7de      	b.n	80136e4 <_dtoa_r+0x9c>
 8013726:	ab16      	add	r3, sp, #88	; 0x58
 8013728:	9301      	str	r3, [sp, #4]
 801372a:	ab17      	add	r3, sp, #92	; 0x5c
 801372c:	9300      	str	r3, [sp, #0]
 801372e:	4628      	mov	r0, r5
 8013730:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013734:	f001 f8e8 	bl	8014908 <__d2b>
 8013738:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801373c:	4682      	mov	sl, r0
 801373e:	2c00      	cmp	r4, #0
 8013740:	d07e      	beq.n	8013840 <_dtoa_r+0x1f8>
 8013742:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013748:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801374c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013750:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013754:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013758:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801375c:	4619      	mov	r1, r3
 801375e:	2200      	movs	r2, #0
 8013760:	4b75      	ldr	r3, [pc, #468]	; (8013938 <_dtoa_r+0x2f0>)
 8013762:	f7ec fd0b 	bl	800017c <__aeabi_dsub>
 8013766:	a368      	add	r3, pc, #416	; (adr r3, 8013908 <_dtoa_r+0x2c0>)
 8013768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801376c:	f7ec febe 	bl	80004ec <__aeabi_dmul>
 8013770:	a367      	add	r3, pc, #412	; (adr r3, 8013910 <_dtoa_r+0x2c8>)
 8013772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013776:	f7ec fd03 	bl	8000180 <__adddf3>
 801377a:	4606      	mov	r6, r0
 801377c:	4620      	mov	r0, r4
 801377e:	460f      	mov	r7, r1
 8013780:	f7ec fe4a 	bl	8000418 <__aeabi_i2d>
 8013784:	a364      	add	r3, pc, #400	; (adr r3, 8013918 <_dtoa_r+0x2d0>)
 8013786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801378a:	f7ec feaf 	bl	80004ec <__aeabi_dmul>
 801378e:	4602      	mov	r2, r0
 8013790:	460b      	mov	r3, r1
 8013792:	4630      	mov	r0, r6
 8013794:	4639      	mov	r1, r7
 8013796:	f7ec fcf3 	bl	8000180 <__adddf3>
 801379a:	4606      	mov	r6, r0
 801379c:	460f      	mov	r7, r1
 801379e:	f7ed f955 	bl	8000a4c <__aeabi_d2iz>
 80137a2:	2200      	movs	r2, #0
 80137a4:	4683      	mov	fp, r0
 80137a6:	2300      	movs	r3, #0
 80137a8:	4630      	mov	r0, r6
 80137aa:	4639      	mov	r1, r7
 80137ac:	f7ed f910 	bl	80009d0 <__aeabi_dcmplt>
 80137b0:	b148      	cbz	r0, 80137c6 <_dtoa_r+0x17e>
 80137b2:	4658      	mov	r0, fp
 80137b4:	f7ec fe30 	bl	8000418 <__aeabi_i2d>
 80137b8:	4632      	mov	r2, r6
 80137ba:	463b      	mov	r3, r7
 80137bc:	f7ed f8fe 	bl	80009bc <__aeabi_dcmpeq>
 80137c0:	b908      	cbnz	r0, 80137c6 <_dtoa_r+0x17e>
 80137c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80137c6:	f1bb 0f16 	cmp.w	fp, #22
 80137ca:	d857      	bhi.n	801387c <_dtoa_r+0x234>
 80137cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80137d0:	4b5a      	ldr	r3, [pc, #360]	; (801393c <_dtoa_r+0x2f4>)
 80137d2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80137d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137da:	f7ed f8f9 	bl	80009d0 <__aeabi_dcmplt>
 80137de:	2800      	cmp	r0, #0
 80137e0:	d04e      	beq.n	8013880 <_dtoa_r+0x238>
 80137e2:	2300      	movs	r3, #0
 80137e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80137e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80137ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80137ec:	1b1b      	subs	r3, r3, r4
 80137ee:	1e5a      	subs	r2, r3, #1
 80137f0:	bf46      	itte	mi
 80137f2:	f1c3 0901 	rsbmi	r9, r3, #1
 80137f6:	2300      	movmi	r3, #0
 80137f8:	f04f 0900 	movpl.w	r9, #0
 80137fc:	9209      	str	r2, [sp, #36]	; 0x24
 80137fe:	bf48      	it	mi
 8013800:	9309      	strmi	r3, [sp, #36]	; 0x24
 8013802:	f1bb 0f00 	cmp.w	fp, #0
 8013806:	db3d      	blt.n	8013884 <_dtoa_r+0x23c>
 8013808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801380a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801380e:	445b      	add	r3, fp
 8013810:	9309      	str	r3, [sp, #36]	; 0x24
 8013812:	2300      	movs	r3, #0
 8013814:	930a      	str	r3, [sp, #40]	; 0x28
 8013816:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013818:	2b09      	cmp	r3, #9
 801381a:	d867      	bhi.n	80138ec <_dtoa_r+0x2a4>
 801381c:	2b05      	cmp	r3, #5
 801381e:	bfc4      	itt	gt
 8013820:	3b04      	subgt	r3, #4
 8013822:	9322      	strgt	r3, [sp, #136]	; 0x88
 8013824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013826:	bfc8      	it	gt
 8013828:	2400      	movgt	r4, #0
 801382a:	f1a3 0302 	sub.w	r3, r3, #2
 801382e:	bfd8      	it	le
 8013830:	2401      	movle	r4, #1
 8013832:	2b03      	cmp	r3, #3
 8013834:	f200 8086 	bhi.w	8013944 <_dtoa_r+0x2fc>
 8013838:	e8df f003 	tbb	[pc, r3]
 801383c:	5637392c 	.word	0x5637392c
 8013840:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8013844:	441c      	add	r4, r3
 8013846:	f204 4332 	addw	r3, r4, #1074	; 0x432
 801384a:	2b20      	cmp	r3, #32
 801384c:	bfc1      	itttt	gt
 801384e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013852:	fa09 f903 	lslgt.w	r9, r9, r3
 8013856:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 801385a:	fa26 f303 	lsrgt.w	r3, r6, r3
 801385e:	bfd6      	itet	le
 8013860:	f1c3 0320 	rsble	r3, r3, #32
 8013864:	ea49 0003 	orrgt.w	r0, r9, r3
 8013868:	fa06 f003 	lslle.w	r0, r6, r3
 801386c:	f7ec fdc4 	bl	80003f8 <__aeabi_ui2d>
 8013870:	2201      	movs	r2, #1
 8013872:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013876:	3c01      	subs	r4, #1
 8013878:	9213      	str	r2, [sp, #76]	; 0x4c
 801387a:	e76f      	b.n	801375c <_dtoa_r+0x114>
 801387c:	2301      	movs	r3, #1
 801387e:	e7b3      	b.n	80137e8 <_dtoa_r+0x1a0>
 8013880:	900f      	str	r0, [sp, #60]	; 0x3c
 8013882:	e7b2      	b.n	80137ea <_dtoa_r+0x1a2>
 8013884:	f1cb 0300 	rsb	r3, fp, #0
 8013888:	930a      	str	r3, [sp, #40]	; 0x28
 801388a:	2300      	movs	r3, #0
 801388c:	eba9 090b 	sub.w	r9, r9, fp
 8013890:	930e      	str	r3, [sp, #56]	; 0x38
 8013892:	e7c0      	b.n	8013816 <_dtoa_r+0x1ce>
 8013894:	2300      	movs	r3, #0
 8013896:	930b      	str	r3, [sp, #44]	; 0x2c
 8013898:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801389a:	2b00      	cmp	r3, #0
 801389c:	dc55      	bgt.n	801394a <_dtoa_r+0x302>
 801389e:	2301      	movs	r3, #1
 80138a0:	461a      	mov	r2, r3
 80138a2:	9306      	str	r3, [sp, #24]
 80138a4:	9308      	str	r3, [sp, #32]
 80138a6:	9223      	str	r2, [sp, #140]	; 0x8c
 80138a8:	e00b      	b.n	80138c2 <_dtoa_r+0x27a>
 80138aa:	2301      	movs	r3, #1
 80138ac:	e7f3      	b.n	8013896 <_dtoa_r+0x24e>
 80138ae:	2300      	movs	r3, #0
 80138b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80138b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80138b4:	445b      	add	r3, fp
 80138b6:	9306      	str	r3, [sp, #24]
 80138b8:	3301      	adds	r3, #1
 80138ba:	2b01      	cmp	r3, #1
 80138bc:	9308      	str	r3, [sp, #32]
 80138be:	bfb8      	it	lt
 80138c0:	2301      	movlt	r3, #1
 80138c2:	2100      	movs	r1, #0
 80138c4:	2204      	movs	r2, #4
 80138c6:	69e8      	ldr	r0, [r5, #28]
 80138c8:	f102 0614 	add.w	r6, r2, #20
 80138cc:	429e      	cmp	r6, r3
 80138ce:	d940      	bls.n	8013952 <_dtoa_r+0x30a>
 80138d0:	6041      	str	r1, [r0, #4]
 80138d2:	4628      	mov	r0, r5
 80138d4:	f000 fcf6 	bl	80142c4 <_Balloc>
 80138d8:	9003      	str	r0, [sp, #12]
 80138da:	2800      	cmp	r0, #0
 80138dc:	d13c      	bne.n	8013958 <_dtoa_r+0x310>
 80138de:	4602      	mov	r2, r0
 80138e0:	f240 11af 	movw	r1, #431	; 0x1af
 80138e4:	4b16      	ldr	r3, [pc, #88]	; (8013940 <_dtoa_r+0x2f8>)
 80138e6:	e6c3      	b.n	8013670 <_dtoa_r+0x28>
 80138e8:	2301      	movs	r3, #1
 80138ea:	e7e1      	b.n	80138b0 <_dtoa_r+0x268>
 80138ec:	2401      	movs	r4, #1
 80138ee:	2300      	movs	r3, #0
 80138f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80138f2:	9322      	str	r3, [sp, #136]	; 0x88
 80138f4:	f04f 33ff 	mov.w	r3, #4294967295
 80138f8:	2200      	movs	r2, #0
 80138fa:	9306      	str	r3, [sp, #24]
 80138fc:	9308      	str	r3, [sp, #32]
 80138fe:	2312      	movs	r3, #18
 8013900:	e7d1      	b.n	80138a6 <_dtoa_r+0x25e>
 8013902:	bf00      	nop
 8013904:	f3af 8000 	nop.w
 8013908:	636f4361 	.word	0x636f4361
 801390c:	3fd287a7 	.word	0x3fd287a7
 8013910:	8b60c8b3 	.word	0x8b60c8b3
 8013914:	3fc68a28 	.word	0x3fc68a28
 8013918:	509f79fb 	.word	0x509f79fb
 801391c:	3fd34413 	.word	0x3fd34413
 8013920:	08016354 	.word	0x08016354
 8013924:	0801636b 	.word	0x0801636b
 8013928:	7ff00000 	.word	0x7ff00000
 801392c:	08016350 	.word	0x08016350
 8013930:	08016347 	.word	0x08016347
 8013934:	08016554 	.word	0x08016554
 8013938:	3ff80000 	.word	0x3ff80000
 801393c:	08016458 	.word	0x08016458
 8013940:	080163c3 	.word	0x080163c3
 8013944:	2301      	movs	r3, #1
 8013946:	930b      	str	r3, [sp, #44]	; 0x2c
 8013948:	e7d4      	b.n	80138f4 <_dtoa_r+0x2ac>
 801394a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801394c:	9306      	str	r3, [sp, #24]
 801394e:	9308      	str	r3, [sp, #32]
 8013950:	e7b7      	b.n	80138c2 <_dtoa_r+0x27a>
 8013952:	3101      	adds	r1, #1
 8013954:	0052      	lsls	r2, r2, #1
 8013956:	e7b7      	b.n	80138c8 <_dtoa_r+0x280>
 8013958:	69eb      	ldr	r3, [r5, #28]
 801395a:	9a03      	ldr	r2, [sp, #12]
 801395c:	601a      	str	r2, [r3, #0]
 801395e:	9b08      	ldr	r3, [sp, #32]
 8013960:	2b0e      	cmp	r3, #14
 8013962:	f200 80a8 	bhi.w	8013ab6 <_dtoa_r+0x46e>
 8013966:	2c00      	cmp	r4, #0
 8013968:	f000 80a5 	beq.w	8013ab6 <_dtoa_r+0x46e>
 801396c:	f1bb 0f00 	cmp.w	fp, #0
 8013970:	dd34      	ble.n	80139dc <_dtoa_r+0x394>
 8013972:	4b9a      	ldr	r3, [pc, #616]	; (8013bdc <_dtoa_r+0x594>)
 8013974:	f00b 020f 	and.w	r2, fp, #15
 8013978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801397c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013980:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013984:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8013988:	ea4f 142b 	mov.w	r4, fp, asr #4
 801398c:	d016      	beq.n	80139bc <_dtoa_r+0x374>
 801398e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013992:	4b93      	ldr	r3, [pc, #588]	; (8013be0 <_dtoa_r+0x598>)
 8013994:	2703      	movs	r7, #3
 8013996:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801399a:	f7ec fed1 	bl	8000740 <__aeabi_ddiv>
 801399e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80139a2:	f004 040f 	and.w	r4, r4, #15
 80139a6:	4e8e      	ldr	r6, [pc, #568]	; (8013be0 <_dtoa_r+0x598>)
 80139a8:	b954      	cbnz	r4, 80139c0 <_dtoa_r+0x378>
 80139aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80139ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80139b2:	f7ec fec5 	bl	8000740 <__aeabi_ddiv>
 80139b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80139ba:	e029      	b.n	8013a10 <_dtoa_r+0x3c8>
 80139bc:	2702      	movs	r7, #2
 80139be:	e7f2      	b.n	80139a6 <_dtoa_r+0x35e>
 80139c0:	07e1      	lsls	r1, r4, #31
 80139c2:	d508      	bpl.n	80139d6 <_dtoa_r+0x38e>
 80139c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80139c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80139cc:	f7ec fd8e 	bl	80004ec <__aeabi_dmul>
 80139d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80139d4:	3701      	adds	r7, #1
 80139d6:	1064      	asrs	r4, r4, #1
 80139d8:	3608      	adds	r6, #8
 80139da:	e7e5      	b.n	80139a8 <_dtoa_r+0x360>
 80139dc:	f000 80a5 	beq.w	8013b2a <_dtoa_r+0x4e2>
 80139e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80139e4:	f1cb 0400 	rsb	r4, fp, #0
 80139e8:	4b7c      	ldr	r3, [pc, #496]	; (8013bdc <_dtoa_r+0x594>)
 80139ea:	f004 020f 	and.w	r2, r4, #15
 80139ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80139f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f6:	f7ec fd79 	bl	80004ec <__aeabi_dmul>
 80139fa:	2702      	movs	r7, #2
 80139fc:	2300      	movs	r3, #0
 80139fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a02:	4e77      	ldr	r6, [pc, #476]	; (8013be0 <_dtoa_r+0x598>)
 8013a04:	1124      	asrs	r4, r4, #4
 8013a06:	2c00      	cmp	r4, #0
 8013a08:	f040 8084 	bne.w	8013b14 <_dtoa_r+0x4cc>
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d1d2      	bne.n	80139b6 <_dtoa_r+0x36e>
 8013a10:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013a14:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8013a18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	f000 8087 	beq.w	8013b2e <_dtoa_r+0x4e6>
 8013a20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013a24:	2200      	movs	r2, #0
 8013a26:	4b6f      	ldr	r3, [pc, #444]	; (8013be4 <_dtoa_r+0x59c>)
 8013a28:	f7ec ffd2 	bl	80009d0 <__aeabi_dcmplt>
 8013a2c:	2800      	cmp	r0, #0
 8013a2e:	d07e      	beq.n	8013b2e <_dtoa_r+0x4e6>
 8013a30:	9b08      	ldr	r3, [sp, #32]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d07b      	beq.n	8013b2e <_dtoa_r+0x4e6>
 8013a36:	9b06      	ldr	r3, [sp, #24]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	dd38      	ble.n	8013aae <_dtoa_r+0x466>
 8013a3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013a40:	2200      	movs	r2, #0
 8013a42:	4b69      	ldr	r3, [pc, #420]	; (8013be8 <_dtoa_r+0x5a0>)
 8013a44:	f7ec fd52 	bl	80004ec <__aeabi_dmul>
 8013a48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a4c:	9c06      	ldr	r4, [sp, #24]
 8013a4e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8013a52:	3701      	adds	r7, #1
 8013a54:	4638      	mov	r0, r7
 8013a56:	f7ec fcdf 	bl	8000418 <__aeabi_i2d>
 8013a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a5e:	f7ec fd45 	bl	80004ec <__aeabi_dmul>
 8013a62:	2200      	movs	r2, #0
 8013a64:	4b61      	ldr	r3, [pc, #388]	; (8013bec <_dtoa_r+0x5a4>)
 8013a66:	f7ec fb8b 	bl	8000180 <__adddf3>
 8013a6a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013a6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013a72:	9611      	str	r6, [sp, #68]	; 0x44
 8013a74:	2c00      	cmp	r4, #0
 8013a76:	d15d      	bne.n	8013b34 <_dtoa_r+0x4ec>
 8013a78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	4b5c      	ldr	r3, [pc, #368]	; (8013bf0 <_dtoa_r+0x5a8>)
 8013a80:	f7ec fb7c 	bl	800017c <__aeabi_dsub>
 8013a84:	4602      	mov	r2, r0
 8013a86:	460b      	mov	r3, r1
 8013a88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013a8c:	4633      	mov	r3, r6
 8013a8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013a90:	f7ec ffbc 	bl	8000a0c <__aeabi_dcmpgt>
 8013a94:	2800      	cmp	r0, #0
 8013a96:	f040 8295 	bne.w	8013fc4 <_dtoa_r+0x97c>
 8013a9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013aa0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013aa4:	f7ec ff94 	bl	80009d0 <__aeabi_dcmplt>
 8013aa8:	2800      	cmp	r0, #0
 8013aaa:	f040 8289 	bne.w	8013fc0 <_dtoa_r+0x978>
 8013aae:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8013ab2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013ab6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	f2c0 8151 	blt.w	8013d60 <_dtoa_r+0x718>
 8013abe:	f1bb 0f0e 	cmp.w	fp, #14
 8013ac2:	f300 814d 	bgt.w	8013d60 <_dtoa_r+0x718>
 8013ac6:	4b45      	ldr	r3, [pc, #276]	; (8013bdc <_dtoa_r+0x594>)
 8013ac8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013acc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013ad0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8013ad4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	f280 80da 	bge.w	8013c90 <_dtoa_r+0x648>
 8013adc:	9b08      	ldr	r3, [sp, #32]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	f300 80d6 	bgt.w	8013c90 <_dtoa_r+0x648>
 8013ae4:	f040 826b 	bne.w	8013fbe <_dtoa_r+0x976>
 8013ae8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013aec:	2200      	movs	r2, #0
 8013aee:	4b40      	ldr	r3, [pc, #256]	; (8013bf0 <_dtoa_r+0x5a8>)
 8013af0:	f7ec fcfc 	bl	80004ec <__aeabi_dmul>
 8013af4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013af8:	f7ec ff7e 	bl	80009f8 <__aeabi_dcmpge>
 8013afc:	9c08      	ldr	r4, [sp, #32]
 8013afe:	4626      	mov	r6, r4
 8013b00:	2800      	cmp	r0, #0
 8013b02:	f040 8241 	bne.w	8013f88 <_dtoa_r+0x940>
 8013b06:	2331      	movs	r3, #49	; 0x31
 8013b08:	9f03      	ldr	r7, [sp, #12]
 8013b0a:	f10b 0b01 	add.w	fp, fp, #1
 8013b0e:	f807 3b01 	strb.w	r3, [r7], #1
 8013b12:	e23d      	b.n	8013f90 <_dtoa_r+0x948>
 8013b14:	07e2      	lsls	r2, r4, #31
 8013b16:	d505      	bpl.n	8013b24 <_dtoa_r+0x4dc>
 8013b18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013b1c:	f7ec fce6 	bl	80004ec <__aeabi_dmul>
 8013b20:	2301      	movs	r3, #1
 8013b22:	3701      	adds	r7, #1
 8013b24:	1064      	asrs	r4, r4, #1
 8013b26:	3608      	adds	r6, #8
 8013b28:	e76d      	b.n	8013a06 <_dtoa_r+0x3be>
 8013b2a:	2702      	movs	r7, #2
 8013b2c:	e770      	b.n	8013a10 <_dtoa_r+0x3c8>
 8013b2e:	46d8      	mov	r8, fp
 8013b30:	9c08      	ldr	r4, [sp, #32]
 8013b32:	e78f      	b.n	8013a54 <_dtoa_r+0x40c>
 8013b34:	9903      	ldr	r1, [sp, #12]
 8013b36:	4b29      	ldr	r3, [pc, #164]	; (8013bdc <_dtoa_r+0x594>)
 8013b38:	4421      	add	r1, r4
 8013b3a:	9112      	str	r1, [sp, #72]	; 0x48
 8013b3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013b42:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8013b46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013b4a:	2900      	cmp	r1, #0
 8013b4c:	d054      	beq.n	8013bf8 <_dtoa_r+0x5b0>
 8013b4e:	2000      	movs	r0, #0
 8013b50:	4928      	ldr	r1, [pc, #160]	; (8013bf4 <_dtoa_r+0x5ac>)
 8013b52:	f7ec fdf5 	bl	8000740 <__aeabi_ddiv>
 8013b56:	463b      	mov	r3, r7
 8013b58:	4632      	mov	r2, r6
 8013b5a:	f7ec fb0f 	bl	800017c <__aeabi_dsub>
 8013b5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013b62:	9f03      	ldr	r7, [sp, #12]
 8013b64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b68:	f7ec ff70 	bl	8000a4c <__aeabi_d2iz>
 8013b6c:	4604      	mov	r4, r0
 8013b6e:	f7ec fc53 	bl	8000418 <__aeabi_i2d>
 8013b72:	4602      	mov	r2, r0
 8013b74:	460b      	mov	r3, r1
 8013b76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b7a:	f7ec faff 	bl	800017c <__aeabi_dsub>
 8013b7e:	4602      	mov	r2, r0
 8013b80:	460b      	mov	r3, r1
 8013b82:	3430      	adds	r4, #48	; 0x30
 8013b84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013b88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013b8c:	f807 4b01 	strb.w	r4, [r7], #1
 8013b90:	f7ec ff1e 	bl	80009d0 <__aeabi_dcmplt>
 8013b94:	2800      	cmp	r0, #0
 8013b96:	d173      	bne.n	8013c80 <_dtoa_r+0x638>
 8013b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b9c:	2000      	movs	r0, #0
 8013b9e:	4911      	ldr	r1, [pc, #68]	; (8013be4 <_dtoa_r+0x59c>)
 8013ba0:	f7ec faec 	bl	800017c <__aeabi_dsub>
 8013ba4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013ba8:	f7ec ff12 	bl	80009d0 <__aeabi_dcmplt>
 8013bac:	2800      	cmp	r0, #0
 8013bae:	f040 80b6 	bne.w	8013d1e <_dtoa_r+0x6d6>
 8013bb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013bb4:	429f      	cmp	r7, r3
 8013bb6:	f43f af7a 	beq.w	8013aae <_dtoa_r+0x466>
 8013bba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	4b09      	ldr	r3, [pc, #36]	; (8013be8 <_dtoa_r+0x5a0>)
 8013bc2:	f7ec fc93 	bl	80004ec <__aeabi_dmul>
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013bd0:	4b05      	ldr	r3, [pc, #20]	; (8013be8 <_dtoa_r+0x5a0>)
 8013bd2:	f7ec fc8b 	bl	80004ec <__aeabi_dmul>
 8013bd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013bda:	e7c3      	b.n	8013b64 <_dtoa_r+0x51c>
 8013bdc:	08016458 	.word	0x08016458
 8013be0:	08016430 	.word	0x08016430
 8013be4:	3ff00000 	.word	0x3ff00000
 8013be8:	40240000 	.word	0x40240000
 8013bec:	401c0000 	.word	0x401c0000
 8013bf0:	40140000 	.word	0x40140000
 8013bf4:	3fe00000 	.word	0x3fe00000
 8013bf8:	4630      	mov	r0, r6
 8013bfa:	4639      	mov	r1, r7
 8013bfc:	f7ec fc76 	bl	80004ec <__aeabi_dmul>
 8013c00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c02:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013c06:	9c03      	ldr	r4, [sp, #12]
 8013c08:	9314      	str	r3, [sp, #80]	; 0x50
 8013c0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c0e:	f7ec ff1d 	bl	8000a4c <__aeabi_d2iz>
 8013c12:	9015      	str	r0, [sp, #84]	; 0x54
 8013c14:	f7ec fc00 	bl	8000418 <__aeabi_i2d>
 8013c18:	4602      	mov	r2, r0
 8013c1a:	460b      	mov	r3, r1
 8013c1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c20:	f7ec faac 	bl	800017c <__aeabi_dsub>
 8013c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013c26:	4606      	mov	r6, r0
 8013c28:	3330      	adds	r3, #48	; 0x30
 8013c2a:	f804 3b01 	strb.w	r3, [r4], #1
 8013c2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c30:	460f      	mov	r7, r1
 8013c32:	429c      	cmp	r4, r3
 8013c34:	f04f 0200 	mov.w	r2, #0
 8013c38:	d124      	bne.n	8013c84 <_dtoa_r+0x63c>
 8013c3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013c3e:	4baf      	ldr	r3, [pc, #700]	; (8013efc <_dtoa_r+0x8b4>)
 8013c40:	f7ec fa9e 	bl	8000180 <__adddf3>
 8013c44:	4602      	mov	r2, r0
 8013c46:	460b      	mov	r3, r1
 8013c48:	4630      	mov	r0, r6
 8013c4a:	4639      	mov	r1, r7
 8013c4c:	f7ec fede 	bl	8000a0c <__aeabi_dcmpgt>
 8013c50:	2800      	cmp	r0, #0
 8013c52:	d163      	bne.n	8013d1c <_dtoa_r+0x6d4>
 8013c54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013c58:	2000      	movs	r0, #0
 8013c5a:	49a8      	ldr	r1, [pc, #672]	; (8013efc <_dtoa_r+0x8b4>)
 8013c5c:	f7ec fa8e 	bl	800017c <__aeabi_dsub>
 8013c60:	4602      	mov	r2, r0
 8013c62:	460b      	mov	r3, r1
 8013c64:	4630      	mov	r0, r6
 8013c66:	4639      	mov	r1, r7
 8013c68:	f7ec feb2 	bl	80009d0 <__aeabi_dcmplt>
 8013c6c:	2800      	cmp	r0, #0
 8013c6e:	f43f af1e 	beq.w	8013aae <_dtoa_r+0x466>
 8013c72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8013c74:	1e7b      	subs	r3, r7, #1
 8013c76:	9314      	str	r3, [sp, #80]	; 0x50
 8013c78:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8013c7c:	2b30      	cmp	r3, #48	; 0x30
 8013c7e:	d0f8      	beq.n	8013c72 <_dtoa_r+0x62a>
 8013c80:	46c3      	mov	fp, r8
 8013c82:	e03b      	b.n	8013cfc <_dtoa_r+0x6b4>
 8013c84:	4b9e      	ldr	r3, [pc, #632]	; (8013f00 <_dtoa_r+0x8b8>)
 8013c86:	f7ec fc31 	bl	80004ec <__aeabi_dmul>
 8013c8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c8e:	e7bc      	b.n	8013c0a <_dtoa_r+0x5c2>
 8013c90:	9f03      	ldr	r7, [sp, #12]
 8013c92:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8013c96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c9a:	4640      	mov	r0, r8
 8013c9c:	4649      	mov	r1, r9
 8013c9e:	f7ec fd4f 	bl	8000740 <__aeabi_ddiv>
 8013ca2:	f7ec fed3 	bl	8000a4c <__aeabi_d2iz>
 8013ca6:	4604      	mov	r4, r0
 8013ca8:	f7ec fbb6 	bl	8000418 <__aeabi_i2d>
 8013cac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013cb0:	f7ec fc1c 	bl	80004ec <__aeabi_dmul>
 8013cb4:	4602      	mov	r2, r0
 8013cb6:	460b      	mov	r3, r1
 8013cb8:	4640      	mov	r0, r8
 8013cba:	4649      	mov	r1, r9
 8013cbc:	f7ec fa5e 	bl	800017c <__aeabi_dsub>
 8013cc0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8013cc4:	f807 6b01 	strb.w	r6, [r7], #1
 8013cc8:	9e03      	ldr	r6, [sp, #12]
 8013cca:	f8dd c020 	ldr.w	ip, [sp, #32]
 8013cce:	1bbe      	subs	r6, r7, r6
 8013cd0:	45b4      	cmp	ip, r6
 8013cd2:	4602      	mov	r2, r0
 8013cd4:	460b      	mov	r3, r1
 8013cd6:	d136      	bne.n	8013d46 <_dtoa_r+0x6fe>
 8013cd8:	f7ec fa52 	bl	8000180 <__adddf3>
 8013cdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013ce0:	4680      	mov	r8, r0
 8013ce2:	4689      	mov	r9, r1
 8013ce4:	f7ec fe92 	bl	8000a0c <__aeabi_dcmpgt>
 8013ce8:	bb58      	cbnz	r0, 8013d42 <_dtoa_r+0x6fa>
 8013cea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013cee:	4640      	mov	r0, r8
 8013cf0:	4649      	mov	r1, r9
 8013cf2:	f7ec fe63 	bl	80009bc <__aeabi_dcmpeq>
 8013cf6:	b108      	cbz	r0, 8013cfc <_dtoa_r+0x6b4>
 8013cf8:	07e3      	lsls	r3, r4, #31
 8013cfa:	d422      	bmi.n	8013d42 <_dtoa_r+0x6fa>
 8013cfc:	4651      	mov	r1, sl
 8013cfe:	4628      	mov	r0, r5
 8013d00:	f000 fb20 	bl	8014344 <_Bfree>
 8013d04:	2300      	movs	r3, #0
 8013d06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013d08:	703b      	strb	r3, [r7, #0]
 8013d0a:	f10b 0301 	add.w	r3, fp, #1
 8013d0e:	6013      	str	r3, [r2, #0]
 8013d10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	f43f ace6 	beq.w	80136e4 <_dtoa_r+0x9c>
 8013d18:	601f      	str	r7, [r3, #0]
 8013d1a:	e4e3      	b.n	80136e4 <_dtoa_r+0x9c>
 8013d1c:	4627      	mov	r7, r4
 8013d1e:	463b      	mov	r3, r7
 8013d20:	461f      	mov	r7, r3
 8013d22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d26:	2a39      	cmp	r2, #57	; 0x39
 8013d28:	d107      	bne.n	8013d3a <_dtoa_r+0x6f2>
 8013d2a:	9a03      	ldr	r2, [sp, #12]
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d1f7      	bne.n	8013d20 <_dtoa_r+0x6d8>
 8013d30:	2230      	movs	r2, #48	; 0x30
 8013d32:	9903      	ldr	r1, [sp, #12]
 8013d34:	f108 0801 	add.w	r8, r8, #1
 8013d38:	700a      	strb	r2, [r1, #0]
 8013d3a:	781a      	ldrb	r2, [r3, #0]
 8013d3c:	3201      	adds	r2, #1
 8013d3e:	701a      	strb	r2, [r3, #0]
 8013d40:	e79e      	b.n	8013c80 <_dtoa_r+0x638>
 8013d42:	46d8      	mov	r8, fp
 8013d44:	e7eb      	b.n	8013d1e <_dtoa_r+0x6d6>
 8013d46:	2200      	movs	r2, #0
 8013d48:	4b6d      	ldr	r3, [pc, #436]	; (8013f00 <_dtoa_r+0x8b8>)
 8013d4a:	f7ec fbcf 	bl	80004ec <__aeabi_dmul>
 8013d4e:	2200      	movs	r2, #0
 8013d50:	2300      	movs	r3, #0
 8013d52:	4680      	mov	r8, r0
 8013d54:	4689      	mov	r9, r1
 8013d56:	f7ec fe31 	bl	80009bc <__aeabi_dcmpeq>
 8013d5a:	2800      	cmp	r0, #0
 8013d5c:	d09b      	beq.n	8013c96 <_dtoa_r+0x64e>
 8013d5e:	e7cd      	b.n	8013cfc <_dtoa_r+0x6b4>
 8013d60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013d62:	2a00      	cmp	r2, #0
 8013d64:	f000 80c4 	beq.w	8013ef0 <_dtoa_r+0x8a8>
 8013d68:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013d6a:	2a01      	cmp	r2, #1
 8013d6c:	f300 80a8 	bgt.w	8013ec0 <_dtoa_r+0x878>
 8013d70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013d72:	2a00      	cmp	r2, #0
 8013d74:	f000 80a0 	beq.w	8013eb8 <_dtoa_r+0x870>
 8013d78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013d7c:	464f      	mov	r7, r9
 8013d7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d82:	2101      	movs	r1, #1
 8013d84:	441a      	add	r2, r3
 8013d86:	4628      	mov	r0, r5
 8013d88:	4499      	add	r9, r3
 8013d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8013d8c:	f000 fb90 	bl	80144b0 <__i2b>
 8013d90:	4606      	mov	r6, r0
 8013d92:	b15f      	cbz	r7, 8013dac <_dtoa_r+0x764>
 8013d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	dd08      	ble.n	8013dac <_dtoa_r+0x764>
 8013d9a:	42bb      	cmp	r3, r7
 8013d9c:	bfa8      	it	ge
 8013d9e:	463b      	movge	r3, r7
 8013da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013da2:	eba9 0903 	sub.w	r9, r9, r3
 8013da6:	1aff      	subs	r7, r7, r3
 8013da8:	1ad3      	subs	r3, r2, r3
 8013daa:	9309      	str	r3, [sp, #36]	; 0x24
 8013dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013dae:	b1f3      	cbz	r3, 8013dee <_dtoa_r+0x7a6>
 8013db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	f000 80a0 	beq.w	8013ef8 <_dtoa_r+0x8b0>
 8013db8:	2c00      	cmp	r4, #0
 8013dba:	dd10      	ble.n	8013dde <_dtoa_r+0x796>
 8013dbc:	4631      	mov	r1, r6
 8013dbe:	4622      	mov	r2, r4
 8013dc0:	4628      	mov	r0, r5
 8013dc2:	f000 fc33 	bl	801462c <__pow5mult>
 8013dc6:	4652      	mov	r2, sl
 8013dc8:	4601      	mov	r1, r0
 8013dca:	4606      	mov	r6, r0
 8013dcc:	4628      	mov	r0, r5
 8013dce:	f000 fb85 	bl	80144dc <__multiply>
 8013dd2:	4680      	mov	r8, r0
 8013dd4:	4651      	mov	r1, sl
 8013dd6:	4628      	mov	r0, r5
 8013dd8:	f000 fab4 	bl	8014344 <_Bfree>
 8013ddc:	46c2      	mov	sl, r8
 8013dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013de0:	1b1a      	subs	r2, r3, r4
 8013de2:	d004      	beq.n	8013dee <_dtoa_r+0x7a6>
 8013de4:	4651      	mov	r1, sl
 8013de6:	4628      	mov	r0, r5
 8013de8:	f000 fc20 	bl	801462c <__pow5mult>
 8013dec:	4682      	mov	sl, r0
 8013dee:	2101      	movs	r1, #1
 8013df0:	4628      	mov	r0, r5
 8013df2:	f000 fb5d 	bl	80144b0 <__i2b>
 8013df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013df8:	4604      	mov	r4, r0
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	f340 8082 	ble.w	8013f04 <_dtoa_r+0x8bc>
 8013e00:	461a      	mov	r2, r3
 8013e02:	4601      	mov	r1, r0
 8013e04:	4628      	mov	r0, r5
 8013e06:	f000 fc11 	bl	801462c <__pow5mult>
 8013e0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013e0c:	4604      	mov	r4, r0
 8013e0e:	2b01      	cmp	r3, #1
 8013e10:	dd7b      	ble.n	8013f0a <_dtoa_r+0x8c2>
 8013e12:	f04f 0800 	mov.w	r8, #0
 8013e16:	6923      	ldr	r3, [r4, #16]
 8013e18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013e1c:	6918      	ldr	r0, [r3, #16]
 8013e1e:	f000 faf9 	bl	8014414 <__hi0bits>
 8013e22:	f1c0 0020 	rsb	r0, r0, #32
 8013e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e28:	4418      	add	r0, r3
 8013e2a:	f010 001f 	ands.w	r0, r0, #31
 8013e2e:	f000 8092 	beq.w	8013f56 <_dtoa_r+0x90e>
 8013e32:	f1c0 0320 	rsb	r3, r0, #32
 8013e36:	2b04      	cmp	r3, #4
 8013e38:	f340 8085 	ble.w	8013f46 <_dtoa_r+0x8fe>
 8013e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e3e:	f1c0 001c 	rsb	r0, r0, #28
 8013e42:	4403      	add	r3, r0
 8013e44:	4481      	add	r9, r0
 8013e46:	4407      	add	r7, r0
 8013e48:	9309      	str	r3, [sp, #36]	; 0x24
 8013e4a:	f1b9 0f00 	cmp.w	r9, #0
 8013e4e:	dd05      	ble.n	8013e5c <_dtoa_r+0x814>
 8013e50:	4651      	mov	r1, sl
 8013e52:	464a      	mov	r2, r9
 8013e54:	4628      	mov	r0, r5
 8013e56:	f000 fc43 	bl	80146e0 <__lshift>
 8013e5a:	4682      	mov	sl, r0
 8013e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	dd05      	ble.n	8013e6e <_dtoa_r+0x826>
 8013e62:	4621      	mov	r1, r4
 8013e64:	461a      	mov	r2, r3
 8013e66:	4628      	mov	r0, r5
 8013e68:	f000 fc3a 	bl	80146e0 <__lshift>
 8013e6c:	4604      	mov	r4, r0
 8013e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d072      	beq.n	8013f5a <_dtoa_r+0x912>
 8013e74:	4621      	mov	r1, r4
 8013e76:	4650      	mov	r0, sl
 8013e78:	f000 fc9e 	bl	80147b8 <__mcmp>
 8013e7c:	2800      	cmp	r0, #0
 8013e7e:	da6c      	bge.n	8013f5a <_dtoa_r+0x912>
 8013e80:	2300      	movs	r3, #0
 8013e82:	4651      	mov	r1, sl
 8013e84:	220a      	movs	r2, #10
 8013e86:	4628      	mov	r0, r5
 8013e88:	f000 fa7e 	bl	8014388 <__multadd>
 8013e8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e8e:	4682      	mov	sl, r0
 8013e90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	f000 81ac 	beq.w	80141f2 <_dtoa_r+0xbaa>
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	4631      	mov	r1, r6
 8013e9e:	220a      	movs	r2, #10
 8013ea0:	4628      	mov	r0, r5
 8013ea2:	f000 fa71 	bl	8014388 <__multadd>
 8013ea6:	9b06      	ldr	r3, [sp, #24]
 8013ea8:	4606      	mov	r6, r0
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	f300 8093 	bgt.w	8013fd6 <_dtoa_r+0x98e>
 8013eb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013eb2:	2b02      	cmp	r3, #2
 8013eb4:	dc59      	bgt.n	8013f6a <_dtoa_r+0x922>
 8013eb6:	e08e      	b.n	8013fd6 <_dtoa_r+0x98e>
 8013eb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013eba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013ebe:	e75d      	b.n	8013d7c <_dtoa_r+0x734>
 8013ec0:	9b08      	ldr	r3, [sp, #32]
 8013ec2:	1e5c      	subs	r4, r3, #1
 8013ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ec6:	42a3      	cmp	r3, r4
 8013ec8:	bfbf      	itttt	lt
 8013eca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013ecc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8013ece:	1ae3      	sublt	r3, r4, r3
 8013ed0:	18d2      	addlt	r2, r2, r3
 8013ed2:	bfa8      	it	ge
 8013ed4:	1b1c      	subge	r4, r3, r4
 8013ed6:	9b08      	ldr	r3, [sp, #32]
 8013ed8:	bfbe      	ittt	lt
 8013eda:	940a      	strlt	r4, [sp, #40]	; 0x28
 8013edc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8013ede:	2400      	movlt	r4, #0
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	bfb5      	itete	lt
 8013ee4:	eba9 0703 	sublt.w	r7, r9, r3
 8013ee8:	464f      	movge	r7, r9
 8013eea:	2300      	movlt	r3, #0
 8013eec:	9b08      	ldrge	r3, [sp, #32]
 8013eee:	e747      	b.n	8013d80 <_dtoa_r+0x738>
 8013ef0:	464f      	mov	r7, r9
 8013ef2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013ef4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013ef6:	e74c      	b.n	8013d92 <_dtoa_r+0x74a>
 8013ef8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013efa:	e773      	b.n	8013de4 <_dtoa_r+0x79c>
 8013efc:	3fe00000 	.word	0x3fe00000
 8013f00:	40240000 	.word	0x40240000
 8013f04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013f06:	2b01      	cmp	r3, #1
 8013f08:	dc18      	bgt.n	8013f3c <_dtoa_r+0x8f4>
 8013f0a:	9b04      	ldr	r3, [sp, #16]
 8013f0c:	b9b3      	cbnz	r3, 8013f3c <_dtoa_r+0x8f4>
 8013f0e:	9b05      	ldr	r3, [sp, #20]
 8013f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f14:	b993      	cbnz	r3, 8013f3c <_dtoa_r+0x8f4>
 8013f16:	9b05      	ldr	r3, [sp, #20]
 8013f18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013f1c:	0d1b      	lsrs	r3, r3, #20
 8013f1e:	051b      	lsls	r3, r3, #20
 8013f20:	b17b      	cbz	r3, 8013f42 <_dtoa_r+0x8fa>
 8013f22:	f04f 0801 	mov.w	r8, #1
 8013f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f28:	f109 0901 	add.w	r9, r9, #1
 8013f2c:	3301      	adds	r3, #1
 8013f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8013f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	f47f af6f 	bne.w	8013e16 <_dtoa_r+0x7ce>
 8013f38:	2001      	movs	r0, #1
 8013f3a:	e774      	b.n	8013e26 <_dtoa_r+0x7de>
 8013f3c:	f04f 0800 	mov.w	r8, #0
 8013f40:	e7f6      	b.n	8013f30 <_dtoa_r+0x8e8>
 8013f42:	4698      	mov	r8, r3
 8013f44:	e7f4      	b.n	8013f30 <_dtoa_r+0x8e8>
 8013f46:	d080      	beq.n	8013e4a <_dtoa_r+0x802>
 8013f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f4a:	331c      	adds	r3, #28
 8013f4c:	441a      	add	r2, r3
 8013f4e:	4499      	add	r9, r3
 8013f50:	441f      	add	r7, r3
 8013f52:	9209      	str	r2, [sp, #36]	; 0x24
 8013f54:	e779      	b.n	8013e4a <_dtoa_r+0x802>
 8013f56:	4603      	mov	r3, r0
 8013f58:	e7f6      	b.n	8013f48 <_dtoa_r+0x900>
 8013f5a:	9b08      	ldr	r3, [sp, #32]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	dc34      	bgt.n	8013fca <_dtoa_r+0x982>
 8013f60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013f62:	2b02      	cmp	r3, #2
 8013f64:	dd31      	ble.n	8013fca <_dtoa_r+0x982>
 8013f66:	9b08      	ldr	r3, [sp, #32]
 8013f68:	9306      	str	r3, [sp, #24]
 8013f6a:	9b06      	ldr	r3, [sp, #24]
 8013f6c:	b963      	cbnz	r3, 8013f88 <_dtoa_r+0x940>
 8013f6e:	4621      	mov	r1, r4
 8013f70:	2205      	movs	r2, #5
 8013f72:	4628      	mov	r0, r5
 8013f74:	f000 fa08 	bl	8014388 <__multadd>
 8013f78:	4601      	mov	r1, r0
 8013f7a:	4604      	mov	r4, r0
 8013f7c:	4650      	mov	r0, sl
 8013f7e:	f000 fc1b 	bl	80147b8 <__mcmp>
 8013f82:	2800      	cmp	r0, #0
 8013f84:	f73f adbf 	bgt.w	8013b06 <_dtoa_r+0x4be>
 8013f88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013f8a:	9f03      	ldr	r7, [sp, #12]
 8013f8c:	ea6f 0b03 	mvn.w	fp, r3
 8013f90:	f04f 0800 	mov.w	r8, #0
 8013f94:	4621      	mov	r1, r4
 8013f96:	4628      	mov	r0, r5
 8013f98:	f000 f9d4 	bl	8014344 <_Bfree>
 8013f9c:	2e00      	cmp	r6, #0
 8013f9e:	f43f aead 	beq.w	8013cfc <_dtoa_r+0x6b4>
 8013fa2:	f1b8 0f00 	cmp.w	r8, #0
 8013fa6:	d005      	beq.n	8013fb4 <_dtoa_r+0x96c>
 8013fa8:	45b0      	cmp	r8, r6
 8013faa:	d003      	beq.n	8013fb4 <_dtoa_r+0x96c>
 8013fac:	4641      	mov	r1, r8
 8013fae:	4628      	mov	r0, r5
 8013fb0:	f000 f9c8 	bl	8014344 <_Bfree>
 8013fb4:	4631      	mov	r1, r6
 8013fb6:	4628      	mov	r0, r5
 8013fb8:	f000 f9c4 	bl	8014344 <_Bfree>
 8013fbc:	e69e      	b.n	8013cfc <_dtoa_r+0x6b4>
 8013fbe:	2400      	movs	r4, #0
 8013fc0:	4626      	mov	r6, r4
 8013fc2:	e7e1      	b.n	8013f88 <_dtoa_r+0x940>
 8013fc4:	46c3      	mov	fp, r8
 8013fc6:	4626      	mov	r6, r4
 8013fc8:	e59d      	b.n	8013b06 <_dtoa_r+0x4be>
 8013fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	f000 80c8 	beq.w	8014162 <_dtoa_r+0xb1a>
 8013fd2:	9b08      	ldr	r3, [sp, #32]
 8013fd4:	9306      	str	r3, [sp, #24]
 8013fd6:	2f00      	cmp	r7, #0
 8013fd8:	dd05      	ble.n	8013fe6 <_dtoa_r+0x99e>
 8013fda:	4631      	mov	r1, r6
 8013fdc:	463a      	mov	r2, r7
 8013fde:	4628      	mov	r0, r5
 8013fe0:	f000 fb7e 	bl	80146e0 <__lshift>
 8013fe4:	4606      	mov	r6, r0
 8013fe6:	f1b8 0f00 	cmp.w	r8, #0
 8013fea:	d05b      	beq.n	80140a4 <_dtoa_r+0xa5c>
 8013fec:	4628      	mov	r0, r5
 8013fee:	6871      	ldr	r1, [r6, #4]
 8013ff0:	f000 f968 	bl	80142c4 <_Balloc>
 8013ff4:	4607      	mov	r7, r0
 8013ff6:	b928      	cbnz	r0, 8014004 <_dtoa_r+0x9bc>
 8013ff8:	4602      	mov	r2, r0
 8013ffa:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013ffe:	4b81      	ldr	r3, [pc, #516]	; (8014204 <_dtoa_r+0xbbc>)
 8014000:	f7ff bb36 	b.w	8013670 <_dtoa_r+0x28>
 8014004:	6932      	ldr	r2, [r6, #16]
 8014006:	f106 010c 	add.w	r1, r6, #12
 801400a:	3202      	adds	r2, #2
 801400c:	0092      	lsls	r2, r2, #2
 801400e:	300c      	adds	r0, #12
 8014010:	f7ff fa61 	bl	80134d6 <memcpy>
 8014014:	2201      	movs	r2, #1
 8014016:	4639      	mov	r1, r7
 8014018:	4628      	mov	r0, r5
 801401a:	f000 fb61 	bl	80146e0 <__lshift>
 801401e:	46b0      	mov	r8, r6
 8014020:	4606      	mov	r6, r0
 8014022:	9b03      	ldr	r3, [sp, #12]
 8014024:	9a03      	ldr	r2, [sp, #12]
 8014026:	3301      	adds	r3, #1
 8014028:	9308      	str	r3, [sp, #32]
 801402a:	9b06      	ldr	r3, [sp, #24]
 801402c:	4413      	add	r3, r2
 801402e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014030:	9b04      	ldr	r3, [sp, #16]
 8014032:	f003 0301 	and.w	r3, r3, #1
 8014036:	930a      	str	r3, [sp, #40]	; 0x28
 8014038:	9b08      	ldr	r3, [sp, #32]
 801403a:	4621      	mov	r1, r4
 801403c:	3b01      	subs	r3, #1
 801403e:	4650      	mov	r0, sl
 8014040:	9304      	str	r3, [sp, #16]
 8014042:	f7ff fa75 	bl	8013530 <quorem>
 8014046:	4641      	mov	r1, r8
 8014048:	9006      	str	r0, [sp, #24]
 801404a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801404e:	4650      	mov	r0, sl
 8014050:	f000 fbb2 	bl	80147b8 <__mcmp>
 8014054:	4632      	mov	r2, r6
 8014056:	9009      	str	r0, [sp, #36]	; 0x24
 8014058:	4621      	mov	r1, r4
 801405a:	4628      	mov	r0, r5
 801405c:	f000 fbc8 	bl	80147f0 <__mdiff>
 8014060:	68c2      	ldr	r2, [r0, #12]
 8014062:	4607      	mov	r7, r0
 8014064:	bb02      	cbnz	r2, 80140a8 <_dtoa_r+0xa60>
 8014066:	4601      	mov	r1, r0
 8014068:	4650      	mov	r0, sl
 801406a:	f000 fba5 	bl	80147b8 <__mcmp>
 801406e:	4602      	mov	r2, r0
 8014070:	4639      	mov	r1, r7
 8014072:	4628      	mov	r0, r5
 8014074:	920c      	str	r2, [sp, #48]	; 0x30
 8014076:	f000 f965 	bl	8014344 <_Bfree>
 801407a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801407c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801407e:	9f08      	ldr	r7, [sp, #32]
 8014080:	ea43 0102 	orr.w	r1, r3, r2
 8014084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014086:	4319      	orrs	r1, r3
 8014088:	d110      	bne.n	80140ac <_dtoa_r+0xa64>
 801408a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801408e:	d029      	beq.n	80140e4 <_dtoa_r+0xa9c>
 8014090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014092:	2b00      	cmp	r3, #0
 8014094:	dd02      	ble.n	801409c <_dtoa_r+0xa54>
 8014096:	9b06      	ldr	r3, [sp, #24]
 8014098:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801409c:	9b04      	ldr	r3, [sp, #16]
 801409e:	f883 9000 	strb.w	r9, [r3]
 80140a2:	e777      	b.n	8013f94 <_dtoa_r+0x94c>
 80140a4:	4630      	mov	r0, r6
 80140a6:	e7ba      	b.n	801401e <_dtoa_r+0x9d6>
 80140a8:	2201      	movs	r2, #1
 80140aa:	e7e1      	b.n	8014070 <_dtoa_r+0xa28>
 80140ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	db04      	blt.n	80140bc <_dtoa_r+0xa74>
 80140b2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80140b4:	430b      	orrs	r3, r1
 80140b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80140b8:	430b      	orrs	r3, r1
 80140ba:	d120      	bne.n	80140fe <_dtoa_r+0xab6>
 80140bc:	2a00      	cmp	r2, #0
 80140be:	dded      	ble.n	801409c <_dtoa_r+0xa54>
 80140c0:	4651      	mov	r1, sl
 80140c2:	2201      	movs	r2, #1
 80140c4:	4628      	mov	r0, r5
 80140c6:	f000 fb0b 	bl	80146e0 <__lshift>
 80140ca:	4621      	mov	r1, r4
 80140cc:	4682      	mov	sl, r0
 80140ce:	f000 fb73 	bl	80147b8 <__mcmp>
 80140d2:	2800      	cmp	r0, #0
 80140d4:	dc03      	bgt.n	80140de <_dtoa_r+0xa96>
 80140d6:	d1e1      	bne.n	801409c <_dtoa_r+0xa54>
 80140d8:	f019 0f01 	tst.w	r9, #1
 80140dc:	d0de      	beq.n	801409c <_dtoa_r+0xa54>
 80140de:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80140e2:	d1d8      	bne.n	8014096 <_dtoa_r+0xa4e>
 80140e4:	2339      	movs	r3, #57	; 0x39
 80140e6:	9a04      	ldr	r2, [sp, #16]
 80140e8:	7013      	strb	r3, [r2, #0]
 80140ea:	463b      	mov	r3, r7
 80140ec:	461f      	mov	r7, r3
 80140ee:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80140f2:	3b01      	subs	r3, #1
 80140f4:	2a39      	cmp	r2, #57	; 0x39
 80140f6:	d06b      	beq.n	80141d0 <_dtoa_r+0xb88>
 80140f8:	3201      	adds	r2, #1
 80140fa:	701a      	strb	r2, [r3, #0]
 80140fc:	e74a      	b.n	8013f94 <_dtoa_r+0x94c>
 80140fe:	2a00      	cmp	r2, #0
 8014100:	dd07      	ble.n	8014112 <_dtoa_r+0xaca>
 8014102:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014106:	d0ed      	beq.n	80140e4 <_dtoa_r+0xa9c>
 8014108:	9a04      	ldr	r2, [sp, #16]
 801410a:	f109 0301 	add.w	r3, r9, #1
 801410e:	7013      	strb	r3, [r2, #0]
 8014110:	e740      	b.n	8013f94 <_dtoa_r+0x94c>
 8014112:	9b08      	ldr	r3, [sp, #32]
 8014114:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014116:	f803 9c01 	strb.w	r9, [r3, #-1]
 801411a:	4293      	cmp	r3, r2
 801411c:	d042      	beq.n	80141a4 <_dtoa_r+0xb5c>
 801411e:	4651      	mov	r1, sl
 8014120:	2300      	movs	r3, #0
 8014122:	220a      	movs	r2, #10
 8014124:	4628      	mov	r0, r5
 8014126:	f000 f92f 	bl	8014388 <__multadd>
 801412a:	45b0      	cmp	r8, r6
 801412c:	4682      	mov	sl, r0
 801412e:	f04f 0300 	mov.w	r3, #0
 8014132:	f04f 020a 	mov.w	r2, #10
 8014136:	4641      	mov	r1, r8
 8014138:	4628      	mov	r0, r5
 801413a:	d107      	bne.n	801414c <_dtoa_r+0xb04>
 801413c:	f000 f924 	bl	8014388 <__multadd>
 8014140:	4680      	mov	r8, r0
 8014142:	4606      	mov	r6, r0
 8014144:	9b08      	ldr	r3, [sp, #32]
 8014146:	3301      	adds	r3, #1
 8014148:	9308      	str	r3, [sp, #32]
 801414a:	e775      	b.n	8014038 <_dtoa_r+0x9f0>
 801414c:	f000 f91c 	bl	8014388 <__multadd>
 8014150:	4631      	mov	r1, r6
 8014152:	4680      	mov	r8, r0
 8014154:	2300      	movs	r3, #0
 8014156:	220a      	movs	r2, #10
 8014158:	4628      	mov	r0, r5
 801415a:	f000 f915 	bl	8014388 <__multadd>
 801415e:	4606      	mov	r6, r0
 8014160:	e7f0      	b.n	8014144 <_dtoa_r+0xafc>
 8014162:	9b08      	ldr	r3, [sp, #32]
 8014164:	9306      	str	r3, [sp, #24]
 8014166:	9f03      	ldr	r7, [sp, #12]
 8014168:	4621      	mov	r1, r4
 801416a:	4650      	mov	r0, sl
 801416c:	f7ff f9e0 	bl	8013530 <quorem>
 8014170:	9b03      	ldr	r3, [sp, #12]
 8014172:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014176:	f807 9b01 	strb.w	r9, [r7], #1
 801417a:	1afa      	subs	r2, r7, r3
 801417c:	9b06      	ldr	r3, [sp, #24]
 801417e:	4293      	cmp	r3, r2
 8014180:	dd07      	ble.n	8014192 <_dtoa_r+0xb4a>
 8014182:	4651      	mov	r1, sl
 8014184:	2300      	movs	r3, #0
 8014186:	220a      	movs	r2, #10
 8014188:	4628      	mov	r0, r5
 801418a:	f000 f8fd 	bl	8014388 <__multadd>
 801418e:	4682      	mov	sl, r0
 8014190:	e7ea      	b.n	8014168 <_dtoa_r+0xb20>
 8014192:	9b06      	ldr	r3, [sp, #24]
 8014194:	f04f 0800 	mov.w	r8, #0
 8014198:	2b00      	cmp	r3, #0
 801419a:	bfcc      	ite	gt
 801419c:	461f      	movgt	r7, r3
 801419e:	2701      	movle	r7, #1
 80141a0:	9b03      	ldr	r3, [sp, #12]
 80141a2:	441f      	add	r7, r3
 80141a4:	4651      	mov	r1, sl
 80141a6:	2201      	movs	r2, #1
 80141a8:	4628      	mov	r0, r5
 80141aa:	f000 fa99 	bl	80146e0 <__lshift>
 80141ae:	4621      	mov	r1, r4
 80141b0:	4682      	mov	sl, r0
 80141b2:	f000 fb01 	bl	80147b8 <__mcmp>
 80141b6:	2800      	cmp	r0, #0
 80141b8:	dc97      	bgt.n	80140ea <_dtoa_r+0xaa2>
 80141ba:	d102      	bne.n	80141c2 <_dtoa_r+0xb7a>
 80141bc:	f019 0f01 	tst.w	r9, #1
 80141c0:	d193      	bne.n	80140ea <_dtoa_r+0xaa2>
 80141c2:	463b      	mov	r3, r7
 80141c4:	461f      	mov	r7, r3
 80141c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80141ca:	2a30      	cmp	r2, #48	; 0x30
 80141cc:	d0fa      	beq.n	80141c4 <_dtoa_r+0xb7c>
 80141ce:	e6e1      	b.n	8013f94 <_dtoa_r+0x94c>
 80141d0:	9a03      	ldr	r2, [sp, #12]
 80141d2:	429a      	cmp	r2, r3
 80141d4:	d18a      	bne.n	80140ec <_dtoa_r+0xaa4>
 80141d6:	2331      	movs	r3, #49	; 0x31
 80141d8:	f10b 0b01 	add.w	fp, fp, #1
 80141dc:	e797      	b.n	801410e <_dtoa_r+0xac6>
 80141de:	4b0a      	ldr	r3, [pc, #40]	; (8014208 <_dtoa_r+0xbc0>)
 80141e0:	f7ff ba9f 	b.w	8013722 <_dtoa_r+0xda>
 80141e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	f47f aa77 	bne.w	80136da <_dtoa_r+0x92>
 80141ec:	4b07      	ldr	r3, [pc, #28]	; (801420c <_dtoa_r+0xbc4>)
 80141ee:	f7ff ba98 	b.w	8013722 <_dtoa_r+0xda>
 80141f2:	9b06      	ldr	r3, [sp, #24]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	dcb6      	bgt.n	8014166 <_dtoa_r+0xb1e>
 80141f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80141fa:	2b02      	cmp	r3, #2
 80141fc:	f73f aeb5 	bgt.w	8013f6a <_dtoa_r+0x922>
 8014200:	e7b1      	b.n	8014166 <_dtoa_r+0xb1e>
 8014202:	bf00      	nop
 8014204:	080163c3 	.word	0x080163c3
 8014208:	08016553 	.word	0x08016553
 801420c:	08016347 	.word	0x08016347

08014210 <_free_r>:
 8014210:	b538      	push	{r3, r4, r5, lr}
 8014212:	4605      	mov	r5, r0
 8014214:	2900      	cmp	r1, #0
 8014216:	d040      	beq.n	801429a <_free_r+0x8a>
 8014218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801421c:	1f0c      	subs	r4, r1, #4
 801421e:	2b00      	cmp	r3, #0
 8014220:	bfb8      	it	lt
 8014222:	18e4      	addlt	r4, r4, r3
 8014224:	f7fe f894 	bl	8012350 <__malloc_lock>
 8014228:	4a1c      	ldr	r2, [pc, #112]	; (801429c <_free_r+0x8c>)
 801422a:	6813      	ldr	r3, [r2, #0]
 801422c:	b933      	cbnz	r3, 801423c <_free_r+0x2c>
 801422e:	6063      	str	r3, [r4, #4]
 8014230:	6014      	str	r4, [r2, #0]
 8014232:	4628      	mov	r0, r5
 8014234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014238:	f7fe b890 	b.w	801235c <__malloc_unlock>
 801423c:	42a3      	cmp	r3, r4
 801423e:	d908      	bls.n	8014252 <_free_r+0x42>
 8014240:	6820      	ldr	r0, [r4, #0]
 8014242:	1821      	adds	r1, r4, r0
 8014244:	428b      	cmp	r3, r1
 8014246:	bf01      	itttt	eq
 8014248:	6819      	ldreq	r1, [r3, #0]
 801424a:	685b      	ldreq	r3, [r3, #4]
 801424c:	1809      	addeq	r1, r1, r0
 801424e:	6021      	streq	r1, [r4, #0]
 8014250:	e7ed      	b.n	801422e <_free_r+0x1e>
 8014252:	461a      	mov	r2, r3
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	b10b      	cbz	r3, 801425c <_free_r+0x4c>
 8014258:	42a3      	cmp	r3, r4
 801425a:	d9fa      	bls.n	8014252 <_free_r+0x42>
 801425c:	6811      	ldr	r1, [r2, #0]
 801425e:	1850      	adds	r0, r2, r1
 8014260:	42a0      	cmp	r0, r4
 8014262:	d10b      	bne.n	801427c <_free_r+0x6c>
 8014264:	6820      	ldr	r0, [r4, #0]
 8014266:	4401      	add	r1, r0
 8014268:	1850      	adds	r0, r2, r1
 801426a:	4283      	cmp	r3, r0
 801426c:	6011      	str	r1, [r2, #0]
 801426e:	d1e0      	bne.n	8014232 <_free_r+0x22>
 8014270:	6818      	ldr	r0, [r3, #0]
 8014272:	685b      	ldr	r3, [r3, #4]
 8014274:	4408      	add	r0, r1
 8014276:	6010      	str	r0, [r2, #0]
 8014278:	6053      	str	r3, [r2, #4]
 801427a:	e7da      	b.n	8014232 <_free_r+0x22>
 801427c:	d902      	bls.n	8014284 <_free_r+0x74>
 801427e:	230c      	movs	r3, #12
 8014280:	602b      	str	r3, [r5, #0]
 8014282:	e7d6      	b.n	8014232 <_free_r+0x22>
 8014284:	6820      	ldr	r0, [r4, #0]
 8014286:	1821      	adds	r1, r4, r0
 8014288:	428b      	cmp	r3, r1
 801428a:	bf01      	itttt	eq
 801428c:	6819      	ldreq	r1, [r3, #0]
 801428e:	685b      	ldreq	r3, [r3, #4]
 8014290:	1809      	addeq	r1, r1, r0
 8014292:	6021      	streq	r1, [r4, #0]
 8014294:	6063      	str	r3, [r4, #4]
 8014296:	6054      	str	r4, [r2, #4]
 8014298:	e7cb      	b.n	8014232 <_free_r+0x22>
 801429a:	bd38      	pop	{r3, r4, r5, pc}
 801429c:	200010f4 	.word	0x200010f4

080142a0 <__ascii_mbtowc>:
 80142a0:	b082      	sub	sp, #8
 80142a2:	b901      	cbnz	r1, 80142a6 <__ascii_mbtowc+0x6>
 80142a4:	a901      	add	r1, sp, #4
 80142a6:	b142      	cbz	r2, 80142ba <__ascii_mbtowc+0x1a>
 80142a8:	b14b      	cbz	r3, 80142be <__ascii_mbtowc+0x1e>
 80142aa:	7813      	ldrb	r3, [r2, #0]
 80142ac:	600b      	str	r3, [r1, #0]
 80142ae:	7812      	ldrb	r2, [r2, #0]
 80142b0:	1e10      	subs	r0, r2, #0
 80142b2:	bf18      	it	ne
 80142b4:	2001      	movne	r0, #1
 80142b6:	b002      	add	sp, #8
 80142b8:	4770      	bx	lr
 80142ba:	4610      	mov	r0, r2
 80142bc:	e7fb      	b.n	80142b6 <__ascii_mbtowc+0x16>
 80142be:	f06f 0001 	mvn.w	r0, #1
 80142c2:	e7f8      	b.n	80142b6 <__ascii_mbtowc+0x16>

080142c4 <_Balloc>:
 80142c4:	b570      	push	{r4, r5, r6, lr}
 80142c6:	69c6      	ldr	r6, [r0, #28]
 80142c8:	4604      	mov	r4, r0
 80142ca:	460d      	mov	r5, r1
 80142cc:	b976      	cbnz	r6, 80142ec <_Balloc+0x28>
 80142ce:	2010      	movs	r0, #16
 80142d0:	f7fd ff8e 	bl	80121f0 <malloc>
 80142d4:	4602      	mov	r2, r0
 80142d6:	61e0      	str	r0, [r4, #28]
 80142d8:	b920      	cbnz	r0, 80142e4 <_Balloc+0x20>
 80142da:	216b      	movs	r1, #107	; 0x6b
 80142dc:	4b17      	ldr	r3, [pc, #92]	; (801433c <_Balloc+0x78>)
 80142de:	4818      	ldr	r0, [pc, #96]	; (8014340 <_Balloc+0x7c>)
 80142e0:	f7ff f908 	bl	80134f4 <__assert_func>
 80142e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80142e8:	6006      	str	r6, [r0, #0]
 80142ea:	60c6      	str	r6, [r0, #12]
 80142ec:	69e6      	ldr	r6, [r4, #28]
 80142ee:	68f3      	ldr	r3, [r6, #12]
 80142f0:	b183      	cbz	r3, 8014314 <_Balloc+0x50>
 80142f2:	69e3      	ldr	r3, [r4, #28]
 80142f4:	68db      	ldr	r3, [r3, #12]
 80142f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80142fa:	b9b8      	cbnz	r0, 801432c <_Balloc+0x68>
 80142fc:	2101      	movs	r1, #1
 80142fe:	fa01 f605 	lsl.w	r6, r1, r5
 8014302:	1d72      	adds	r2, r6, #5
 8014304:	4620      	mov	r0, r4
 8014306:	0092      	lsls	r2, r2, #2
 8014308:	f001 faf3 	bl	80158f2 <_calloc_r>
 801430c:	b160      	cbz	r0, 8014328 <_Balloc+0x64>
 801430e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014312:	e00e      	b.n	8014332 <_Balloc+0x6e>
 8014314:	2221      	movs	r2, #33	; 0x21
 8014316:	2104      	movs	r1, #4
 8014318:	4620      	mov	r0, r4
 801431a:	f001 faea 	bl	80158f2 <_calloc_r>
 801431e:	69e3      	ldr	r3, [r4, #28]
 8014320:	60f0      	str	r0, [r6, #12]
 8014322:	68db      	ldr	r3, [r3, #12]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d1e4      	bne.n	80142f2 <_Balloc+0x2e>
 8014328:	2000      	movs	r0, #0
 801432a:	bd70      	pop	{r4, r5, r6, pc}
 801432c:	6802      	ldr	r2, [r0, #0]
 801432e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014332:	2300      	movs	r3, #0
 8014334:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014338:	e7f7      	b.n	801432a <_Balloc+0x66>
 801433a:	bf00      	nop
 801433c:	08016354 	.word	0x08016354
 8014340:	080163d4 	.word	0x080163d4

08014344 <_Bfree>:
 8014344:	b570      	push	{r4, r5, r6, lr}
 8014346:	69c6      	ldr	r6, [r0, #28]
 8014348:	4605      	mov	r5, r0
 801434a:	460c      	mov	r4, r1
 801434c:	b976      	cbnz	r6, 801436c <_Bfree+0x28>
 801434e:	2010      	movs	r0, #16
 8014350:	f7fd ff4e 	bl	80121f0 <malloc>
 8014354:	4602      	mov	r2, r0
 8014356:	61e8      	str	r0, [r5, #28]
 8014358:	b920      	cbnz	r0, 8014364 <_Bfree+0x20>
 801435a:	218f      	movs	r1, #143	; 0x8f
 801435c:	4b08      	ldr	r3, [pc, #32]	; (8014380 <_Bfree+0x3c>)
 801435e:	4809      	ldr	r0, [pc, #36]	; (8014384 <_Bfree+0x40>)
 8014360:	f7ff f8c8 	bl	80134f4 <__assert_func>
 8014364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014368:	6006      	str	r6, [r0, #0]
 801436a:	60c6      	str	r6, [r0, #12]
 801436c:	b13c      	cbz	r4, 801437e <_Bfree+0x3a>
 801436e:	69eb      	ldr	r3, [r5, #28]
 8014370:	6862      	ldr	r2, [r4, #4]
 8014372:	68db      	ldr	r3, [r3, #12]
 8014374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014378:	6021      	str	r1, [r4, #0]
 801437a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801437e:	bd70      	pop	{r4, r5, r6, pc}
 8014380:	08016354 	.word	0x08016354
 8014384:	080163d4 	.word	0x080163d4

08014388 <__multadd>:
 8014388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801438c:	4607      	mov	r7, r0
 801438e:	460c      	mov	r4, r1
 8014390:	461e      	mov	r6, r3
 8014392:	2000      	movs	r0, #0
 8014394:	690d      	ldr	r5, [r1, #16]
 8014396:	f101 0c14 	add.w	ip, r1, #20
 801439a:	f8dc 3000 	ldr.w	r3, [ip]
 801439e:	3001      	adds	r0, #1
 80143a0:	b299      	uxth	r1, r3
 80143a2:	fb02 6101 	mla	r1, r2, r1, r6
 80143a6:	0c1e      	lsrs	r6, r3, #16
 80143a8:	0c0b      	lsrs	r3, r1, #16
 80143aa:	fb02 3306 	mla	r3, r2, r6, r3
 80143ae:	b289      	uxth	r1, r1
 80143b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80143b4:	4285      	cmp	r5, r0
 80143b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80143ba:	f84c 1b04 	str.w	r1, [ip], #4
 80143be:	dcec      	bgt.n	801439a <__multadd+0x12>
 80143c0:	b30e      	cbz	r6, 8014406 <__multadd+0x7e>
 80143c2:	68a3      	ldr	r3, [r4, #8]
 80143c4:	42ab      	cmp	r3, r5
 80143c6:	dc19      	bgt.n	80143fc <__multadd+0x74>
 80143c8:	6861      	ldr	r1, [r4, #4]
 80143ca:	4638      	mov	r0, r7
 80143cc:	3101      	adds	r1, #1
 80143ce:	f7ff ff79 	bl	80142c4 <_Balloc>
 80143d2:	4680      	mov	r8, r0
 80143d4:	b928      	cbnz	r0, 80143e2 <__multadd+0x5a>
 80143d6:	4602      	mov	r2, r0
 80143d8:	21ba      	movs	r1, #186	; 0xba
 80143da:	4b0c      	ldr	r3, [pc, #48]	; (801440c <__multadd+0x84>)
 80143dc:	480c      	ldr	r0, [pc, #48]	; (8014410 <__multadd+0x88>)
 80143de:	f7ff f889 	bl	80134f4 <__assert_func>
 80143e2:	6922      	ldr	r2, [r4, #16]
 80143e4:	f104 010c 	add.w	r1, r4, #12
 80143e8:	3202      	adds	r2, #2
 80143ea:	0092      	lsls	r2, r2, #2
 80143ec:	300c      	adds	r0, #12
 80143ee:	f7ff f872 	bl	80134d6 <memcpy>
 80143f2:	4621      	mov	r1, r4
 80143f4:	4638      	mov	r0, r7
 80143f6:	f7ff ffa5 	bl	8014344 <_Bfree>
 80143fa:	4644      	mov	r4, r8
 80143fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014400:	3501      	adds	r5, #1
 8014402:	615e      	str	r6, [r3, #20]
 8014404:	6125      	str	r5, [r4, #16]
 8014406:	4620      	mov	r0, r4
 8014408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801440c:	080163c3 	.word	0x080163c3
 8014410:	080163d4 	.word	0x080163d4

08014414 <__hi0bits>:
 8014414:	0c02      	lsrs	r2, r0, #16
 8014416:	0412      	lsls	r2, r2, #16
 8014418:	4603      	mov	r3, r0
 801441a:	b9ca      	cbnz	r2, 8014450 <__hi0bits+0x3c>
 801441c:	0403      	lsls	r3, r0, #16
 801441e:	2010      	movs	r0, #16
 8014420:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014424:	bf04      	itt	eq
 8014426:	021b      	lsleq	r3, r3, #8
 8014428:	3008      	addeq	r0, #8
 801442a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801442e:	bf04      	itt	eq
 8014430:	011b      	lsleq	r3, r3, #4
 8014432:	3004      	addeq	r0, #4
 8014434:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014438:	bf04      	itt	eq
 801443a:	009b      	lsleq	r3, r3, #2
 801443c:	3002      	addeq	r0, #2
 801443e:	2b00      	cmp	r3, #0
 8014440:	db05      	blt.n	801444e <__hi0bits+0x3a>
 8014442:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8014446:	f100 0001 	add.w	r0, r0, #1
 801444a:	bf08      	it	eq
 801444c:	2020      	moveq	r0, #32
 801444e:	4770      	bx	lr
 8014450:	2000      	movs	r0, #0
 8014452:	e7e5      	b.n	8014420 <__hi0bits+0xc>

08014454 <__lo0bits>:
 8014454:	6803      	ldr	r3, [r0, #0]
 8014456:	4602      	mov	r2, r0
 8014458:	f013 0007 	ands.w	r0, r3, #7
 801445c:	d00b      	beq.n	8014476 <__lo0bits+0x22>
 801445e:	07d9      	lsls	r1, r3, #31
 8014460:	d421      	bmi.n	80144a6 <__lo0bits+0x52>
 8014462:	0798      	lsls	r0, r3, #30
 8014464:	bf49      	itett	mi
 8014466:	085b      	lsrmi	r3, r3, #1
 8014468:	089b      	lsrpl	r3, r3, #2
 801446a:	2001      	movmi	r0, #1
 801446c:	6013      	strmi	r3, [r2, #0]
 801446e:	bf5c      	itt	pl
 8014470:	2002      	movpl	r0, #2
 8014472:	6013      	strpl	r3, [r2, #0]
 8014474:	4770      	bx	lr
 8014476:	b299      	uxth	r1, r3
 8014478:	b909      	cbnz	r1, 801447e <__lo0bits+0x2a>
 801447a:	2010      	movs	r0, #16
 801447c:	0c1b      	lsrs	r3, r3, #16
 801447e:	b2d9      	uxtb	r1, r3
 8014480:	b909      	cbnz	r1, 8014486 <__lo0bits+0x32>
 8014482:	3008      	adds	r0, #8
 8014484:	0a1b      	lsrs	r3, r3, #8
 8014486:	0719      	lsls	r1, r3, #28
 8014488:	bf04      	itt	eq
 801448a:	091b      	lsreq	r3, r3, #4
 801448c:	3004      	addeq	r0, #4
 801448e:	0799      	lsls	r1, r3, #30
 8014490:	bf04      	itt	eq
 8014492:	089b      	lsreq	r3, r3, #2
 8014494:	3002      	addeq	r0, #2
 8014496:	07d9      	lsls	r1, r3, #31
 8014498:	d403      	bmi.n	80144a2 <__lo0bits+0x4e>
 801449a:	085b      	lsrs	r3, r3, #1
 801449c:	f100 0001 	add.w	r0, r0, #1
 80144a0:	d003      	beq.n	80144aa <__lo0bits+0x56>
 80144a2:	6013      	str	r3, [r2, #0]
 80144a4:	4770      	bx	lr
 80144a6:	2000      	movs	r0, #0
 80144a8:	4770      	bx	lr
 80144aa:	2020      	movs	r0, #32
 80144ac:	4770      	bx	lr
	...

080144b0 <__i2b>:
 80144b0:	b510      	push	{r4, lr}
 80144b2:	460c      	mov	r4, r1
 80144b4:	2101      	movs	r1, #1
 80144b6:	f7ff ff05 	bl	80142c4 <_Balloc>
 80144ba:	4602      	mov	r2, r0
 80144bc:	b928      	cbnz	r0, 80144ca <__i2b+0x1a>
 80144be:	f240 1145 	movw	r1, #325	; 0x145
 80144c2:	4b04      	ldr	r3, [pc, #16]	; (80144d4 <__i2b+0x24>)
 80144c4:	4804      	ldr	r0, [pc, #16]	; (80144d8 <__i2b+0x28>)
 80144c6:	f7ff f815 	bl	80134f4 <__assert_func>
 80144ca:	2301      	movs	r3, #1
 80144cc:	6144      	str	r4, [r0, #20]
 80144ce:	6103      	str	r3, [r0, #16]
 80144d0:	bd10      	pop	{r4, pc}
 80144d2:	bf00      	nop
 80144d4:	080163c3 	.word	0x080163c3
 80144d8:	080163d4 	.word	0x080163d4

080144dc <__multiply>:
 80144dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144e0:	4691      	mov	r9, r2
 80144e2:	690a      	ldr	r2, [r1, #16]
 80144e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80144e8:	460c      	mov	r4, r1
 80144ea:	429a      	cmp	r2, r3
 80144ec:	bfbe      	ittt	lt
 80144ee:	460b      	movlt	r3, r1
 80144f0:	464c      	movlt	r4, r9
 80144f2:	4699      	movlt	r9, r3
 80144f4:	6927      	ldr	r7, [r4, #16]
 80144f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80144fa:	68a3      	ldr	r3, [r4, #8]
 80144fc:	6861      	ldr	r1, [r4, #4]
 80144fe:	eb07 060a 	add.w	r6, r7, sl
 8014502:	42b3      	cmp	r3, r6
 8014504:	b085      	sub	sp, #20
 8014506:	bfb8      	it	lt
 8014508:	3101      	addlt	r1, #1
 801450a:	f7ff fedb 	bl	80142c4 <_Balloc>
 801450e:	b930      	cbnz	r0, 801451e <__multiply+0x42>
 8014510:	4602      	mov	r2, r0
 8014512:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014516:	4b43      	ldr	r3, [pc, #268]	; (8014624 <__multiply+0x148>)
 8014518:	4843      	ldr	r0, [pc, #268]	; (8014628 <__multiply+0x14c>)
 801451a:	f7fe ffeb 	bl	80134f4 <__assert_func>
 801451e:	f100 0514 	add.w	r5, r0, #20
 8014522:	462b      	mov	r3, r5
 8014524:	2200      	movs	r2, #0
 8014526:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801452a:	4543      	cmp	r3, r8
 801452c:	d321      	bcc.n	8014572 <__multiply+0x96>
 801452e:	f104 0314 	add.w	r3, r4, #20
 8014532:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014536:	f109 0314 	add.w	r3, r9, #20
 801453a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801453e:	9202      	str	r2, [sp, #8]
 8014540:	1b3a      	subs	r2, r7, r4
 8014542:	3a15      	subs	r2, #21
 8014544:	f022 0203 	bic.w	r2, r2, #3
 8014548:	3204      	adds	r2, #4
 801454a:	f104 0115 	add.w	r1, r4, #21
 801454e:	428f      	cmp	r7, r1
 8014550:	bf38      	it	cc
 8014552:	2204      	movcc	r2, #4
 8014554:	9201      	str	r2, [sp, #4]
 8014556:	9a02      	ldr	r2, [sp, #8]
 8014558:	9303      	str	r3, [sp, #12]
 801455a:	429a      	cmp	r2, r3
 801455c:	d80c      	bhi.n	8014578 <__multiply+0x9c>
 801455e:	2e00      	cmp	r6, #0
 8014560:	dd03      	ble.n	801456a <__multiply+0x8e>
 8014562:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014566:	2b00      	cmp	r3, #0
 8014568:	d05a      	beq.n	8014620 <__multiply+0x144>
 801456a:	6106      	str	r6, [r0, #16]
 801456c:	b005      	add	sp, #20
 801456e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014572:	f843 2b04 	str.w	r2, [r3], #4
 8014576:	e7d8      	b.n	801452a <__multiply+0x4e>
 8014578:	f8b3 a000 	ldrh.w	sl, [r3]
 801457c:	f1ba 0f00 	cmp.w	sl, #0
 8014580:	d023      	beq.n	80145ca <__multiply+0xee>
 8014582:	46a9      	mov	r9, r5
 8014584:	f04f 0c00 	mov.w	ip, #0
 8014588:	f104 0e14 	add.w	lr, r4, #20
 801458c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014590:	f8d9 1000 	ldr.w	r1, [r9]
 8014594:	fa1f fb82 	uxth.w	fp, r2
 8014598:	b289      	uxth	r1, r1
 801459a:	fb0a 110b 	mla	r1, sl, fp, r1
 801459e:	4461      	add	r1, ip
 80145a0:	f8d9 c000 	ldr.w	ip, [r9]
 80145a4:	0c12      	lsrs	r2, r2, #16
 80145a6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80145aa:	fb0a c202 	mla	r2, sl, r2, ip
 80145ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80145b2:	b289      	uxth	r1, r1
 80145b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80145b8:	4577      	cmp	r7, lr
 80145ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80145be:	f849 1b04 	str.w	r1, [r9], #4
 80145c2:	d8e3      	bhi.n	801458c <__multiply+0xb0>
 80145c4:	9a01      	ldr	r2, [sp, #4]
 80145c6:	f845 c002 	str.w	ip, [r5, r2]
 80145ca:	9a03      	ldr	r2, [sp, #12]
 80145cc:	3304      	adds	r3, #4
 80145ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80145d2:	f1b9 0f00 	cmp.w	r9, #0
 80145d6:	d021      	beq.n	801461c <__multiply+0x140>
 80145d8:	46ae      	mov	lr, r5
 80145da:	f04f 0a00 	mov.w	sl, #0
 80145de:	6829      	ldr	r1, [r5, #0]
 80145e0:	f104 0c14 	add.w	ip, r4, #20
 80145e4:	f8bc b000 	ldrh.w	fp, [ip]
 80145e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80145ec:	b289      	uxth	r1, r1
 80145ee:	fb09 220b 	mla	r2, r9, fp, r2
 80145f2:	4452      	add	r2, sl
 80145f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80145f8:	f84e 1b04 	str.w	r1, [lr], #4
 80145fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014600:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014604:	f8be 1000 	ldrh.w	r1, [lr]
 8014608:	4567      	cmp	r7, ip
 801460a:	fb09 110a 	mla	r1, r9, sl, r1
 801460e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014612:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014616:	d8e5      	bhi.n	80145e4 <__multiply+0x108>
 8014618:	9a01      	ldr	r2, [sp, #4]
 801461a:	50a9      	str	r1, [r5, r2]
 801461c:	3504      	adds	r5, #4
 801461e:	e79a      	b.n	8014556 <__multiply+0x7a>
 8014620:	3e01      	subs	r6, #1
 8014622:	e79c      	b.n	801455e <__multiply+0x82>
 8014624:	080163c3 	.word	0x080163c3
 8014628:	080163d4 	.word	0x080163d4

0801462c <__pow5mult>:
 801462c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014630:	4615      	mov	r5, r2
 8014632:	f012 0203 	ands.w	r2, r2, #3
 8014636:	4606      	mov	r6, r0
 8014638:	460f      	mov	r7, r1
 801463a:	d007      	beq.n	801464c <__pow5mult+0x20>
 801463c:	4c25      	ldr	r4, [pc, #148]	; (80146d4 <__pow5mult+0xa8>)
 801463e:	3a01      	subs	r2, #1
 8014640:	2300      	movs	r3, #0
 8014642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014646:	f7ff fe9f 	bl	8014388 <__multadd>
 801464a:	4607      	mov	r7, r0
 801464c:	10ad      	asrs	r5, r5, #2
 801464e:	d03d      	beq.n	80146cc <__pow5mult+0xa0>
 8014650:	69f4      	ldr	r4, [r6, #28]
 8014652:	b97c      	cbnz	r4, 8014674 <__pow5mult+0x48>
 8014654:	2010      	movs	r0, #16
 8014656:	f7fd fdcb 	bl	80121f0 <malloc>
 801465a:	4602      	mov	r2, r0
 801465c:	61f0      	str	r0, [r6, #28]
 801465e:	b928      	cbnz	r0, 801466c <__pow5mult+0x40>
 8014660:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014664:	4b1c      	ldr	r3, [pc, #112]	; (80146d8 <__pow5mult+0xac>)
 8014666:	481d      	ldr	r0, [pc, #116]	; (80146dc <__pow5mult+0xb0>)
 8014668:	f7fe ff44 	bl	80134f4 <__assert_func>
 801466c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014670:	6004      	str	r4, [r0, #0]
 8014672:	60c4      	str	r4, [r0, #12]
 8014674:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014678:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801467c:	b94c      	cbnz	r4, 8014692 <__pow5mult+0x66>
 801467e:	f240 2171 	movw	r1, #625	; 0x271
 8014682:	4630      	mov	r0, r6
 8014684:	f7ff ff14 	bl	80144b0 <__i2b>
 8014688:	2300      	movs	r3, #0
 801468a:	4604      	mov	r4, r0
 801468c:	f8c8 0008 	str.w	r0, [r8, #8]
 8014690:	6003      	str	r3, [r0, #0]
 8014692:	f04f 0900 	mov.w	r9, #0
 8014696:	07eb      	lsls	r3, r5, #31
 8014698:	d50a      	bpl.n	80146b0 <__pow5mult+0x84>
 801469a:	4639      	mov	r1, r7
 801469c:	4622      	mov	r2, r4
 801469e:	4630      	mov	r0, r6
 80146a0:	f7ff ff1c 	bl	80144dc <__multiply>
 80146a4:	4680      	mov	r8, r0
 80146a6:	4639      	mov	r1, r7
 80146a8:	4630      	mov	r0, r6
 80146aa:	f7ff fe4b 	bl	8014344 <_Bfree>
 80146ae:	4647      	mov	r7, r8
 80146b0:	106d      	asrs	r5, r5, #1
 80146b2:	d00b      	beq.n	80146cc <__pow5mult+0xa0>
 80146b4:	6820      	ldr	r0, [r4, #0]
 80146b6:	b938      	cbnz	r0, 80146c8 <__pow5mult+0x9c>
 80146b8:	4622      	mov	r2, r4
 80146ba:	4621      	mov	r1, r4
 80146bc:	4630      	mov	r0, r6
 80146be:	f7ff ff0d 	bl	80144dc <__multiply>
 80146c2:	6020      	str	r0, [r4, #0]
 80146c4:	f8c0 9000 	str.w	r9, [r0]
 80146c8:	4604      	mov	r4, r0
 80146ca:	e7e4      	b.n	8014696 <__pow5mult+0x6a>
 80146cc:	4638      	mov	r0, r7
 80146ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146d2:	bf00      	nop
 80146d4:	08016520 	.word	0x08016520
 80146d8:	08016354 	.word	0x08016354
 80146dc:	080163d4 	.word	0x080163d4

080146e0 <__lshift>:
 80146e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146e4:	460c      	mov	r4, r1
 80146e6:	4607      	mov	r7, r0
 80146e8:	4691      	mov	r9, r2
 80146ea:	6923      	ldr	r3, [r4, #16]
 80146ec:	6849      	ldr	r1, [r1, #4]
 80146ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80146f2:	68a3      	ldr	r3, [r4, #8]
 80146f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80146f8:	f108 0601 	add.w	r6, r8, #1
 80146fc:	42b3      	cmp	r3, r6
 80146fe:	db0b      	blt.n	8014718 <__lshift+0x38>
 8014700:	4638      	mov	r0, r7
 8014702:	f7ff fddf 	bl	80142c4 <_Balloc>
 8014706:	4605      	mov	r5, r0
 8014708:	b948      	cbnz	r0, 801471e <__lshift+0x3e>
 801470a:	4602      	mov	r2, r0
 801470c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014710:	4b27      	ldr	r3, [pc, #156]	; (80147b0 <__lshift+0xd0>)
 8014712:	4828      	ldr	r0, [pc, #160]	; (80147b4 <__lshift+0xd4>)
 8014714:	f7fe feee 	bl	80134f4 <__assert_func>
 8014718:	3101      	adds	r1, #1
 801471a:	005b      	lsls	r3, r3, #1
 801471c:	e7ee      	b.n	80146fc <__lshift+0x1c>
 801471e:	2300      	movs	r3, #0
 8014720:	f100 0114 	add.w	r1, r0, #20
 8014724:	f100 0210 	add.w	r2, r0, #16
 8014728:	4618      	mov	r0, r3
 801472a:	4553      	cmp	r3, sl
 801472c:	db33      	blt.n	8014796 <__lshift+0xb6>
 801472e:	6920      	ldr	r0, [r4, #16]
 8014730:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014734:	f104 0314 	add.w	r3, r4, #20
 8014738:	f019 091f 	ands.w	r9, r9, #31
 801473c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014740:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014744:	d02b      	beq.n	801479e <__lshift+0xbe>
 8014746:	468a      	mov	sl, r1
 8014748:	2200      	movs	r2, #0
 801474a:	f1c9 0e20 	rsb	lr, r9, #32
 801474e:	6818      	ldr	r0, [r3, #0]
 8014750:	fa00 f009 	lsl.w	r0, r0, r9
 8014754:	4310      	orrs	r0, r2
 8014756:	f84a 0b04 	str.w	r0, [sl], #4
 801475a:	f853 2b04 	ldr.w	r2, [r3], #4
 801475e:	459c      	cmp	ip, r3
 8014760:	fa22 f20e 	lsr.w	r2, r2, lr
 8014764:	d8f3      	bhi.n	801474e <__lshift+0x6e>
 8014766:	ebac 0304 	sub.w	r3, ip, r4
 801476a:	3b15      	subs	r3, #21
 801476c:	f023 0303 	bic.w	r3, r3, #3
 8014770:	3304      	adds	r3, #4
 8014772:	f104 0015 	add.w	r0, r4, #21
 8014776:	4584      	cmp	ip, r0
 8014778:	bf38      	it	cc
 801477a:	2304      	movcc	r3, #4
 801477c:	50ca      	str	r2, [r1, r3]
 801477e:	b10a      	cbz	r2, 8014784 <__lshift+0xa4>
 8014780:	f108 0602 	add.w	r6, r8, #2
 8014784:	3e01      	subs	r6, #1
 8014786:	4638      	mov	r0, r7
 8014788:	4621      	mov	r1, r4
 801478a:	612e      	str	r6, [r5, #16]
 801478c:	f7ff fdda 	bl	8014344 <_Bfree>
 8014790:	4628      	mov	r0, r5
 8014792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014796:	f842 0f04 	str.w	r0, [r2, #4]!
 801479a:	3301      	adds	r3, #1
 801479c:	e7c5      	b.n	801472a <__lshift+0x4a>
 801479e:	3904      	subs	r1, #4
 80147a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80147a4:	459c      	cmp	ip, r3
 80147a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80147aa:	d8f9      	bhi.n	80147a0 <__lshift+0xc0>
 80147ac:	e7ea      	b.n	8014784 <__lshift+0xa4>
 80147ae:	bf00      	nop
 80147b0:	080163c3 	.word	0x080163c3
 80147b4:	080163d4 	.word	0x080163d4

080147b8 <__mcmp>:
 80147b8:	4603      	mov	r3, r0
 80147ba:	690a      	ldr	r2, [r1, #16]
 80147bc:	6900      	ldr	r0, [r0, #16]
 80147be:	b530      	push	{r4, r5, lr}
 80147c0:	1a80      	subs	r0, r0, r2
 80147c2:	d10d      	bne.n	80147e0 <__mcmp+0x28>
 80147c4:	3314      	adds	r3, #20
 80147c6:	3114      	adds	r1, #20
 80147c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80147cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80147d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80147d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80147d8:	4295      	cmp	r5, r2
 80147da:	d002      	beq.n	80147e2 <__mcmp+0x2a>
 80147dc:	d304      	bcc.n	80147e8 <__mcmp+0x30>
 80147de:	2001      	movs	r0, #1
 80147e0:	bd30      	pop	{r4, r5, pc}
 80147e2:	42a3      	cmp	r3, r4
 80147e4:	d3f4      	bcc.n	80147d0 <__mcmp+0x18>
 80147e6:	e7fb      	b.n	80147e0 <__mcmp+0x28>
 80147e8:	f04f 30ff 	mov.w	r0, #4294967295
 80147ec:	e7f8      	b.n	80147e0 <__mcmp+0x28>
	...

080147f0 <__mdiff>:
 80147f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f4:	460d      	mov	r5, r1
 80147f6:	4607      	mov	r7, r0
 80147f8:	4611      	mov	r1, r2
 80147fa:	4628      	mov	r0, r5
 80147fc:	4614      	mov	r4, r2
 80147fe:	f7ff ffdb 	bl	80147b8 <__mcmp>
 8014802:	1e06      	subs	r6, r0, #0
 8014804:	d111      	bne.n	801482a <__mdiff+0x3a>
 8014806:	4631      	mov	r1, r6
 8014808:	4638      	mov	r0, r7
 801480a:	f7ff fd5b 	bl	80142c4 <_Balloc>
 801480e:	4602      	mov	r2, r0
 8014810:	b928      	cbnz	r0, 801481e <__mdiff+0x2e>
 8014812:	f240 2137 	movw	r1, #567	; 0x237
 8014816:	4b3a      	ldr	r3, [pc, #232]	; (8014900 <__mdiff+0x110>)
 8014818:	483a      	ldr	r0, [pc, #232]	; (8014904 <__mdiff+0x114>)
 801481a:	f7fe fe6b 	bl	80134f4 <__assert_func>
 801481e:	2301      	movs	r3, #1
 8014820:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014824:	4610      	mov	r0, r2
 8014826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801482a:	bfa4      	itt	ge
 801482c:	4623      	movge	r3, r4
 801482e:	462c      	movge	r4, r5
 8014830:	4638      	mov	r0, r7
 8014832:	6861      	ldr	r1, [r4, #4]
 8014834:	bfa6      	itte	ge
 8014836:	461d      	movge	r5, r3
 8014838:	2600      	movge	r6, #0
 801483a:	2601      	movlt	r6, #1
 801483c:	f7ff fd42 	bl	80142c4 <_Balloc>
 8014840:	4602      	mov	r2, r0
 8014842:	b918      	cbnz	r0, 801484c <__mdiff+0x5c>
 8014844:	f240 2145 	movw	r1, #581	; 0x245
 8014848:	4b2d      	ldr	r3, [pc, #180]	; (8014900 <__mdiff+0x110>)
 801484a:	e7e5      	b.n	8014818 <__mdiff+0x28>
 801484c:	f102 0814 	add.w	r8, r2, #20
 8014850:	46c2      	mov	sl, r8
 8014852:	f04f 0c00 	mov.w	ip, #0
 8014856:	6927      	ldr	r7, [r4, #16]
 8014858:	60c6      	str	r6, [r0, #12]
 801485a:	692e      	ldr	r6, [r5, #16]
 801485c:	f104 0014 	add.w	r0, r4, #20
 8014860:	f105 0914 	add.w	r9, r5, #20
 8014864:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8014868:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801486c:	3410      	adds	r4, #16
 801486e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8014872:	f859 3b04 	ldr.w	r3, [r9], #4
 8014876:	fa1f f18b 	uxth.w	r1, fp
 801487a:	4461      	add	r1, ip
 801487c:	fa1f fc83 	uxth.w	ip, r3
 8014880:	0c1b      	lsrs	r3, r3, #16
 8014882:	eba1 010c 	sub.w	r1, r1, ip
 8014886:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801488a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801488e:	b289      	uxth	r1, r1
 8014890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8014894:	454e      	cmp	r6, r9
 8014896:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801489a:	f84a 1b04 	str.w	r1, [sl], #4
 801489e:	d8e6      	bhi.n	801486e <__mdiff+0x7e>
 80148a0:	1b73      	subs	r3, r6, r5
 80148a2:	3b15      	subs	r3, #21
 80148a4:	f023 0303 	bic.w	r3, r3, #3
 80148a8:	3515      	adds	r5, #21
 80148aa:	3304      	adds	r3, #4
 80148ac:	42ae      	cmp	r6, r5
 80148ae:	bf38      	it	cc
 80148b0:	2304      	movcc	r3, #4
 80148b2:	4418      	add	r0, r3
 80148b4:	4443      	add	r3, r8
 80148b6:	461e      	mov	r6, r3
 80148b8:	4605      	mov	r5, r0
 80148ba:	4575      	cmp	r5, lr
 80148bc:	d30e      	bcc.n	80148dc <__mdiff+0xec>
 80148be:	f10e 0103 	add.w	r1, lr, #3
 80148c2:	1a09      	subs	r1, r1, r0
 80148c4:	f021 0103 	bic.w	r1, r1, #3
 80148c8:	3803      	subs	r0, #3
 80148ca:	4586      	cmp	lr, r0
 80148cc:	bf38      	it	cc
 80148ce:	2100      	movcc	r1, #0
 80148d0:	440b      	add	r3, r1
 80148d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80148d6:	b189      	cbz	r1, 80148fc <__mdiff+0x10c>
 80148d8:	6117      	str	r7, [r2, #16]
 80148da:	e7a3      	b.n	8014824 <__mdiff+0x34>
 80148dc:	f855 8b04 	ldr.w	r8, [r5], #4
 80148e0:	fa1f f188 	uxth.w	r1, r8
 80148e4:	4461      	add	r1, ip
 80148e6:	140c      	asrs	r4, r1, #16
 80148e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80148ec:	b289      	uxth	r1, r1
 80148ee:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80148f2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80148f6:	f846 1b04 	str.w	r1, [r6], #4
 80148fa:	e7de      	b.n	80148ba <__mdiff+0xca>
 80148fc:	3f01      	subs	r7, #1
 80148fe:	e7e8      	b.n	80148d2 <__mdiff+0xe2>
 8014900:	080163c3 	.word	0x080163c3
 8014904:	080163d4 	.word	0x080163d4

08014908 <__d2b>:
 8014908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801490a:	2101      	movs	r1, #1
 801490c:	4617      	mov	r7, r2
 801490e:	461c      	mov	r4, r3
 8014910:	9e08      	ldr	r6, [sp, #32]
 8014912:	f7ff fcd7 	bl	80142c4 <_Balloc>
 8014916:	4605      	mov	r5, r0
 8014918:	b930      	cbnz	r0, 8014928 <__d2b+0x20>
 801491a:	4602      	mov	r2, r0
 801491c:	f240 310f 	movw	r1, #783	; 0x30f
 8014920:	4b22      	ldr	r3, [pc, #136]	; (80149ac <__d2b+0xa4>)
 8014922:	4823      	ldr	r0, [pc, #140]	; (80149b0 <__d2b+0xa8>)
 8014924:	f7fe fde6 	bl	80134f4 <__assert_func>
 8014928:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801492c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8014930:	bb24      	cbnz	r4, 801497c <__d2b+0x74>
 8014932:	2f00      	cmp	r7, #0
 8014934:	9301      	str	r3, [sp, #4]
 8014936:	d026      	beq.n	8014986 <__d2b+0x7e>
 8014938:	4668      	mov	r0, sp
 801493a:	9700      	str	r7, [sp, #0]
 801493c:	f7ff fd8a 	bl	8014454 <__lo0bits>
 8014940:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014944:	b1e8      	cbz	r0, 8014982 <__d2b+0x7a>
 8014946:	f1c0 0320 	rsb	r3, r0, #32
 801494a:	fa02 f303 	lsl.w	r3, r2, r3
 801494e:	430b      	orrs	r3, r1
 8014950:	40c2      	lsrs	r2, r0
 8014952:	616b      	str	r3, [r5, #20]
 8014954:	9201      	str	r2, [sp, #4]
 8014956:	9b01      	ldr	r3, [sp, #4]
 8014958:	2b00      	cmp	r3, #0
 801495a:	bf14      	ite	ne
 801495c:	2102      	movne	r1, #2
 801495e:	2101      	moveq	r1, #1
 8014960:	61ab      	str	r3, [r5, #24]
 8014962:	6129      	str	r1, [r5, #16]
 8014964:	b1bc      	cbz	r4, 8014996 <__d2b+0x8e>
 8014966:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801496a:	4404      	add	r4, r0
 801496c:	6034      	str	r4, [r6, #0]
 801496e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014974:	6018      	str	r0, [r3, #0]
 8014976:	4628      	mov	r0, r5
 8014978:	b003      	add	sp, #12
 801497a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801497c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014980:	e7d7      	b.n	8014932 <__d2b+0x2a>
 8014982:	6169      	str	r1, [r5, #20]
 8014984:	e7e7      	b.n	8014956 <__d2b+0x4e>
 8014986:	a801      	add	r0, sp, #4
 8014988:	f7ff fd64 	bl	8014454 <__lo0bits>
 801498c:	9b01      	ldr	r3, [sp, #4]
 801498e:	2101      	movs	r1, #1
 8014990:	616b      	str	r3, [r5, #20]
 8014992:	3020      	adds	r0, #32
 8014994:	e7e5      	b.n	8014962 <__d2b+0x5a>
 8014996:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801499a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 801499e:	6030      	str	r0, [r6, #0]
 80149a0:	6918      	ldr	r0, [r3, #16]
 80149a2:	f7ff fd37 	bl	8014414 <__hi0bits>
 80149a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80149aa:	e7e2      	b.n	8014972 <__d2b+0x6a>
 80149ac:	080163c3 	.word	0x080163c3
 80149b0:	080163d4 	.word	0x080163d4

080149b4 <_malloc_usable_size_r>:
 80149b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149b8:	1f18      	subs	r0, r3, #4
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	bfbc      	itt	lt
 80149be:	580b      	ldrlt	r3, [r1, r0]
 80149c0:	18c0      	addlt	r0, r0, r3
 80149c2:	4770      	bx	lr

080149c4 <__ascii_wctomb>:
 80149c4:	4603      	mov	r3, r0
 80149c6:	4608      	mov	r0, r1
 80149c8:	b141      	cbz	r1, 80149dc <__ascii_wctomb+0x18>
 80149ca:	2aff      	cmp	r2, #255	; 0xff
 80149cc:	d904      	bls.n	80149d8 <__ascii_wctomb+0x14>
 80149ce:	228a      	movs	r2, #138	; 0x8a
 80149d0:	f04f 30ff 	mov.w	r0, #4294967295
 80149d4:	601a      	str	r2, [r3, #0]
 80149d6:	4770      	bx	lr
 80149d8:	2001      	movs	r0, #1
 80149da:	700a      	strb	r2, [r1, #0]
 80149dc:	4770      	bx	lr

080149de <__ssputs_r>:
 80149de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149e2:	461f      	mov	r7, r3
 80149e4:	688e      	ldr	r6, [r1, #8]
 80149e6:	4682      	mov	sl, r0
 80149e8:	42be      	cmp	r6, r7
 80149ea:	460c      	mov	r4, r1
 80149ec:	4690      	mov	r8, r2
 80149ee:	680b      	ldr	r3, [r1, #0]
 80149f0:	d82c      	bhi.n	8014a4c <__ssputs_r+0x6e>
 80149f2:	898a      	ldrh	r2, [r1, #12]
 80149f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80149f8:	d026      	beq.n	8014a48 <__ssputs_r+0x6a>
 80149fa:	6965      	ldr	r5, [r4, #20]
 80149fc:	6909      	ldr	r1, [r1, #16]
 80149fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a02:	eba3 0901 	sub.w	r9, r3, r1
 8014a06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a0a:	1c7b      	adds	r3, r7, #1
 8014a0c:	444b      	add	r3, r9
 8014a0e:	106d      	asrs	r5, r5, #1
 8014a10:	429d      	cmp	r5, r3
 8014a12:	bf38      	it	cc
 8014a14:	461d      	movcc	r5, r3
 8014a16:	0553      	lsls	r3, r2, #21
 8014a18:	d527      	bpl.n	8014a6a <__ssputs_r+0x8c>
 8014a1a:	4629      	mov	r1, r5
 8014a1c:	f7fd fc18 	bl	8012250 <_malloc_r>
 8014a20:	4606      	mov	r6, r0
 8014a22:	b360      	cbz	r0, 8014a7e <__ssputs_r+0xa0>
 8014a24:	464a      	mov	r2, r9
 8014a26:	6921      	ldr	r1, [r4, #16]
 8014a28:	f7fe fd55 	bl	80134d6 <memcpy>
 8014a2c:	89a3      	ldrh	r3, [r4, #12]
 8014a2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a36:	81a3      	strh	r3, [r4, #12]
 8014a38:	6126      	str	r6, [r4, #16]
 8014a3a:	444e      	add	r6, r9
 8014a3c:	6026      	str	r6, [r4, #0]
 8014a3e:	463e      	mov	r6, r7
 8014a40:	6165      	str	r5, [r4, #20]
 8014a42:	eba5 0509 	sub.w	r5, r5, r9
 8014a46:	60a5      	str	r5, [r4, #8]
 8014a48:	42be      	cmp	r6, r7
 8014a4a:	d900      	bls.n	8014a4e <__ssputs_r+0x70>
 8014a4c:	463e      	mov	r6, r7
 8014a4e:	4632      	mov	r2, r6
 8014a50:	4641      	mov	r1, r8
 8014a52:	6820      	ldr	r0, [r4, #0]
 8014a54:	f000 ff0a 	bl	801586c <memmove>
 8014a58:	2000      	movs	r0, #0
 8014a5a:	68a3      	ldr	r3, [r4, #8]
 8014a5c:	1b9b      	subs	r3, r3, r6
 8014a5e:	60a3      	str	r3, [r4, #8]
 8014a60:	6823      	ldr	r3, [r4, #0]
 8014a62:	4433      	add	r3, r6
 8014a64:	6023      	str	r3, [r4, #0]
 8014a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a6a:	462a      	mov	r2, r5
 8014a6c:	f7fd fc84 	bl	8012378 <_realloc_r>
 8014a70:	4606      	mov	r6, r0
 8014a72:	2800      	cmp	r0, #0
 8014a74:	d1e0      	bne.n	8014a38 <__ssputs_r+0x5a>
 8014a76:	4650      	mov	r0, sl
 8014a78:	6921      	ldr	r1, [r4, #16]
 8014a7a:	f7ff fbc9 	bl	8014210 <_free_r>
 8014a7e:	230c      	movs	r3, #12
 8014a80:	f8ca 3000 	str.w	r3, [sl]
 8014a84:	89a3      	ldrh	r3, [r4, #12]
 8014a86:	f04f 30ff 	mov.w	r0, #4294967295
 8014a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a8e:	81a3      	strh	r3, [r4, #12]
 8014a90:	e7e9      	b.n	8014a66 <__ssputs_r+0x88>
	...

08014a94 <_svfiprintf_r>:
 8014a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a98:	4698      	mov	r8, r3
 8014a9a:	898b      	ldrh	r3, [r1, #12]
 8014a9c:	4607      	mov	r7, r0
 8014a9e:	061b      	lsls	r3, r3, #24
 8014aa0:	460d      	mov	r5, r1
 8014aa2:	4614      	mov	r4, r2
 8014aa4:	b09d      	sub	sp, #116	; 0x74
 8014aa6:	d50e      	bpl.n	8014ac6 <_svfiprintf_r+0x32>
 8014aa8:	690b      	ldr	r3, [r1, #16]
 8014aaa:	b963      	cbnz	r3, 8014ac6 <_svfiprintf_r+0x32>
 8014aac:	2140      	movs	r1, #64	; 0x40
 8014aae:	f7fd fbcf 	bl	8012250 <_malloc_r>
 8014ab2:	6028      	str	r0, [r5, #0]
 8014ab4:	6128      	str	r0, [r5, #16]
 8014ab6:	b920      	cbnz	r0, 8014ac2 <_svfiprintf_r+0x2e>
 8014ab8:	230c      	movs	r3, #12
 8014aba:	603b      	str	r3, [r7, #0]
 8014abc:	f04f 30ff 	mov.w	r0, #4294967295
 8014ac0:	e0d0      	b.n	8014c64 <_svfiprintf_r+0x1d0>
 8014ac2:	2340      	movs	r3, #64	; 0x40
 8014ac4:	616b      	str	r3, [r5, #20]
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8014aca:	2320      	movs	r3, #32
 8014acc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014ad0:	2330      	movs	r3, #48	; 0x30
 8014ad2:	f04f 0901 	mov.w	r9, #1
 8014ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ada:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8014c7c <_svfiprintf_r+0x1e8>
 8014ade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014ae2:	4623      	mov	r3, r4
 8014ae4:	469a      	mov	sl, r3
 8014ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014aea:	b10a      	cbz	r2, 8014af0 <_svfiprintf_r+0x5c>
 8014aec:	2a25      	cmp	r2, #37	; 0x25
 8014aee:	d1f9      	bne.n	8014ae4 <_svfiprintf_r+0x50>
 8014af0:	ebba 0b04 	subs.w	fp, sl, r4
 8014af4:	d00b      	beq.n	8014b0e <_svfiprintf_r+0x7a>
 8014af6:	465b      	mov	r3, fp
 8014af8:	4622      	mov	r2, r4
 8014afa:	4629      	mov	r1, r5
 8014afc:	4638      	mov	r0, r7
 8014afe:	f7ff ff6e 	bl	80149de <__ssputs_r>
 8014b02:	3001      	adds	r0, #1
 8014b04:	f000 80a9 	beq.w	8014c5a <_svfiprintf_r+0x1c6>
 8014b08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b0a:	445a      	add	r2, fp
 8014b0c:	9209      	str	r2, [sp, #36]	; 0x24
 8014b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	f000 80a1 	beq.w	8014c5a <_svfiprintf_r+0x1c6>
 8014b18:	2300      	movs	r3, #0
 8014b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8014b1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b22:	f10a 0a01 	add.w	sl, sl, #1
 8014b26:	9304      	str	r3, [sp, #16]
 8014b28:	9307      	str	r3, [sp, #28]
 8014b2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b2e:	931a      	str	r3, [sp, #104]	; 0x68
 8014b30:	4654      	mov	r4, sl
 8014b32:	2205      	movs	r2, #5
 8014b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b38:	4850      	ldr	r0, [pc, #320]	; (8014c7c <_svfiprintf_r+0x1e8>)
 8014b3a:	f7fe fcbe 	bl	80134ba <memchr>
 8014b3e:	9a04      	ldr	r2, [sp, #16]
 8014b40:	b9d8      	cbnz	r0, 8014b7a <_svfiprintf_r+0xe6>
 8014b42:	06d0      	lsls	r0, r2, #27
 8014b44:	bf44      	itt	mi
 8014b46:	2320      	movmi	r3, #32
 8014b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b4c:	0711      	lsls	r1, r2, #28
 8014b4e:	bf44      	itt	mi
 8014b50:	232b      	movmi	r3, #43	; 0x2b
 8014b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b56:	f89a 3000 	ldrb.w	r3, [sl]
 8014b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8014b5c:	d015      	beq.n	8014b8a <_svfiprintf_r+0xf6>
 8014b5e:	4654      	mov	r4, sl
 8014b60:	2000      	movs	r0, #0
 8014b62:	f04f 0c0a 	mov.w	ip, #10
 8014b66:	9a07      	ldr	r2, [sp, #28]
 8014b68:	4621      	mov	r1, r4
 8014b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b6e:	3b30      	subs	r3, #48	; 0x30
 8014b70:	2b09      	cmp	r3, #9
 8014b72:	d94d      	bls.n	8014c10 <_svfiprintf_r+0x17c>
 8014b74:	b1b0      	cbz	r0, 8014ba4 <_svfiprintf_r+0x110>
 8014b76:	9207      	str	r2, [sp, #28]
 8014b78:	e014      	b.n	8014ba4 <_svfiprintf_r+0x110>
 8014b7a:	eba0 0308 	sub.w	r3, r0, r8
 8014b7e:	fa09 f303 	lsl.w	r3, r9, r3
 8014b82:	4313      	orrs	r3, r2
 8014b84:	46a2      	mov	sl, r4
 8014b86:	9304      	str	r3, [sp, #16]
 8014b88:	e7d2      	b.n	8014b30 <_svfiprintf_r+0x9c>
 8014b8a:	9b03      	ldr	r3, [sp, #12]
 8014b8c:	1d19      	adds	r1, r3, #4
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	9103      	str	r1, [sp, #12]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	bfbb      	ittet	lt
 8014b96:	425b      	neglt	r3, r3
 8014b98:	f042 0202 	orrlt.w	r2, r2, #2
 8014b9c:	9307      	strge	r3, [sp, #28]
 8014b9e:	9307      	strlt	r3, [sp, #28]
 8014ba0:	bfb8      	it	lt
 8014ba2:	9204      	strlt	r2, [sp, #16]
 8014ba4:	7823      	ldrb	r3, [r4, #0]
 8014ba6:	2b2e      	cmp	r3, #46	; 0x2e
 8014ba8:	d10c      	bne.n	8014bc4 <_svfiprintf_r+0x130>
 8014baa:	7863      	ldrb	r3, [r4, #1]
 8014bac:	2b2a      	cmp	r3, #42	; 0x2a
 8014bae:	d134      	bne.n	8014c1a <_svfiprintf_r+0x186>
 8014bb0:	9b03      	ldr	r3, [sp, #12]
 8014bb2:	3402      	adds	r4, #2
 8014bb4:	1d1a      	adds	r2, r3, #4
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	9203      	str	r2, [sp, #12]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	bfb8      	it	lt
 8014bbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8014bc2:	9305      	str	r3, [sp, #20]
 8014bc4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8014c80 <_svfiprintf_r+0x1ec>
 8014bc8:	2203      	movs	r2, #3
 8014bca:	4650      	mov	r0, sl
 8014bcc:	7821      	ldrb	r1, [r4, #0]
 8014bce:	f7fe fc74 	bl	80134ba <memchr>
 8014bd2:	b138      	cbz	r0, 8014be4 <_svfiprintf_r+0x150>
 8014bd4:	2240      	movs	r2, #64	; 0x40
 8014bd6:	9b04      	ldr	r3, [sp, #16]
 8014bd8:	eba0 000a 	sub.w	r0, r0, sl
 8014bdc:	4082      	lsls	r2, r0
 8014bde:	4313      	orrs	r3, r2
 8014be0:	3401      	adds	r4, #1
 8014be2:	9304      	str	r3, [sp, #16]
 8014be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014be8:	2206      	movs	r2, #6
 8014bea:	4826      	ldr	r0, [pc, #152]	; (8014c84 <_svfiprintf_r+0x1f0>)
 8014bec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014bf0:	f7fe fc63 	bl	80134ba <memchr>
 8014bf4:	2800      	cmp	r0, #0
 8014bf6:	d038      	beq.n	8014c6a <_svfiprintf_r+0x1d6>
 8014bf8:	4b23      	ldr	r3, [pc, #140]	; (8014c88 <_svfiprintf_r+0x1f4>)
 8014bfa:	bb1b      	cbnz	r3, 8014c44 <_svfiprintf_r+0x1b0>
 8014bfc:	9b03      	ldr	r3, [sp, #12]
 8014bfe:	3307      	adds	r3, #7
 8014c00:	f023 0307 	bic.w	r3, r3, #7
 8014c04:	3308      	adds	r3, #8
 8014c06:	9303      	str	r3, [sp, #12]
 8014c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c0a:	4433      	add	r3, r6
 8014c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8014c0e:	e768      	b.n	8014ae2 <_svfiprintf_r+0x4e>
 8014c10:	460c      	mov	r4, r1
 8014c12:	2001      	movs	r0, #1
 8014c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c18:	e7a6      	b.n	8014b68 <_svfiprintf_r+0xd4>
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	f04f 0c0a 	mov.w	ip, #10
 8014c20:	4619      	mov	r1, r3
 8014c22:	3401      	adds	r4, #1
 8014c24:	9305      	str	r3, [sp, #20]
 8014c26:	4620      	mov	r0, r4
 8014c28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c2c:	3a30      	subs	r2, #48	; 0x30
 8014c2e:	2a09      	cmp	r2, #9
 8014c30:	d903      	bls.n	8014c3a <_svfiprintf_r+0x1a6>
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d0c6      	beq.n	8014bc4 <_svfiprintf_r+0x130>
 8014c36:	9105      	str	r1, [sp, #20]
 8014c38:	e7c4      	b.n	8014bc4 <_svfiprintf_r+0x130>
 8014c3a:	4604      	mov	r4, r0
 8014c3c:	2301      	movs	r3, #1
 8014c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c42:	e7f0      	b.n	8014c26 <_svfiprintf_r+0x192>
 8014c44:	ab03      	add	r3, sp, #12
 8014c46:	9300      	str	r3, [sp, #0]
 8014c48:	462a      	mov	r2, r5
 8014c4a:	4638      	mov	r0, r7
 8014c4c:	4b0f      	ldr	r3, [pc, #60]	; (8014c8c <_svfiprintf_r+0x1f8>)
 8014c4e:	a904      	add	r1, sp, #16
 8014c50:	f7fd fd5c 	bl	801270c <_printf_float>
 8014c54:	1c42      	adds	r2, r0, #1
 8014c56:	4606      	mov	r6, r0
 8014c58:	d1d6      	bne.n	8014c08 <_svfiprintf_r+0x174>
 8014c5a:	89ab      	ldrh	r3, [r5, #12]
 8014c5c:	065b      	lsls	r3, r3, #25
 8014c5e:	f53f af2d 	bmi.w	8014abc <_svfiprintf_r+0x28>
 8014c62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c64:	b01d      	add	sp, #116	; 0x74
 8014c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c6a:	ab03      	add	r3, sp, #12
 8014c6c:	9300      	str	r3, [sp, #0]
 8014c6e:	462a      	mov	r2, r5
 8014c70:	4638      	mov	r0, r7
 8014c72:	4b06      	ldr	r3, [pc, #24]	; (8014c8c <_svfiprintf_r+0x1f8>)
 8014c74:	a904      	add	r1, sp, #16
 8014c76:	f7fd ffe9 	bl	8012c4c <_printf_i>
 8014c7a:	e7eb      	b.n	8014c54 <_svfiprintf_r+0x1c0>
 8014c7c:	0801652c 	.word	0x0801652c
 8014c80:	08016532 	.word	0x08016532
 8014c84:	08016536 	.word	0x08016536
 8014c88:	0801270d 	.word	0x0801270d
 8014c8c:	080149df 	.word	0x080149df

08014c90 <_sungetc_r>:
 8014c90:	b538      	push	{r3, r4, r5, lr}
 8014c92:	1c4b      	adds	r3, r1, #1
 8014c94:	4614      	mov	r4, r2
 8014c96:	d103      	bne.n	8014ca0 <_sungetc_r+0x10>
 8014c98:	f04f 35ff 	mov.w	r5, #4294967295
 8014c9c:	4628      	mov	r0, r5
 8014c9e:	bd38      	pop	{r3, r4, r5, pc}
 8014ca0:	8993      	ldrh	r3, [r2, #12]
 8014ca2:	b2cd      	uxtb	r5, r1
 8014ca4:	f023 0320 	bic.w	r3, r3, #32
 8014ca8:	8193      	strh	r3, [r2, #12]
 8014caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014cac:	6852      	ldr	r2, [r2, #4]
 8014cae:	b18b      	cbz	r3, 8014cd4 <_sungetc_r+0x44>
 8014cb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014cb2:	4293      	cmp	r3, r2
 8014cb4:	dd08      	ble.n	8014cc8 <_sungetc_r+0x38>
 8014cb6:	6823      	ldr	r3, [r4, #0]
 8014cb8:	1e5a      	subs	r2, r3, #1
 8014cba:	6022      	str	r2, [r4, #0]
 8014cbc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014cc0:	6863      	ldr	r3, [r4, #4]
 8014cc2:	3301      	adds	r3, #1
 8014cc4:	6063      	str	r3, [r4, #4]
 8014cc6:	e7e9      	b.n	8014c9c <_sungetc_r+0xc>
 8014cc8:	4621      	mov	r1, r4
 8014cca:	f000 fd97 	bl	80157fc <__submore>
 8014cce:	2800      	cmp	r0, #0
 8014cd0:	d0f1      	beq.n	8014cb6 <_sungetc_r+0x26>
 8014cd2:	e7e1      	b.n	8014c98 <_sungetc_r+0x8>
 8014cd4:	6921      	ldr	r1, [r4, #16]
 8014cd6:	6823      	ldr	r3, [r4, #0]
 8014cd8:	b151      	cbz	r1, 8014cf0 <_sungetc_r+0x60>
 8014cda:	4299      	cmp	r1, r3
 8014cdc:	d208      	bcs.n	8014cf0 <_sungetc_r+0x60>
 8014cde:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8014ce2:	42a9      	cmp	r1, r5
 8014ce4:	d104      	bne.n	8014cf0 <_sungetc_r+0x60>
 8014ce6:	3b01      	subs	r3, #1
 8014ce8:	3201      	adds	r2, #1
 8014cea:	6023      	str	r3, [r4, #0]
 8014cec:	6062      	str	r2, [r4, #4]
 8014cee:	e7d5      	b.n	8014c9c <_sungetc_r+0xc>
 8014cf0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8014cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014cf8:	6363      	str	r3, [r4, #52]	; 0x34
 8014cfa:	2303      	movs	r3, #3
 8014cfc:	63a3      	str	r3, [r4, #56]	; 0x38
 8014cfe:	4623      	mov	r3, r4
 8014d00:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014d04:	6023      	str	r3, [r4, #0]
 8014d06:	2301      	movs	r3, #1
 8014d08:	e7dc      	b.n	8014cc4 <_sungetc_r+0x34>

08014d0a <__ssrefill_r>:
 8014d0a:	b510      	push	{r4, lr}
 8014d0c:	460c      	mov	r4, r1
 8014d0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014d10:	b169      	cbz	r1, 8014d2e <__ssrefill_r+0x24>
 8014d12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d16:	4299      	cmp	r1, r3
 8014d18:	d001      	beq.n	8014d1e <__ssrefill_r+0x14>
 8014d1a:	f7ff fa79 	bl	8014210 <_free_r>
 8014d1e:	2000      	movs	r0, #0
 8014d20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014d22:	6360      	str	r0, [r4, #52]	; 0x34
 8014d24:	6063      	str	r3, [r4, #4]
 8014d26:	b113      	cbz	r3, 8014d2e <__ssrefill_r+0x24>
 8014d28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014d2a:	6023      	str	r3, [r4, #0]
 8014d2c:	bd10      	pop	{r4, pc}
 8014d2e:	6923      	ldr	r3, [r4, #16]
 8014d30:	f04f 30ff 	mov.w	r0, #4294967295
 8014d34:	6023      	str	r3, [r4, #0]
 8014d36:	2300      	movs	r3, #0
 8014d38:	6063      	str	r3, [r4, #4]
 8014d3a:	89a3      	ldrh	r3, [r4, #12]
 8014d3c:	f043 0320 	orr.w	r3, r3, #32
 8014d40:	81a3      	strh	r3, [r4, #12]
 8014d42:	e7f3      	b.n	8014d2c <__ssrefill_r+0x22>

08014d44 <__ssvfiscanf_r>:
 8014d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d48:	460c      	mov	r4, r1
 8014d4a:	2100      	movs	r1, #0
 8014d4c:	4606      	mov	r6, r0
 8014d4e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8014d52:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8014d56:	49a6      	ldr	r1, [pc, #664]	; (8014ff0 <__ssvfiscanf_r+0x2ac>)
 8014d58:	f10d 0804 	add.w	r8, sp, #4
 8014d5c:	91a0      	str	r1, [sp, #640]	; 0x280
 8014d5e:	49a5      	ldr	r1, [pc, #660]	; (8014ff4 <__ssvfiscanf_r+0x2b0>)
 8014d60:	4fa5      	ldr	r7, [pc, #660]	; (8014ff8 <__ssvfiscanf_r+0x2b4>)
 8014d62:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8014ffc <__ssvfiscanf_r+0x2b8>
 8014d66:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014d6a:	91a1      	str	r1, [sp, #644]	; 0x284
 8014d6c:	9300      	str	r3, [sp, #0]
 8014d6e:	7813      	ldrb	r3, [r2, #0]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	f000 815a 	beq.w	801502a <__ssvfiscanf_r+0x2e6>
 8014d76:	5cf9      	ldrb	r1, [r7, r3]
 8014d78:	1c55      	adds	r5, r2, #1
 8014d7a:	f011 0108 	ands.w	r1, r1, #8
 8014d7e:	d019      	beq.n	8014db4 <__ssvfiscanf_r+0x70>
 8014d80:	6863      	ldr	r3, [r4, #4]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	dd0f      	ble.n	8014da6 <__ssvfiscanf_r+0x62>
 8014d86:	6823      	ldr	r3, [r4, #0]
 8014d88:	781a      	ldrb	r2, [r3, #0]
 8014d8a:	5cba      	ldrb	r2, [r7, r2]
 8014d8c:	0712      	lsls	r2, r2, #28
 8014d8e:	d401      	bmi.n	8014d94 <__ssvfiscanf_r+0x50>
 8014d90:	462a      	mov	r2, r5
 8014d92:	e7ec      	b.n	8014d6e <__ssvfiscanf_r+0x2a>
 8014d94:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014d96:	3301      	adds	r3, #1
 8014d98:	3201      	adds	r2, #1
 8014d9a:	9245      	str	r2, [sp, #276]	; 0x114
 8014d9c:	6862      	ldr	r2, [r4, #4]
 8014d9e:	6023      	str	r3, [r4, #0]
 8014da0:	3a01      	subs	r2, #1
 8014da2:	6062      	str	r2, [r4, #4]
 8014da4:	e7ec      	b.n	8014d80 <__ssvfiscanf_r+0x3c>
 8014da6:	4621      	mov	r1, r4
 8014da8:	4630      	mov	r0, r6
 8014daa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014dac:	4798      	blx	r3
 8014dae:	2800      	cmp	r0, #0
 8014db0:	d0e9      	beq.n	8014d86 <__ssvfiscanf_r+0x42>
 8014db2:	e7ed      	b.n	8014d90 <__ssvfiscanf_r+0x4c>
 8014db4:	2b25      	cmp	r3, #37	; 0x25
 8014db6:	d012      	beq.n	8014dde <__ssvfiscanf_r+0x9a>
 8014db8:	469a      	mov	sl, r3
 8014dba:	6863      	ldr	r3, [r4, #4]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	f340 8092 	ble.w	8014ee6 <__ssvfiscanf_r+0x1a2>
 8014dc2:	6822      	ldr	r2, [r4, #0]
 8014dc4:	7813      	ldrb	r3, [r2, #0]
 8014dc6:	4553      	cmp	r3, sl
 8014dc8:	f040 812f 	bne.w	801502a <__ssvfiscanf_r+0x2e6>
 8014dcc:	6863      	ldr	r3, [r4, #4]
 8014dce:	3201      	adds	r2, #1
 8014dd0:	3b01      	subs	r3, #1
 8014dd2:	6063      	str	r3, [r4, #4]
 8014dd4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8014dd6:	6022      	str	r2, [r4, #0]
 8014dd8:	3301      	adds	r3, #1
 8014dda:	9345      	str	r3, [sp, #276]	; 0x114
 8014ddc:	e7d8      	b.n	8014d90 <__ssvfiscanf_r+0x4c>
 8014dde:	9141      	str	r1, [sp, #260]	; 0x104
 8014de0:	9143      	str	r1, [sp, #268]	; 0x10c
 8014de2:	7853      	ldrb	r3, [r2, #1]
 8014de4:	2b2a      	cmp	r3, #42	; 0x2a
 8014de6:	bf04      	itt	eq
 8014de8:	2310      	moveq	r3, #16
 8014dea:	1c95      	addeq	r5, r2, #2
 8014dec:	f04f 020a 	mov.w	r2, #10
 8014df0:	bf08      	it	eq
 8014df2:	9341      	streq	r3, [sp, #260]	; 0x104
 8014df4:	46aa      	mov	sl, r5
 8014df6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8014dfa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8014dfe:	2b09      	cmp	r3, #9
 8014e00:	d91c      	bls.n	8014e3c <__ssvfiscanf_r+0xf8>
 8014e02:	2203      	movs	r2, #3
 8014e04:	487d      	ldr	r0, [pc, #500]	; (8014ffc <__ssvfiscanf_r+0x2b8>)
 8014e06:	f7fe fb58 	bl	80134ba <memchr>
 8014e0a:	b138      	cbz	r0, 8014e1c <__ssvfiscanf_r+0xd8>
 8014e0c:	2301      	movs	r3, #1
 8014e0e:	4655      	mov	r5, sl
 8014e10:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014e12:	eba0 0009 	sub.w	r0, r0, r9
 8014e16:	4083      	lsls	r3, r0
 8014e18:	4313      	orrs	r3, r2
 8014e1a:	9341      	str	r3, [sp, #260]	; 0x104
 8014e1c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014e20:	2b78      	cmp	r3, #120	; 0x78
 8014e22:	d806      	bhi.n	8014e32 <__ssvfiscanf_r+0xee>
 8014e24:	2b57      	cmp	r3, #87	; 0x57
 8014e26:	d810      	bhi.n	8014e4a <__ssvfiscanf_r+0x106>
 8014e28:	2b25      	cmp	r3, #37	; 0x25
 8014e2a:	d0c5      	beq.n	8014db8 <__ssvfiscanf_r+0x74>
 8014e2c:	d856      	bhi.n	8014edc <__ssvfiscanf_r+0x198>
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d064      	beq.n	8014efc <__ssvfiscanf_r+0x1b8>
 8014e32:	2303      	movs	r3, #3
 8014e34:	9347      	str	r3, [sp, #284]	; 0x11c
 8014e36:	230a      	movs	r3, #10
 8014e38:	9342      	str	r3, [sp, #264]	; 0x108
 8014e3a:	e075      	b.n	8014f28 <__ssvfiscanf_r+0x1e4>
 8014e3c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014e3e:	4655      	mov	r5, sl
 8014e40:	fb02 1103 	mla	r1, r2, r3, r1
 8014e44:	3930      	subs	r1, #48	; 0x30
 8014e46:	9143      	str	r1, [sp, #268]	; 0x10c
 8014e48:	e7d4      	b.n	8014df4 <__ssvfiscanf_r+0xb0>
 8014e4a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8014e4e:	2a20      	cmp	r2, #32
 8014e50:	d8ef      	bhi.n	8014e32 <__ssvfiscanf_r+0xee>
 8014e52:	a101      	add	r1, pc, #4	; (adr r1, 8014e58 <__ssvfiscanf_r+0x114>)
 8014e54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014e58:	08014f0b 	.word	0x08014f0b
 8014e5c:	08014e33 	.word	0x08014e33
 8014e60:	08014e33 	.word	0x08014e33
 8014e64:	08014f69 	.word	0x08014f69
 8014e68:	08014e33 	.word	0x08014e33
 8014e6c:	08014e33 	.word	0x08014e33
 8014e70:	08014e33 	.word	0x08014e33
 8014e74:	08014e33 	.word	0x08014e33
 8014e78:	08014e33 	.word	0x08014e33
 8014e7c:	08014e33 	.word	0x08014e33
 8014e80:	08014e33 	.word	0x08014e33
 8014e84:	08014f7f 	.word	0x08014f7f
 8014e88:	08014f65 	.word	0x08014f65
 8014e8c:	08014ee3 	.word	0x08014ee3
 8014e90:	08014ee3 	.word	0x08014ee3
 8014e94:	08014ee3 	.word	0x08014ee3
 8014e98:	08014e33 	.word	0x08014e33
 8014e9c:	08014f21 	.word	0x08014f21
 8014ea0:	08014e33 	.word	0x08014e33
 8014ea4:	08014e33 	.word	0x08014e33
 8014ea8:	08014e33 	.word	0x08014e33
 8014eac:	08014e33 	.word	0x08014e33
 8014eb0:	08014f8f 	.word	0x08014f8f
 8014eb4:	08014f5d 	.word	0x08014f5d
 8014eb8:	08014f03 	.word	0x08014f03
 8014ebc:	08014e33 	.word	0x08014e33
 8014ec0:	08014e33 	.word	0x08014e33
 8014ec4:	08014f8b 	.word	0x08014f8b
 8014ec8:	08014e33 	.word	0x08014e33
 8014ecc:	08014f65 	.word	0x08014f65
 8014ed0:	08014e33 	.word	0x08014e33
 8014ed4:	08014e33 	.word	0x08014e33
 8014ed8:	08014f0b 	.word	0x08014f0b
 8014edc:	3b45      	subs	r3, #69	; 0x45
 8014ede:	2b02      	cmp	r3, #2
 8014ee0:	d8a7      	bhi.n	8014e32 <__ssvfiscanf_r+0xee>
 8014ee2:	2305      	movs	r3, #5
 8014ee4:	e01f      	b.n	8014f26 <__ssvfiscanf_r+0x1e2>
 8014ee6:	4621      	mov	r1, r4
 8014ee8:	4630      	mov	r0, r6
 8014eea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014eec:	4798      	blx	r3
 8014eee:	2800      	cmp	r0, #0
 8014ef0:	f43f af67 	beq.w	8014dc2 <__ssvfiscanf_r+0x7e>
 8014ef4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014ef6:	2800      	cmp	r0, #0
 8014ef8:	f040 808d 	bne.w	8015016 <__ssvfiscanf_r+0x2d2>
 8014efc:	f04f 30ff 	mov.w	r0, #4294967295
 8014f00:	e08f      	b.n	8015022 <__ssvfiscanf_r+0x2de>
 8014f02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014f04:	f042 0220 	orr.w	r2, r2, #32
 8014f08:	9241      	str	r2, [sp, #260]	; 0x104
 8014f0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014f10:	9241      	str	r2, [sp, #260]	; 0x104
 8014f12:	2210      	movs	r2, #16
 8014f14:	2b6f      	cmp	r3, #111	; 0x6f
 8014f16:	bf34      	ite	cc
 8014f18:	2303      	movcc	r3, #3
 8014f1a:	2304      	movcs	r3, #4
 8014f1c:	9242      	str	r2, [sp, #264]	; 0x108
 8014f1e:	e002      	b.n	8014f26 <__ssvfiscanf_r+0x1e2>
 8014f20:	2300      	movs	r3, #0
 8014f22:	9342      	str	r3, [sp, #264]	; 0x108
 8014f24:	2303      	movs	r3, #3
 8014f26:	9347      	str	r3, [sp, #284]	; 0x11c
 8014f28:	6863      	ldr	r3, [r4, #4]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	dd3d      	ble.n	8014faa <__ssvfiscanf_r+0x266>
 8014f2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014f30:	0659      	lsls	r1, r3, #25
 8014f32:	d404      	bmi.n	8014f3e <__ssvfiscanf_r+0x1fa>
 8014f34:	6823      	ldr	r3, [r4, #0]
 8014f36:	781a      	ldrb	r2, [r3, #0]
 8014f38:	5cba      	ldrb	r2, [r7, r2]
 8014f3a:	0712      	lsls	r2, r2, #28
 8014f3c:	d43c      	bmi.n	8014fb8 <__ssvfiscanf_r+0x274>
 8014f3e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014f40:	2b02      	cmp	r3, #2
 8014f42:	dc4b      	bgt.n	8014fdc <__ssvfiscanf_r+0x298>
 8014f44:	466b      	mov	r3, sp
 8014f46:	4622      	mov	r2, r4
 8014f48:	4630      	mov	r0, r6
 8014f4a:	a941      	add	r1, sp, #260	; 0x104
 8014f4c:	f000 f9b4 	bl	80152b8 <_scanf_chars>
 8014f50:	2801      	cmp	r0, #1
 8014f52:	d06a      	beq.n	801502a <__ssvfiscanf_r+0x2e6>
 8014f54:	2802      	cmp	r0, #2
 8014f56:	f47f af1b 	bne.w	8014d90 <__ssvfiscanf_r+0x4c>
 8014f5a:	e7cb      	b.n	8014ef4 <__ssvfiscanf_r+0x1b0>
 8014f5c:	2308      	movs	r3, #8
 8014f5e:	9342      	str	r3, [sp, #264]	; 0x108
 8014f60:	2304      	movs	r3, #4
 8014f62:	e7e0      	b.n	8014f26 <__ssvfiscanf_r+0x1e2>
 8014f64:	220a      	movs	r2, #10
 8014f66:	e7d5      	b.n	8014f14 <__ssvfiscanf_r+0x1d0>
 8014f68:	4629      	mov	r1, r5
 8014f6a:	4640      	mov	r0, r8
 8014f6c:	f000 fc0d 	bl	801578a <__sccl>
 8014f70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014f72:	4605      	mov	r5, r0
 8014f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f78:	9341      	str	r3, [sp, #260]	; 0x104
 8014f7a:	2301      	movs	r3, #1
 8014f7c:	e7d3      	b.n	8014f26 <__ssvfiscanf_r+0x1e2>
 8014f7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f84:	9341      	str	r3, [sp, #260]	; 0x104
 8014f86:	2300      	movs	r3, #0
 8014f88:	e7cd      	b.n	8014f26 <__ssvfiscanf_r+0x1e2>
 8014f8a:	2302      	movs	r3, #2
 8014f8c:	e7cb      	b.n	8014f26 <__ssvfiscanf_r+0x1e2>
 8014f8e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014f90:	06c3      	lsls	r3, r0, #27
 8014f92:	f53f aefd 	bmi.w	8014d90 <__ssvfiscanf_r+0x4c>
 8014f96:	9b00      	ldr	r3, [sp, #0]
 8014f98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014f9a:	1d19      	adds	r1, r3, #4
 8014f9c:	9100      	str	r1, [sp, #0]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	07c0      	lsls	r0, r0, #31
 8014fa2:	bf4c      	ite	mi
 8014fa4:	801a      	strhmi	r2, [r3, #0]
 8014fa6:	601a      	strpl	r2, [r3, #0]
 8014fa8:	e6f2      	b.n	8014d90 <__ssvfiscanf_r+0x4c>
 8014faa:	4621      	mov	r1, r4
 8014fac:	4630      	mov	r0, r6
 8014fae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014fb0:	4798      	blx	r3
 8014fb2:	2800      	cmp	r0, #0
 8014fb4:	d0bb      	beq.n	8014f2e <__ssvfiscanf_r+0x1ea>
 8014fb6:	e79d      	b.n	8014ef4 <__ssvfiscanf_r+0x1b0>
 8014fb8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014fba:	3201      	adds	r2, #1
 8014fbc:	9245      	str	r2, [sp, #276]	; 0x114
 8014fbe:	6862      	ldr	r2, [r4, #4]
 8014fc0:	3a01      	subs	r2, #1
 8014fc2:	2a00      	cmp	r2, #0
 8014fc4:	6062      	str	r2, [r4, #4]
 8014fc6:	dd02      	ble.n	8014fce <__ssvfiscanf_r+0x28a>
 8014fc8:	3301      	adds	r3, #1
 8014fca:	6023      	str	r3, [r4, #0]
 8014fcc:	e7b2      	b.n	8014f34 <__ssvfiscanf_r+0x1f0>
 8014fce:	4621      	mov	r1, r4
 8014fd0:	4630      	mov	r0, r6
 8014fd2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014fd4:	4798      	blx	r3
 8014fd6:	2800      	cmp	r0, #0
 8014fd8:	d0ac      	beq.n	8014f34 <__ssvfiscanf_r+0x1f0>
 8014fda:	e78b      	b.n	8014ef4 <__ssvfiscanf_r+0x1b0>
 8014fdc:	2b04      	cmp	r3, #4
 8014fde:	dc0f      	bgt.n	8015000 <__ssvfiscanf_r+0x2bc>
 8014fe0:	466b      	mov	r3, sp
 8014fe2:	4622      	mov	r2, r4
 8014fe4:	4630      	mov	r0, r6
 8014fe6:	a941      	add	r1, sp, #260	; 0x104
 8014fe8:	f000 f9c0 	bl	801536c <_scanf_i>
 8014fec:	e7b0      	b.n	8014f50 <__ssvfiscanf_r+0x20c>
 8014fee:	bf00      	nop
 8014ff0:	08014c91 	.word	0x08014c91
 8014ff4:	08014d0b 	.word	0x08014d0b
 8014ff8:	080161cf 	.word	0x080161cf
 8014ffc:	08016532 	.word	0x08016532
 8015000:	4b0b      	ldr	r3, [pc, #44]	; (8015030 <__ssvfiscanf_r+0x2ec>)
 8015002:	2b00      	cmp	r3, #0
 8015004:	f43f aec4 	beq.w	8014d90 <__ssvfiscanf_r+0x4c>
 8015008:	466b      	mov	r3, sp
 801500a:	4622      	mov	r2, r4
 801500c:	4630      	mov	r0, r6
 801500e:	a941      	add	r1, sp, #260	; 0x104
 8015010:	f3af 8000 	nop.w
 8015014:	e79c      	b.n	8014f50 <__ssvfiscanf_r+0x20c>
 8015016:	89a3      	ldrh	r3, [r4, #12]
 8015018:	f013 0f40 	tst.w	r3, #64	; 0x40
 801501c:	bf18      	it	ne
 801501e:	f04f 30ff 	movne.w	r0, #4294967295
 8015022:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8015026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801502a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801502c:	e7f9      	b.n	8015022 <__ssvfiscanf_r+0x2de>
 801502e:	bf00      	nop
 8015030:	00000000 	.word	0x00000000

08015034 <__sfputc_r>:
 8015034:	6893      	ldr	r3, [r2, #8]
 8015036:	b410      	push	{r4}
 8015038:	3b01      	subs	r3, #1
 801503a:	2b00      	cmp	r3, #0
 801503c:	6093      	str	r3, [r2, #8]
 801503e:	da07      	bge.n	8015050 <__sfputc_r+0x1c>
 8015040:	6994      	ldr	r4, [r2, #24]
 8015042:	42a3      	cmp	r3, r4
 8015044:	db01      	blt.n	801504a <__sfputc_r+0x16>
 8015046:	290a      	cmp	r1, #10
 8015048:	d102      	bne.n	8015050 <__sfputc_r+0x1c>
 801504a:	bc10      	pop	{r4}
 801504c:	f7fe b8aa 	b.w	80131a4 <__swbuf_r>
 8015050:	6813      	ldr	r3, [r2, #0]
 8015052:	1c58      	adds	r0, r3, #1
 8015054:	6010      	str	r0, [r2, #0]
 8015056:	7019      	strb	r1, [r3, #0]
 8015058:	4608      	mov	r0, r1
 801505a:	bc10      	pop	{r4}
 801505c:	4770      	bx	lr

0801505e <__sfputs_r>:
 801505e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015060:	4606      	mov	r6, r0
 8015062:	460f      	mov	r7, r1
 8015064:	4614      	mov	r4, r2
 8015066:	18d5      	adds	r5, r2, r3
 8015068:	42ac      	cmp	r4, r5
 801506a:	d101      	bne.n	8015070 <__sfputs_r+0x12>
 801506c:	2000      	movs	r0, #0
 801506e:	e007      	b.n	8015080 <__sfputs_r+0x22>
 8015070:	463a      	mov	r2, r7
 8015072:	4630      	mov	r0, r6
 8015074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015078:	f7ff ffdc 	bl	8015034 <__sfputc_r>
 801507c:	1c43      	adds	r3, r0, #1
 801507e:	d1f3      	bne.n	8015068 <__sfputs_r+0xa>
 8015080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015084 <_vfiprintf_r>:
 8015084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015088:	460d      	mov	r5, r1
 801508a:	4614      	mov	r4, r2
 801508c:	4698      	mov	r8, r3
 801508e:	4606      	mov	r6, r0
 8015090:	b09d      	sub	sp, #116	; 0x74
 8015092:	b118      	cbz	r0, 801509c <_vfiprintf_r+0x18>
 8015094:	6a03      	ldr	r3, [r0, #32]
 8015096:	b90b      	cbnz	r3, 801509c <_vfiprintf_r+0x18>
 8015098:	f7fd ff86 	bl	8012fa8 <__sinit>
 801509c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801509e:	07d9      	lsls	r1, r3, #31
 80150a0:	d405      	bmi.n	80150ae <_vfiprintf_r+0x2a>
 80150a2:	89ab      	ldrh	r3, [r5, #12]
 80150a4:	059a      	lsls	r2, r3, #22
 80150a6:	d402      	bmi.n	80150ae <_vfiprintf_r+0x2a>
 80150a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150aa:	f7fe f9fc 	bl	80134a6 <__retarget_lock_acquire_recursive>
 80150ae:	89ab      	ldrh	r3, [r5, #12]
 80150b0:	071b      	lsls	r3, r3, #28
 80150b2:	d501      	bpl.n	80150b8 <_vfiprintf_r+0x34>
 80150b4:	692b      	ldr	r3, [r5, #16]
 80150b6:	b99b      	cbnz	r3, 80150e0 <_vfiprintf_r+0x5c>
 80150b8:	4629      	mov	r1, r5
 80150ba:	4630      	mov	r0, r6
 80150bc:	f7fe f8b0 	bl	8013220 <__swsetup_r>
 80150c0:	b170      	cbz	r0, 80150e0 <_vfiprintf_r+0x5c>
 80150c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150c4:	07dc      	lsls	r4, r3, #31
 80150c6:	d504      	bpl.n	80150d2 <_vfiprintf_r+0x4e>
 80150c8:	f04f 30ff 	mov.w	r0, #4294967295
 80150cc:	b01d      	add	sp, #116	; 0x74
 80150ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d2:	89ab      	ldrh	r3, [r5, #12]
 80150d4:	0598      	lsls	r0, r3, #22
 80150d6:	d4f7      	bmi.n	80150c8 <_vfiprintf_r+0x44>
 80150d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150da:	f7fe f9e5 	bl	80134a8 <__retarget_lock_release_recursive>
 80150de:	e7f3      	b.n	80150c8 <_vfiprintf_r+0x44>
 80150e0:	2300      	movs	r3, #0
 80150e2:	9309      	str	r3, [sp, #36]	; 0x24
 80150e4:	2320      	movs	r3, #32
 80150e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80150ea:	2330      	movs	r3, #48	; 0x30
 80150ec:	f04f 0901 	mov.w	r9, #1
 80150f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80150f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80152a4 <_vfiprintf_r+0x220>
 80150f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80150fc:	4623      	mov	r3, r4
 80150fe:	469a      	mov	sl, r3
 8015100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015104:	b10a      	cbz	r2, 801510a <_vfiprintf_r+0x86>
 8015106:	2a25      	cmp	r2, #37	; 0x25
 8015108:	d1f9      	bne.n	80150fe <_vfiprintf_r+0x7a>
 801510a:	ebba 0b04 	subs.w	fp, sl, r4
 801510e:	d00b      	beq.n	8015128 <_vfiprintf_r+0xa4>
 8015110:	465b      	mov	r3, fp
 8015112:	4622      	mov	r2, r4
 8015114:	4629      	mov	r1, r5
 8015116:	4630      	mov	r0, r6
 8015118:	f7ff ffa1 	bl	801505e <__sfputs_r>
 801511c:	3001      	adds	r0, #1
 801511e:	f000 80a9 	beq.w	8015274 <_vfiprintf_r+0x1f0>
 8015122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015124:	445a      	add	r2, fp
 8015126:	9209      	str	r2, [sp, #36]	; 0x24
 8015128:	f89a 3000 	ldrb.w	r3, [sl]
 801512c:	2b00      	cmp	r3, #0
 801512e:	f000 80a1 	beq.w	8015274 <_vfiprintf_r+0x1f0>
 8015132:	2300      	movs	r3, #0
 8015134:	f04f 32ff 	mov.w	r2, #4294967295
 8015138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801513c:	f10a 0a01 	add.w	sl, sl, #1
 8015140:	9304      	str	r3, [sp, #16]
 8015142:	9307      	str	r3, [sp, #28]
 8015144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015148:	931a      	str	r3, [sp, #104]	; 0x68
 801514a:	4654      	mov	r4, sl
 801514c:	2205      	movs	r2, #5
 801514e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015152:	4854      	ldr	r0, [pc, #336]	; (80152a4 <_vfiprintf_r+0x220>)
 8015154:	f7fe f9b1 	bl	80134ba <memchr>
 8015158:	9a04      	ldr	r2, [sp, #16]
 801515a:	b9d8      	cbnz	r0, 8015194 <_vfiprintf_r+0x110>
 801515c:	06d1      	lsls	r1, r2, #27
 801515e:	bf44      	itt	mi
 8015160:	2320      	movmi	r3, #32
 8015162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015166:	0713      	lsls	r3, r2, #28
 8015168:	bf44      	itt	mi
 801516a:	232b      	movmi	r3, #43	; 0x2b
 801516c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015170:	f89a 3000 	ldrb.w	r3, [sl]
 8015174:	2b2a      	cmp	r3, #42	; 0x2a
 8015176:	d015      	beq.n	80151a4 <_vfiprintf_r+0x120>
 8015178:	4654      	mov	r4, sl
 801517a:	2000      	movs	r0, #0
 801517c:	f04f 0c0a 	mov.w	ip, #10
 8015180:	9a07      	ldr	r2, [sp, #28]
 8015182:	4621      	mov	r1, r4
 8015184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015188:	3b30      	subs	r3, #48	; 0x30
 801518a:	2b09      	cmp	r3, #9
 801518c:	d94d      	bls.n	801522a <_vfiprintf_r+0x1a6>
 801518e:	b1b0      	cbz	r0, 80151be <_vfiprintf_r+0x13a>
 8015190:	9207      	str	r2, [sp, #28]
 8015192:	e014      	b.n	80151be <_vfiprintf_r+0x13a>
 8015194:	eba0 0308 	sub.w	r3, r0, r8
 8015198:	fa09 f303 	lsl.w	r3, r9, r3
 801519c:	4313      	orrs	r3, r2
 801519e:	46a2      	mov	sl, r4
 80151a0:	9304      	str	r3, [sp, #16]
 80151a2:	e7d2      	b.n	801514a <_vfiprintf_r+0xc6>
 80151a4:	9b03      	ldr	r3, [sp, #12]
 80151a6:	1d19      	adds	r1, r3, #4
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	9103      	str	r1, [sp, #12]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	bfbb      	ittet	lt
 80151b0:	425b      	neglt	r3, r3
 80151b2:	f042 0202 	orrlt.w	r2, r2, #2
 80151b6:	9307      	strge	r3, [sp, #28]
 80151b8:	9307      	strlt	r3, [sp, #28]
 80151ba:	bfb8      	it	lt
 80151bc:	9204      	strlt	r2, [sp, #16]
 80151be:	7823      	ldrb	r3, [r4, #0]
 80151c0:	2b2e      	cmp	r3, #46	; 0x2e
 80151c2:	d10c      	bne.n	80151de <_vfiprintf_r+0x15a>
 80151c4:	7863      	ldrb	r3, [r4, #1]
 80151c6:	2b2a      	cmp	r3, #42	; 0x2a
 80151c8:	d134      	bne.n	8015234 <_vfiprintf_r+0x1b0>
 80151ca:	9b03      	ldr	r3, [sp, #12]
 80151cc:	3402      	adds	r4, #2
 80151ce:	1d1a      	adds	r2, r3, #4
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	9203      	str	r2, [sp, #12]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	bfb8      	it	lt
 80151d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80151dc:	9305      	str	r3, [sp, #20]
 80151de:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80152a8 <_vfiprintf_r+0x224>
 80151e2:	2203      	movs	r2, #3
 80151e4:	4650      	mov	r0, sl
 80151e6:	7821      	ldrb	r1, [r4, #0]
 80151e8:	f7fe f967 	bl	80134ba <memchr>
 80151ec:	b138      	cbz	r0, 80151fe <_vfiprintf_r+0x17a>
 80151ee:	2240      	movs	r2, #64	; 0x40
 80151f0:	9b04      	ldr	r3, [sp, #16]
 80151f2:	eba0 000a 	sub.w	r0, r0, sl
 80151f6:	4082      	lsls	r2, r0
 80151f8:	4313      	orrs	r3, r2
 80151fa:	3401      	adds	r4, #1
 80151fc:	9304      	str	r3, [sp, #16]
 80151fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015202:	2206      	movs	r2, #6
 8015204:	4829      	ldr	r0, [pc, #164]	; (80152ac <_vfiprintf_r+0x228>)
 8015206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801520a:	f7fe f956 	bl	80134ba <memchr>
 801520e:	2800      	cmp	r0, #0
 8015210:	d03f      	beq.n	8015292 <_vfiprintf_r+0x20e>
 8015212:	4b27      	ldr	r3, [pc, #156]	; (80152b0 <_vfiprintf_r+0x22c>)
 8015214:	bb1b      	cbnz	r3, 801525e <_vfiprintf_r+0x1da>
 8015216:	9b03      	ldr	r3, [sp, #12]
 8015218:	3307      	adds	r3, #7
 801521a:	f023 0307 	bic.w	r3, r3, #7
 801521e:	3308      	adds	r3, #8
 8015220:	9303      	str	r3, [sp, #12]
 8015222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015224:	443b      	add	r3, r7
 8015226:	9309      	str	r3, [sp, #36]	; 0x24
 8015228:	e768      	b.n	80150fc <_vfiprintf_r+0x78>
 801522a:	460c      	mov	r4, r1
 801522c:	2001      	movs	r0, #1
 801522e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015232:	e7a6      	b.n	8015182 <_vfiprintf_r+0xfe>
 8015234:	2300      	movs	r3, #0
 8015236:	f04f 0c0a 	mov.w	ip, #10
 801523a:	4619      	mov	r1, r3
 801523c:	3401      	adds	r4, #1
 801523e:	9305      	str	r3, [sp, #20]
 8015240:	4620      	mov	r0, r4
 8015242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015246:	3a30      	subs	r2, #48	; 0x30
 8015248:	2a09      	cmp	r2, #9
 801524a:	d903      	bls.n	8015254 <_vfiprintf_r+0x1d0>
 801524c:	2b00      	cmp	r3, #0
 801524e:	d0c6      	beq.n	80151de <_vfiprintf_r+0x15a>
 8015250:	9105      	str	r1, [sp, #20]
 8015252:	e7c4      	b.n	80151de <_vfiprintf_r+0x15a>
 8015254:	4604      	mov	r4, r0
 8015256:	2301      	movs	r3, #1
 8015258:	fb0c 2101 	mla	r1, ip, r1, r2
 801525c:	e7f0      	b.n	8015240 <_vfiprintf_r+0x1bc>
 801525e:	ab03      	add	r3, sp, #12
 8015260:	9300      	str	r3, [sp, #0]
 8015262:	462a      	mov	r2, r5
 8015264:	4630      	mov	r0, r6
 8015266:	4b13      	ldr	r3, [pc, #76]	; (80152b4 <_vfiprintf_r+0x230>)
 8015268:	a904      	add	r1, sp, #16
 801526a:	f7fd fa4f 	bl	801270c <_printf_float>
 801526e:	4607      	mov	r7, r0
 8015270:	1c78      	adds	r0, r7, #1
 8015272:	d1d6      	bne.n	8015222 <_vfiprintf_r+0x19e>
 8015274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015276:	07d9      	lsls	r1, r3, #31
 8015278:	d405      	bmi.n	8015286 <_vfiprintf_r+0x202>
 801527a:	89ab      	ldrh	r3, [r5, #12]
 801527c:	059a      	lsls	r2, r3, #22
 801527e:	d402      	bmi.n	8015286 <_vfiprintf_r+0x202>
 8015280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015282:	f7fe f911 	bl	80134a8 <__retarget_lock_release_recursive>
 8015286:	89ab      	ldrh	r3, [r5, #12]
 8015288:	065b      	lsls	r3, r3, #25
 801528a:	f53f af1d 	bmi.w	80150c8 <_vfiprintf_r+0x44>
 801528e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015290:	e71c      	b.n	80150cc <_vfiprintf_r+0x48>
 8015292:	ab03      	add	r3, sp, #12
 8015294:	9300      	str	r3, [sp, #0]
 8015296:	462a      	mov	r2, r5
 8015298:	4630      	mov	r0, r6
 801529a:	4b06      	ldr	r3, [pc, #24]	; (80152b4 <_vfiprintf_r+0x230>)
 801529c:	a904      	add	r1, sp, #16
 801529e:	f7fd fcd5 	bl	8012c4c <_printf_i>
 80152a2:	e7e4      	b.n	801526e <_vfiprintf_r+0x1ea>
 80152a4:	0801652c 	.word	0x0801652c
 80152a8:	08016532 	.word	0x08016532
 80152ac:	08016536 	.word	0x08016536
 80152b0:	0801270d 	.word	0x0801270d
 80152b4:	0801505f 	.word	0x0801505f

080152b8 <_scanf_chars>:
 80152b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152bc:	4615      	mov	r5, r2
 80152be:	688a      	ldr	r2, [r1, #8]
 80152c0:	4680      	mov	r8, r0
 80152c2:	460c      	mov	r4, r1
 80152c4:	b932      	cbnz	r2, 80152d4 <_scanf_chars+0x1c>
 80152c6:	698a      	ldr	r2, [r1, #24]
 80152c8:	2a00      	cmp	r2, #0
 80152ca:	bf0c      	ite	eq
 80152cc:	2201      	moveq	r2, #1
 80152ce:	f04f 32ff 	movne.w	r2, #4294967295
 80152d2:	608a      	str	r2, [r1, #8]
 80152d4:	2700      	movs	r7, #0
 80152d6:	6822      	ldr	r2, [r4, #0]
 80152d8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8015368 <_scanf_chars+0xb0>
 80152dc:	06d1      	lsls	r1, r2, #27
 80152de:	bf5f      	itttt	pl
 80152e0:	681a      	ldrpl	r2, [r3, #0]
 80152e2:	1d11      	addpl	r1, r2, #4
 80152e4:	6019      	strpl	r1, [r3, #0]
 80152e6:	6816      	ldrpl	r6, [r2, #0]
 80152e8:	69a0      	ldr	r0, [r4, #24]
 80152ea:	b188      	cbz	r0, 8015310 <_scanf_chars+0x58>
 80152ec:	2801      	cmp	r0, #1
 80152ee:	d107      	bne.n	8015300 <_scanf_chars+0x48>
 80152f0:	682b      	ldr	r3, [r5, #0]
 80152f2:	781a      	ldrb	r2, [r3, #0]
 80152f4:	6963      	ldr	r3, [r4, #20]
 80152f6:	5c9b      	ldrb	r3, [r3, r2]
 80152f8:	b953      	cbnz	r3, 8015310 <_scanf_chars+0x58>
 80152fa:	2f00      	cmp	r7, #0
 80152fc:	d031      	beq.n	8015362 <_scanf_chars+0xaa>
 80152fe:	e022      	b.n	8015346 <_scanf_chars+0x8e>
 8015300:	2802      	cmp	r0, #2
 8015302:	d120      	bne.n	8015346 <_scanf_chars+0x8e>
 8015304:	682b      	ldr	r3, [r5, #0]
 8015306:	781b      	ldrb	r3, [r3, #0]
 8015308:	f819 3003 	ldrb.w	r3, [r9, r3]
 801530c:	071b      	lsls	r3, r3, #28
 801530e:	d41a      	bmi.n	8015346 <_scanf_chars+0x8e>
 8015310:	6823      	ldr	r3, [r4, #0]
 8015312:	3701      	adds	r7, #1
 8015314:	06da      	lsls	r2, r3, #27
 8015316:	bf5e      	ittt	pl
 8015318:	682b      	ldrpl	r3, [r5, #0]
 801531a:	781b      	ldrbpl	r3, [r3, #0]
 801531c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8015320:	682a      	ldr	r2, [r5, #0]
 8015322:	686b      	ldr	r3, [r5, #4]
 8015324:	3201      	adds	r2, #1
 8015326:	602a      	str	r2, [r5, #0]
 8015328:	68a2      	ldr	r2, [r4, #8]
 801532a:	3b01      	subs	r3, #1
 801532c:	3a01      	subs	r2, #1
 801532e:	606b      	str	r3, [r5, #4]
 8015330:	60a2      	str	r2, [r4, #8]
 8015332:	b142      	cbz	r2, 8015346 <_scanf_chars+0x8e>
 8015334:	2b00      	cmp	r3, #0
 8015336:	dcd7      	bgt.n	80152e8 <_scanf_chars+0x30>
 8015338:	4629      	mov	r1, r5
 801533a:	4640      	mov	r0, r8
 801533c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015340:	4798      	blx	r3
 8015342:	2800      	cmp	r0, #0
 8015344:	d0d0      	beq.n	80152e8 <_scanf_chars+0x30>
 8015346:	6823      	ldr	r3, [r4, #0]
 8015348:	f013 0310 	ands.w	r3, r3, #16
 801534c:	d105      	bne.n	801535a <_scanf_chars+0xa2>
 801534e:	68e2      	ldr	r2, [r4, #12]
 8015350:	3201      	adds	r2, #1
 8015352:	60e2      	str	r2, [r4, #12]
 8015354:	69a2      	ldr	r2, [r4, #24]
 8015356:	b102      	cbz	r2, 801535a <_scanf_chars+0xa2>
 8015358:	7033      	strb	r3, [r6, #0]
 801535a:	2000      	movs	r0, #0
 801535c:	6923      	ldr	r3, [r4, #16]
 801535e:	443b      	add	r3, r7
 8015360:	6123      	str	r3, [r4, #16]
 8015362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015366:	bf00      	nop
 8015368:	080161cf 	.word	0x080161cf

0801536c <_scanf_i>:
 801536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015370:	460c      	mov	r4, r1
 8015372:	4698      	mov	r8, r3
 8015374:	4b72      	ldr	r3, [pc, #456]	; (8015540 <_scanf_i+0x1d4>)
 8015376:	b087      	sub	sp, #28
 8015378:	4682      	mov	sl, r0
 801537a:	4616      	mov	r6, r2
 801537c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015380:	ab03      	add	r3, sp, #12
 8015382:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015386:	4b6f      	ldr	r3, [pc, #444]	; (8015544 <_scanf_i+0x1d8>)
 8015388:	69a1      	ldr	r1, [r4, #24]
 801538a:	4a6f      	ldr	r2, [pc, #444]	; (8015548 <_scanf_i+0x1dc>)
 801538c:	4627      	mov	r7, r4
 801538e:	2903      	cmp	r1, #3
 8015390:	bf18      	it	ne
 8015392:	461a      	movne	r2, r3
 8015394:	68a3      	ldr	r3, [r4, #8]
 8015396:	9201      	str	r2, [sp, #4]
 8015398:	1e5a      	subs	r2, r3, #1
 801539a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801539e:	bf81      	itttt	hi
 80153a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80153a4:	eb03 0905 	addhi.w	r9, r3, r5
 80153a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80153ac:	60a3      	strhi	r3, [r4, #8]
 80153ae:	f857 3b1c 	ldr.w	r3, [r7], #28
 80153b2:	bf98      	it	ls
 80153b4:	f04f 0900 	movls.w	r9, #0
 80153b8:	463d      	mov	r5, r7
 80153ba:	f04f 0b00 	mov.w	fp, #0
 80153be:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80153c2:	6023      	str	r3, [r4, #0]
 80153c4:	6831      	ldr	r1, [r6, #0]
 80153c6:	ab03      	add	r3, sp, #12
 80153c8:	2202      	movs	r2, #2
 80153ca:	7809      	ldrb	r1, [r1, #0]
 80153cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80153d0:	f7fe f873 	bl	80134ba <memchr>
 80153d4:	b328      	cbz	r0, 8015422 <_scanf_i+0xb6>
 80153d6:	f1bb 0f01 	cmp.w	fp, #1
 80153da:	d159      	bne.n	8015490 <_scanf_i+0x124>
 80153dc:	6862      	ldr	r2, [r4, #4]
 80153de:	b92a      	cbnz	r2, 80153ec <_scanf_i+0x80>
 80153e0:	2308      	movs	r3, #8
 80153e2:	6822      	ldr	r2, [r4, #0]
 80153e4:	6063      	str	r3, [r4, #4]
 80153e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80153ea:	6022      	str	r2, [r4, #0]
 80153ec:	6822      	ldr	r2, [r4, #0]
 80153ee:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80153f2:	6022      	str	r2, [r4, #0]
 80153f4:	68a2      	ldr	r2, [r4, #8]
 80153f6:	1e51      	subs	r1, r2, #1
 80153f8:	60a1      	str	r1, [r4, #8]
 80153fa:	b192      	cbz	r2, 8015422 <_scanf_i+0xb6>
 80153fc:	6832      	ldr	r2, [r6, #0]
 80153fe:	1c51      	adds	r1, r2, #1
 8015400:	6031      	str	r1, [r6, #0]
 8015402:	7812      	ldrb	r2, [r2, #0]
 8015404:	f805 2b01 	strb.w	r2, [r5], #1
 8015408:	6872      	ldr	r2, [r6, #4]
 801540a:	3a01      	subs	r2, #1
 801540c:	2a00      	cmp	r2, #0
 801540e:	6072      	str	r2, [r6, #4]
 8015410:	dc07      	bgt.n	8015422 <_scanf_i+0xb6>
 8015412:	4631      	mov	r1, r6
 8015414:	4650      	mov	r0, sl
 8015416:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801541a:	4790      	blx	r2
 801541c:	2800      	cmp	r0, #0
 801541e:	f040 8085 	bne.w	801552c <_scanf_i+0x1c0>
 8015422:	f10b 0b01 	add.w	fp, fp, #1
 8015426:	f1bb 0f03 	cmp.w	fp, #3
 801542a:	d1cb      	bne.n	80153c4 <_scanf_i+0x58>
 801542c:	6863      	ldr	r3, [r4, #4]
 801542e:	b90b      	cbnz	r3, 8015434 <_scanf_i+0xc8>
 8015430:	230a      	movs	r3, #10
 8015432:	6063      	str	r3, [r4, #4]
 8015434:	6863      	ldr	r3, [r4, #4]
 8015436:	4945      	ldr	r1, [pc, #276]	; (801554c <_scanf_i+0x1e0>)
 8015438:	6960      	ldr	r0, [r4, #20]
 801543a:	1ac9      	subs	r1, r1, r3
 801543c:	f000 f9a5 	bl	801578a <__sccl>
 8015440:	f04f 0b00 	mov.w	fp, #0
 8015444:	68a3      	ldr	r3, [r4, #8]
 8015446:	6822      	ldr	r2, [r4, #0]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d03d      	beq.n	80154c8 <_scanf_i+0x15c>
 801544c:	6831      	ldr	r1, [r6, #0]
 801544e:	6960      	ldr	r0, [r4, #20]
 8015450:	f891 c000 	ldrb.w	ip, [r1]
 8015454:	f810 000c 	ldrb.w	r0, [r0, ip]
 8015458:	2800      	cmp	r0, #0
 801545a:	d035      	beq.n	80154c8 <_scanf_i+0x15c>
 801545c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8015460:	d124      	bne.n	80154ac <_scanf_i+0x140>
 8015462:	0510      	lsls	r0, r2, #20
 8015464:	d522      	bpl.n	80154ac <_scanf_i+0x140>
 8015466:	f10b 0b01 	add.w	fp, fp, #1
 801546a:	f1b9 0f00 	cmp.w	r9, #0
 801546e:	d003      	beq.n	8015478 <_scanf_i+0x10c>
 8015470:	3301      	adds	r3, #1
 8015472:	f109 39ff 	add.w	r9, r9, #4294967295
 8015476:	60a3      	str	r3, [r4, #8]
 8015478:	6873      	ldr	r3, [r6, #4]
 801547a:	3b01      	subs	r3, #1
 801547c:	2b00      	cmp	r3, #0
 801547e:	6073      	str	r3, [r6, #4]
 8015480:	dd1b      	ble.n	80154ba <_scanf_i+0x14e>
 8015482:	6833      	ldr	r3, [r6, #0]
 8015484:	3301      	adds	r3, #1
 8015486:	6033      	str	r3, [r6, #0]
 8015488:	68a3      	ldr	r3, [r4, #8]
 801548a:	3b01      	subs	r3, #1
 801548c:	60a3      	str	r3, [r4, #8]
 801548e:	e7d9      	b.n	8015444 <_scanf_i+0xd8>
 8015490:	f1bb 0f02 	cmp.w	fp, #2
 8015494:	d1ae      	bne.n	80153f4 <_scanf_i+0x88>
 8015496:	6822      	ldr	r2, [r4, #0]
 8015498:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801549c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80154a0:	d1bf      	bne.n	8015422 <_scanf_i+0xb6>
 80154a2:	2310      	movs	r3, #16
 80154a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80154a8:	6063      	str	r3, [r4, #4]
 80154aa:	e7a2      	b.n	80153f2 <_scanf_i+0x86>
 80154ac:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80154b0:	6022      	str	r2, [r4, #0]
 80154b2:	780b      	ldrb	r3, [r1, #0]
 80154b4:	f805 3b01 	strb.w	r3, [r5], #1
 80154b8:	e7de      	b.n	8015478 <_scanf_i+0x10c>
 80154ba:	4631      	mov	r1, r6
 80154bc:	4650      	mov	r0, sl
 80154be:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80154c2:	4798      	blx	r3
 80154c4:	2800      	cmp	r0, #0
 80154c6:	d0df      	beq.n	8015488 <_scanf_i+0x11c>
 80154c8:	6823      	ldr	r3, [r4, #0]
 80154ca:	05d9      	lsls	r1, r3, #23
 80154cc:	d50d      	bpl.n	80154ea <_scanf_i+0x17e>
 80154ce:	42bd      	cmp	r5, r7
 80154d0:	d909      	bls.n	80154e6 <_scanf_i+0x17a>
 80154d2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80154d6:	4632      	mov	r2, r6
 80154d8:	4650      	mov	r0, sl
 80154da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80154de:	f105 39ff 	add.w	r9, r5, #4294967295
 80154e2:	4798      	blx	r3
 80154e4:	464d      	mov	r5, r9
 80154e6:	42bd      	cmp	r5, r7
 80154e8:	d028      	beq.n	801553c <_scanf_i+0x1d0>
 80154ea:	6822      	ldr	r2, [r4, #0]
 80154ec:	f012 0210 	ands.w	r2, r2, #16
 80154f0:	d113      	bne.n	801551a <_scanf_i+0x1ae>
 80154f2:	702a      	strb	r2, [r5, #0]
 80154f4:	4639      	mov	r1, r7
 80154f6:	6863      	ldr	r3, [r4, #4]
 80154f8:	4650      	mov	r0, sl
 80154fa:	9e01      	ldr	r6, [sp, #4]
 80154fc:	47b0      	blx	r6
 80154fe:	f8d8 3000 	ldr.w	r3, [r8]
 8015502:	6821      	ldr	r1, [r4, #0]
 8015504:	1d1a      	adds	r2, r3, #4
 8015506:	f8c8 2000 	str.w	r2, [r8]
 801550a:	f011 0f20 	tst.w	r1, #32
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	d00f      	beq.n	8015532 <_scanf_i+0x1c6>
 8015512:	6018      	str	r0, [r3, #0]
 8015514:	68e3      	ldr	r3, [r4, #12]
 8015516:	3301      	adds	r3, #1
 8015518:	60e3      	str	r3, [r4, #12]
 801551a:	2000      	movs	r0, #0
 801551c:	6923      	ldr	r3, [r4, #16]
 801551e:	1bed      	subs	r5, r5, r7
 8015520:	445d      	add	r5, fp
 8015522:	442b      	add	r3, r5
 8015524:	6123      	str	r3, [r4, #16]
 8015526:	b007      	add	sp, #28
 8015528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801552c:	f04f 0b00 	mov.w	fp, #0
 8015530:	e7ca      	b.n	80154c8 <_scanf_i+0x15c>
 8015532:	07ca      	lsls	r2, r1, #31
 8015534:	bf4c      	ite	mi
 8015536:	8018      	strhmi	r0, [r3, #0]
 8015538:	6018      	strpl	r0, [r3, #0]
 801553a:	e7eb      	b.n	8015514 <_scanf_i+0x1a8>
 801553c:	2001      	movs	r0, #1
 801553e:	e7f2      	b.n	8015526 <_scanf_i+0x1ba>
 8015540:	08016150 	.word	0x08016150
 8015544:	080125bd 	.word	0x080125bd
 8015548:	080124d5 	.word	0x080124d5
 801554c:	0801654d 	.word	0x0801654d

08015550 <__sflush_r>:
 8015550:	898a      	ldrh	r2, [r1, #12]
 8015552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015554:	4605      	mov	r5, r0
 8015556:	0710      	lsls	r0, r2, #28
 8015558:	460c      	mov	r4, r1
 801555a:	d457      	bmi.n	801560c <__sflush_r+0xbc>
 801555c:	684b      	ldr	r3, [r1, #4]
 801555e:	2b00      	cmp	r3, #0
 8015560:	dc04      	bgt.n	801556c <__sflush_r+0x1c>
 8015562:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015564:	2b00      	cmp	r3, #0
 8015566:	dc01      	bgt.n	801556c <__sflush_r+0x1c>
 8015568:	2000      	movs	r0, #0
 801556a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801556c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801556e:	2e00      	cmp	r6, #0
 8015570:	d0fa      	beq.n	8015568 <__sflush_r+0x18>
 8015572:	2300      	movs	r3, #0
 8015574:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015578:	682f      	ldr	r7, [r5, #0]
 801557a:	6a21      	ldr	r1, [r4, #32]
 801557c:	602b      	str	r3, [r5, #0]
 801557e:	d032      	beq.n	80155e6 <__sflush_r+0x96>
 8015580:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015582:	89a3      	ldrh	r3, [r4, #12]
 8015584:	075a      	lsls	r2, r3, #29
 8015586:	d505      	bpl.n	8015594 <__sflush_r+0x44>
 8015588:	6863      	ldr	r3, [r4, #4]
 801558a:	1ac0      	subs	r0, r0, r3
 801558c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801558e:	b10b      	cbz	r3, 8015594 <__sflush_r+0x44>
 8015590:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015592:	1ac0      	subs	r0, r0, r3
 8015594:	2300      	movs	r3, #0
 8015596:	4602      	mov	r2, r0
 8015598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801559a:	4628      	mov	r0, r5
 801559c:	6a21      	ldr	r1, [r4, #32]
 801559e:	47b0      	blx	r6
 80155a0:	1c43      	adds	r3, r0, #1
 80155a2:	89a3      	ldrh	r3, [r4, #12]
 80155a4:	d106      	bne.n	80155b4 <__sflush_r+0x64>
 80155a6:	6829      	ldr	r1, [r5, #0]
 80155a8:	291d      	cmp	r1, #29
 80155aa:	d82b      	bhi.n	8015604 <__sflush_r+0xb4>
 80155ac:	4a28      	ldr	r2, [pc, #160]	; (8015650 <__sflush_r+0x100>)
 80155ae:	410a      	asrs	r2, r1
 80155b0:	07d6      	lsls	r6, r2, #31
 80155b2:	d427      	bmi.n	8015604 <__sflush_r+0xb4>
 80155b4:	2200      	movs	r2, #0
 80155b6:	6062      	str	r2, [r4, #4]
 80155b8:	6922      	ldr	r2, [r4, #16]
 80155ba:	04d9      	lsls	r1, r3, #19
 80155bc:	6022      	str	r2, [r4, #0]
 80155be:	d504      	bpl.n	80155ca <__sflush_r+0x7a>
 80155c0:	1c42      	adds	r2, r0, #1
 80155c2:	d101      	bne.n	80155c8 <__sflush_r+0x78>
 80155c4:	682b      	ldr	r3, [r5, #0]
 80155c6:	b903      	cbnz	r3, 80155ca <__sflush_r+0x7a>
 80155c8:	6560      	str	r0, [r4, #84]	; 0x54
 80155ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80155cc:	602f      	str	r7, [r5, #0]
 80155ce:	2900      	cmp	r1, #0
 80155d0:	d0ca      	beq.n	8015568 <__sflush_r+0x18>
 80155d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80155d6:	4299      	cmp	r1, r3
 80155d8:	d002      	beq.n	80155e0 <__sflush_r+0x90>
 80155da:	4628      	mov	r0, r5
 80155dc:	f7fe fe18 	bl	8014210 <_free_r>
 80155e0:	2000      	movs	r0, #0
 80155e2:	6360      	str	r0, [r4, #52]	; 0x34
 80155e4:	e7c1      	b.n	801556a <__sflush_r+0x1a>
 80155e6:	2301      	movs	r3, #1
 80155e8:	4628      	mov	r0, r5
 80155ea:	47b0      	blx	r6
 80155ec:	1c41      	adds	r1, r0, #1
 80155ee:	d1c8      	bne.n	8015582 <__sflush_r+0x32>
 80155f0:	682b      	ldr	r3, [r5, #0]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d0c5      	beq.n	8015582 <__sflush_r+0x32>
 80155f6:	2b1d      	cmp	r3, #29
 80155f8:	d001      	beq.n	80155fe <__sflush_r+0xae>
 80155fa:	2b16      	cmp	r3, #22
 80155fc:	d101      	bne.n	8015602 <__sflush_r+0xb2>
 80155fe:	602f      	str	r7, [r5, #0]
 8015600:	e7b2      	b.n	8015568 <__sflush_r+0x18>
 8015602:	89a3      	ldrh	r3, [r4, #12]
 8015604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015608:	81a3      	strh	r3, [r4, #12]
 801560a:	e7ae      	b.n	801556a <__sflush_r+0x1a>
 801560c:	690f      	ldr	r7, [r1, #16]
 801560e:	2f00      	cmp	r7, #0
 8015610:	d0aa      	beq.n	8015568 <__sflush_r+0x18>
 8015612:	0793      	lsls	r3, r2, #30
 8015614:	bf18      	it	ne
 8015616:	2300      	movne	r3, #0
 8015618:	680e      	ldr	r6, [r1, #0]
 801561a:	bf08      	it	eq
 801561c:	694b      	ldreq	r3, [r1, #20]
 801561e:	1bf6      	subs	r6, r6, r7
 8015620:	600f      	str	r7, [r1, #0]
 8015622:	608b      	str	r3, [r1, #8]
 8015624:	2e00      	cmp	r6, #0
 8015626:	dd9f      	ble.n	8015568 <__sflush_r+0x18>
 8015628:	4633      	mov	r3, r6
 801562a:	463a      	mov	r2, r7
 801562c:	4628      	mov	r0, r5
 801562e:	6a21      	ldr	r1, [r4, #32]
 8015630:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8015634:	47e0      	blx	ip
 8015636:	2800      	cmp	r0, #0
 8015638:	dc06      	bgt.n	8015648 <__sflush_r+0xf8>
 801563a:	89a3      	ldrh	r3, [r4, #12]
 801563c:	f04f 30ff 	mov.w	r0, #4294967295
 8015640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015644:	81a3      	strh	r3, [r4, #12]
 8015646:	e790      	b.n	801556a <__sflush_r+0x1a>
 8015648:	4407      	add	r7, r0
 801564a:	1a36      	subs	r6, r6, r0
 801564c:	e7ea      	b.n	8015624 <__sflush_r+0xd4>
 801564e:	bf00      	nop
 8015650:	dfbffffe 	.word	0xdfbffffe

08015654 <_fflush_r>:
 8015654:	b538      	push	{r3, r4, r5, lr}
 8015656:	690b      	ldr	r3, [r1, #16]
 8015658:	4605      	mov	r5, r0
 801565a:	460c      	mov	r4, r1
 801565c:	b913      	cbnz	r3, 8015664 <_fflush_r+0x10>
 801565e:	2500      	movs	r5, #0
 8015660:	4628      	mov	r0, r5
 8015662:	bd38      	pop	{r3, r4, r5, pc}
 8015664:	b118      	cbz	r0, 801566e <_fflush_r+0x1a>
 8015666:	6a03      	ldr	r3, [r0, #32]
 8015668:	b90b      	cbnz	r3, 801566e <_fflush_r+0x1a>
 801566a:	f7fd fc9d 	bl	8012fa8 <__sinit>
 801566e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d0f3      	beq.n	801565e <_fflush_r+0xa>
 8015676:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015678:	07d0      	lsls	r0, r2, #31
 801567a:	d404      	bmi.n	8015686 <_fflush_r+0x32>
 801567c:	0599      	lsls	r1, r3, #22
 801567e:	d402      	bmi.n	8015686 <_fflush_r+0x32>
 8015680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015682:	f7fd ff10 	bl	80134a6 <__retarget_lock_acquire_recursive>
 8015686:	4628      	mov	r0, r5
 8015688:	4621      	mov	r1, r4
 801568a:	f7ff ff61 	bl	8015550 <__sflush_r>
 801568e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015690:	4605      	mov	r5, r0
 8015692:	07da      	lsls	r2, r3, #31
 8015694:	d4e4      	bmi.n	8015660 <_fflush_r+0xc>
 8015696:	89a3      	ldrh	r3, [r4, #12]
 8015698:	059b      	lsls	r3, r3, #22
 801569a:	d4e1      	bmi.n	8015660 <_fflush_r+0xc>
 801569c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801569e:	f7fd ff03 	bl	80134a8 <__retarget_lock_release_recursive>
 80156a2:	e7dd      	b.n	8015660 <_fflush_r+0xc>

080156a4 <fiprintf>:
 80156a4:	b40e      	push	{r1, r2, r3}
 80156a6:	b503      	push	{r0, r1, lr}
 80156a8:	4601      	mov	r1, r0
 80156aa:	ab03      	add	r3, sp, #12
 80156ac:	4805      	ldr	r0, [pc, #20]	; (80156c4 <fiprintf+0x20>)
 80156ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80156b2:	6800      	ldr	r0, [r0, #0]
 80156b4:	9301      	str	r3, [sp, #4]
 80156b6:	f7ff fce5 	bl	8015084 <_vfiprintf_r>
 80156ba:	b002      	add	sp, #8
 80156bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80156c0:	b003      	add	sp, #12
 80156c2:	4770      	bx	lr
 80156c4:	200003c0 	.word	0x200003c0

080156c8 <__swhatbuf_r>:
 80156c8:	b570      	push	{r4, r5, r6, lr}
 80156ca:	460c      	mov	r4, r1
 80156cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156d0:	4615      	mov	r5, r2
 80156d2:	2900      	cmp	r1, #0
 80156d4:	461e      	mov	r6, r3
 80156d6:	b096      	sub	sp, #88	; 0x58
 80156d8:	da0c      	bge.n	80156f4 <__swhatbuf_r+0x2c>
 80156da:	89a3      	ldrh	r3, [r4, #12]
 80156dc:	2100      	movs	r1, #0
 80156de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80156e2:	bf0c      	ite	eq
 80156e4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80156e8:	2340      	movne	r3, #64	; 0x40
 80156ea:	2000      	movs	r0, #0
 80156ec:	6031      	str	r1, [r6, #0]
 80156ee:	602b      	str	r3, [r5, #0]
 80156f0:	b016      	add	sp, #88	; 0x58
 80156f2:	bd70      	pop	{r4, r5, r6, pc}
 80156f4:	466a      	mov	r2, sp
 80156f6:	f000 f8d3 	bl	80158a0 <_fstat_r>
 80156fa:	2800      	cmp	r0, #0
 80156fc:	dbed      	blt.n	80156da <__swhatbuf_r+0x12>
 80156fe:	9901      	ldr	r1, [sp, #4]
 8015700:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015704:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015708:	4259      	negs	r1, r3
 801570a:	4159      	adcs	r1, r3
 801570c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015710:	e7eb      	b.n	80156ea <__swhatbuf_r+0x22>

08015712 <__smakebuf_r>:
 8015712:	898b      	ldrh	r3, [r1, #12]
 8015714:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015716:	079d      	lsls	r5, r3, #30
 8015718:	4606      	mov	r6, r0
 801571a:	460c      	mov	r4, r1
 801571c:	d507      	bpl.n	801572e <__smakebuf_r+0x1c>
 801571e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015722:	6023      	str	r3, [r4, #0]
 8015724:	6123      	str	r3, [r4, #16]
 8015726:	2301      	movs	r3, #1
 8015728:	6163      	str	r3, [r4, #20]
 801572a:	b002      	add	sp, #8
 801572c:	bd70      	pop	{r4, r5, r6, pc}
 801572e:	466a      	mov	r2, sp
 8015730:	ab01      	add	r3, sp, #4
 8015732:	f7ff ffc9 	bl	80156c8 <__swhatbuf_r>
 8015736:	9900      	ldr	r1, [sp, #0]
 8015738:	4605      	mov	r5, r0
 801573a:	4630      	mov	r0, r6
 801573c:	f7fc fd88 	bl	8012250 <_malloc_r>
 8015740:	b948      	cbnz	r0, 8015756 <__smakebuf_r+0x44>
 8015742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015746:	059a      	lsls	r2, r3, #22
 8015748:	d4ef      	bmi.n	801572a <__smakebuf_r+0x18>
 801574a:	f023 0303 	bic.w	r3, r3, #3
 801574e:	f043 0302 	orr.w	r3, r3, #2
 8015752:	81a3      	strh	r3, [r4, #12]
 8015754:	e7e3      	b.n	801571e <__smakebuf_r+0xc>
 8015756:	89a3      	ldrh	r3, [r4, #12]
 8015758:	6020      	str	r0, [r4, #0]
 801575a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801575e:	81a3      	strh	r3, [r4, #12]
 8015760:	9b00      	ldr	r3, [sp, #0]
 8015762:	6120      	str	r0, [r4, #16]
 8015764:	6163      	str	r3, [r4, #20]
 8015766:	9b01      	ldr	r3, [sp, #4]
 8015768:	b15b      	cbz	r3, 8015782 <__smakebuf_r+0x70>
 801576a:	4630      	mov	r0, r6
 801576c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015770:	f000 f8a8 	bl	80158c4 <_isatty_r>
 8015774:	b128      	cbz	r0, 8015782 <__smakebuf_r+0x70>
 8015776:	89a3      	ldrh	r3, [r4, #12]
 8015778:	f023 0303 	bic.w	r3, r3, #3
 801577c:	f043 0301 	orr.w	r3, r3, #1
 8015780:	81a3      	strh	r3, [r4, #12]
 8015782:	89a3      	ldrh	r3, [r4, #12]
 8015784:	431d      	orrs	r5, r3
 8015786:	81a5      	strh	r5, [r4, #12]
 8015788:	e7cf      	b.n	801572a <__smakebuf_r+0x18>

0801578a <__sccl>:
 801578a:	b570      	push	{r4, r5, r6, lr}
 801578c:	780b      	ldrb	r3, [r1, #0]
 801578e:	4604      	mov	r4, r0
 8015790:	2b5e      	cmp	r3, #94	; 0x5e
 8015792:	bf0b      	itete	eq
 8015794:	784b      	ldrbeq	r3, [r1, #1]
 8015796:	1c4a      	addne	r2, r1, #1
 8015798:	1c8a      	addeq	r2, r1, #2
 801579a:	2100      	movne	r1, #0
 801579c:	bf08      	it	eq
 801579e:	2101      	moveq	r1, #1
 80157a0:	3801      	subs	r0, #1
 80157a2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80157a6:	f800 1f01 	strb.w	r1, [r0, #1]!
 80157aa:	42a8      	cmp	r0, r5
 80157ac:	d1fb      	bne.n	80157a6 <__sccl+0x1c>
 80157ae:	b90b      	cbnz	r3, 80157b4 <__sccl+0x2a>
 80157b0:	1e50      	subs	r0, r2, #1
 80157b2:	bd70      	pop	{r4, r5, r6, pc}
 80157b4:	f081 0101 	eor.w	r1, r1, #1
 80157b8:	4610      	mov	r0, r2
 80157ba:	54e1      	strb	r1, [r4, r3]
 80157bc:	4602      	mov	r2, r0
 80157be:	f812 5b01 	ldrb.w	r5, [r2], #1
 80157c2:	2d2d      	cmp	r5, #45	; 0x2d
 80157c4:	d005      	beq.n	80157d2 <__sccl+0x48>
 80157c6:	2d5d      	cmp	r5, #93	; 0x5d
 80157c8:	d016      	beq.n	80157f8 <__sccl+0x6e>
 80157ca:	2d00      	cmp	r5, #0
 80157cc:	d0f1      	beq.n	80157b2 <__sccl+0x28>
 80157ce:	462b      	mov	r3, r5
 80157d0:	e7f2      	b.n	80157b8 <__sccl+0x2e>
 80157d2:	7846      	ldrb	r6, [r0, #1]
 80157d4:	2e5d      	cmp	r6, #93	; 0x5d
 80157d6:	d0fa      	beq.n	80157ce <__sccl+0x44>
 80157d8:	42b3      	cmp	r3, r6
 80157da:	dcf8      	bgt.n	80157ce <__sccl+0x44>
 80157dc:	461a      	mov	r2, r3
 80157de:	3002      	adds	r0, #2
 80157e0:	3201      	adds	r2, #1
 80157e2:	4296      	cmp	r6, r2
 80157e4:	54a1      	strb	r1, [r4, r2]
 80157e6:	dcfb      	bgt.n	80157e0 <__sccl+0x56>
 80157e8:	1af2      	subs	r2, r6, r3
 80157ea:	3a01      	subs	r2, #1
 80157ec:	42b3      	cmp	r3, r6
 80157ee:	bfa8      	it	ge
 80157f0:	2200      	movge	r2, #0
 80157f2:	1c5d      	adds	r5, r3, #1
 80157f4:	18ab      	adds	r3, r5, r2
 80157f6:	e7e1      	b.n	80157bc <__sccl+0x32>
 80157f8:	4610      	mov	r0, r2
 80157fa:	e7da      	b.n	80157b2 <__sccl+0x28>

080157fc <__submore>:
 80157fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015800:	460c      	mov	r4, r1
 8015802:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015808:	4299      	cmp	r1, r3
 801580a:	d11b      	bne.n	8015844 <__submore+0x48>
 801580c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015810:	f7fc fd1e 	bl	8012250 <_malloc_r>
 8015814:	b918      	cbnz	r0, 801581e <__submore+0x22>
 8015816:	f04f 30ff 	mov.w	r0, #4294967295
 801581a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801581e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015822:	63a3      	str	r3, [r4, #56]	; 0x38
 8015824:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8015828:	6360      	str	r0, [r4, #52]	; 0x34
 801582a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801582e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015832:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8015836:	7043      	strb	r3, [r0, #1]
 8015838:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801583c:	7003      	strb	r3, [r0, #0]
 801583e:	6020      	str	r0, [r4, #0]
 8015840:	2000      	movs	r0, #0
 8015842:	e7ea      	b.n	801581a <__submore+0x1e>
 8015844:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8015846:	0077      	lsls	r7, r6, #1
 8015848:	463a      	mov	r2, r7
 801584a:	f7fc fd95 	bl	8012378 <_realloc_r>
 801584e:	4605      	mov	r5, r0
 8015850:	2800      	cmp	r0, #0
 8015852:	d0e0      	beq.n	8015816 <__submore+0x1a>
 8015854:	eb00 0806 	add.w	r8, r0, r6
 8015858:	4601      	mov	r1, r0
 801585a:	4632      	mov	r2, r6
 801585c:	4640      	mov	r0, r8
 801585e:	f7fd fe3a 	bl	80134d6 <memcpy>
 8015862:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8015866:	f8c4 8000 	str.w	r8, [r4]
 801586a:	e7e9      	b.n	8015840 <__submore+0x44>

0801586c <memmove>:
 801586c:	4288      	cmp	r0, r1
 801586e:	b510      	push	{r4, lr}
 8015870:	eb01 0402 	add.w	r4, r1, r2
 8015874:	d902      	bls.n	801587c <memmove+0x10>
 8015876:	4284      	cmp	r4, r0
 8015878:	4623      	mov	r3, r4
 801587a:	d807      	bhi.n	801588c <memmove+0x20>
 801587c:	1e43      	subs	r3, r0, #1
 801587e:	42a1      	cmp	r1, r4
 8015880:	d008      	beq.n	8015894 <memmove+0x28>
 8015882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015886:	f803 2f01 	strb.w	r2, [r3, #1]!
 801588a:	e7f8      	b.n	801587e <memmove+0x12>
 801588c:	4601      	mov	r1, r0
 801588e:	4402      	add	r2, r0
 8015890:	428a      	cmp	r2, r1
 8015892:	d100      	bne.n	8015896 <memmove+0x2a>
 8015894:	bd10      	pop	{r4, pc}
 8015896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801589a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801589e:	e7f7      	b.n	8015890 <memmove+0x24>

080158a0 <_fstat_r>:
 80158a0:	b538      	push	{r3, r4, r5, lr}
 80158a2:	2300      	movs	r3, #0
 80158a4:	4d06      	ldr	r5, [pc, #24]	; (80158c0 <_fstat_r+0x20>)
 80158a6:	4604      	mov	r4, r0
 80158a8:	4608      	mov	r0, r1
 80158aa:	4611      	mov	r1, r2
 80158ac:	602b      	str	r3, [r5, #0]
 80158ae:	f7ee fba6 	bl	8003ffe <_fstat>
 80158b2:	1c43      	adds	r3, r0, #1
 80158b4:	d102      	bne.n	80158bc <_fstat_r+0x1c>
 80158b6:	682b      	ldr	r3, [r5, #0]
 80158b8:	b103      	cbz	r3, 80158bc <_fstat_r+0x1c>
 80158ba:	6023      	str	r3, [r4, #0]
 80158bc:	bd38      	pop	{r3, r4, r5, pc}
 80158be:	bf00      	nop
 80158c0:	20001238 	.word	0x20001238

080158c4 <_isatty_r>:
 80158c4:	b538      	push	{r3, r4, r5, lr}
 80158c6:	2300      	movs	r3, #0
 80158c8:	4d05      	ldr	r5, [pc, #20]	; (80158e0 <_isatty_r+0x1c>)
 80158ca:	4604      	mov	r4, r0
 80158cc:	4608      	mov	r0, r1
 80158ce:	602b      	str	r3, [r5, #0]
 80158d0:	f7ee fba4 	bl	800401c <_isatty>
 80158d4:	1c43      	adds	r3, r0, #1
 80158d6:	d102      	bne.n	80158de <_isatty_r+0x1a>
 80158d8:	682b      	ldr	r3, [r5, #0]
 80158da:	b103      	cbz	r3, 80158de <_isatty_r+0x1a>
 80158dc:	6023      	str	r3, [r4, #0]
 80158de:	bd38      	pop	{r3, r4, r5, pc}
 80158e0:	20001238 	.word	0x20001238

080158e4 <abort>:
 80158e4:	2006      	movs	r0, #6
 80158e6:	b508      	push	{r3, lr}
 80158e8:	f000 f840 	bl	801596c <raise>
 80158ec:	2001      	movs	r0, #1
 80158ee:	f7ee fb38 	bl	8003f62 <_exit>

080158f2 <_calloc_r>:
 80158f2:	b570      	push	{r4, r5, r6, lr}
 80158f4:	fba1 5402 	umull	r5, r4, r1, r2
 80158f8:	b934      	cbnz	r4, 8015908 <_calloc_r+0x16>
 80158fa:	4629      	mov	r1, r5
 80158fc:	f7fc fca8 	bl	8012250 <_malloc_r>
 8015900:	4606      	mov	r6, r0
 8015902:	b928      	cbnz	r0, 8015910 <_calloc_r+0x1e>
 8015904:	4630      	mov	r0, r6
 8015906:	bd70      	pop	{r4, r5, r6, pc}
 8015908:	220c      	movs	r2, #12
 801590a:	2600      	movs	r6, #0
 801590c:	6002      	str	r2, [r0, #0]
 801590e:	e7f9      	b.n	8015904 <_calloc_r+0x12>
 8015910:	462a      	mov	r2, r5
 8015912:	4621      	mov	r1, r4
 8015914:	f7fd fcdc 	bl	80132d0 <memset>
 8015918:	e7f4      	b.n	8015904 <_calloc_r+0x12>

0801591a <_raise_r>:
 801591a:	291f      	cmp	r1, #31
 801591c:	b538      	push	{r3, r4, r5, lr}
 801591e:	4604      	mov	r4, r0
 8015920:	460d      	mov	r5, r1
 8015922:	d904      	bls.n	801592e <_raise_r+0x14>
 8015924:	2316      	movs	r3, #22
 8015926:	6003      	str	r3, [r0, #0]
 8015928:	f04f 30ff 	mov.w	r0, #4294967295
 801592c:	bd38      	pop	{r3, r4, r5, pc}
 801592e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015930:	b112      	cbz	r2, 8015938 <_raise_r+0x1e>
 8015932:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015936:	b94b      	cbnz	r3, 801594c <_raise_r+0x32>
 8015938:	4620      	mov	r0, r4
 801593a:	f000 f831 	bl	80159a0 <_getpid_r>
 801593e:	462a      	mov	r2, r5
 8015940:	4601      	mov	r1, r0
 8015942:	4620      	mov	r0, r4
 8015944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015948:	f000 b818 	b.w	801597c <_kill_r>
 801594c:	2b01      	cmp	r3, #1
 801594e:	d00a      	beq.n	8015966 <_raise_r+0x4c>
 8015950:	1c59      	adds	r1, r3, #1
 8015952:	d103      	bne.n	801595c <_raise_r+0x42>
 8015954:	2316      	movs	r3, #22
 8015956:	6003      	str	r3, [r0, #0]
 8015958:	2001      	movs	r0, #1
 801595a:	e7e7      	b.n	801592c <_raise_r+0x12>
 801595c:	2400      	movs	r4, #0
 801595e:	4628      	mov	r0, r5
 8015960:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015964:	4798      	blx	r3
 8015966:	2000      	movs	r0, #0
 8015968:	e7e0      	b.n	801592c <_raise_r+0x12>
	...

0801596c <raise>:
 801596c:	4b02      	ldr	r3, [pc, #8]	; (8015978 <raise+0xc>)
 801596e:	4601      	mov	r1, r0
 8015970:	6818      	ldr	r0, [r3, #0]
 8015972:	f7ff bfd2 	b.w	801591a <_raise_r>
 8015976:	bf00      	nop
 8015978:	200003c0 	.word	0x200003c0

0801597c <_kill_r>:
 801597c:	b538      	push	{r3, r4, r5, lr}
 801597e:	2300      	movs	r3, #0
 8015980:	4d06      	ldr	r5, [pc, #24]	; (801599c <_kill_r+0x20>)
 8015982:	4604      	mov	r4, r0
 8015984:	4608      	mov	r0, r1
 8015986:	4611      	mov	r1, r2
 8015988:	602b      	str	r3, [r5, #0]
 801598a:	f7ee fada 	bl	8003f42 <_kill>
 801598e:	1c43      	adds	r3, r0, #1
 8015990:	d102      	bne.n	8015998 <_kill_r+0x1c>
 8015992:	682b      	ldr	r3, [r5, #0]
 8015994:	b103      	cbz	r3, 8015998 <_kill_r+0x1c>
 8015996:	6023      	str	r3, [r4, #0]
 8015998:	bd38      	pop	{r3, r4, r5, pc}
 801599a:	bf00      	nop
 801599c:	20001238 	.word	0x20001238

080159a0 <_getpid_r>:
 80159a0:	f7ee bac8 	b.w	8003f34 <_getpid>

080159a4 <_init>:
 80159a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159a6:	bf00      	nop
 80159a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159aa:	bc08      	pop	{r3}
 80159ac:	469e      	mov	lr, r3
 80159ae:	4770      	bx	lr

080159b0 <_fini>:
 80159b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159b2:	bf00      	nop
 80159b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159b6:	bc08      	pop	{r3}
 80159b8:	469e      	mov	lr, r3
 80159ba:	4770      	bx	lr
